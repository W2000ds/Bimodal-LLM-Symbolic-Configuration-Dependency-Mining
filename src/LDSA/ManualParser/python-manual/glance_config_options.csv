verbose,"Optional. Default: False Can be specified on the command line and in configuration files. Turns on the INFO level in logging and prints more verbose command-line
interface printouts."
debug,Optional. Default: False Can be specified on the command line and in configuration files. Turns on the DEBUG level in logging.
config-file,"Optional. Default: See below for default search order. Specified on the command line only. Takes a path to a configuration file to use when running the program. If this
CLI option is not specified, then we check to see if the first argument is a
file. If it is, then we try to use that as the configuration file.
If there is no file or there were no arguments, we search for a configuration
file in the following order: ~/.glance ~/ /etc/glance /etc The filename that is searched for depends on the server application name. So,
if you are starting up the API server, glance-api.conf is searched for."
config-dir,"Optional. Default: None Specified on the command line only. Takes a path to a configuration directory from which all *.conf fragments
are loaded. This provides an alternative to multiple config-file options when it is inconvenient to explicitly enumerate all the
configuration files, for example when an unknown number of config fragments
are being generated by a deployment framework. If config-dir is set, then config-file is ignored. An example usage would be: The numeric prefixes in the example above are only necessary if a specific
parse ordering is required (i.e. if an individual config option set in an
earlier fragment is overridden in a later fragment). Note that glance-manage currently loads configuration from three files: glance-api.conf glance-manage.conf By default glance-manage.conf only specifies a custom logging file but
other configuration options for glance-manage should be migrated
in there. Warning : Options set in glance-manage.conf will override options of
the same section and name set in glance-api.conf"
verbose,"Optional. Default: False Can be specified on the command line and in configuration files. Turns on the INFO level in logging and prints more verbose command-line
interface printouts."
debug,Optional. Default: False Can be specified on the command line and in configuration files. Turns on the DEBUG level in logging.
config-file,"Optional. Default: See below for default search order. Specified on the command line only. Takes a path to a configuration file to use when running the program. If this
CLI option is not specified, then we check to see if the first argument is a
file. If it is, then we try to use that as the configuration file.
If there is no file or there were no arguments, we search for a configuration
file in the following order: ~/.glance ~/ /etc/glance /etc The filename that is searched for depends on the server application name. So,
if you are starting up the API server, glance-api.conf is searched for."
config-dir,"Optional. Default: None Specified on the command line only. Takes a path to a configuration directory from which all *.conf fragments
are loaded. This provides an alternative to multiple config-file options when it is inconvenient to explicitly enumerate all the
configuration files, for example when an unknown number of config fragments
are being generated by a deployment framework. If config-dir is set, then config-file is ignored. An example usage would be: The numeric prefixes in the example above are only necessary if a specific
parse ordering is required (i.e. if an individual config option set in an
earlier fragment is overridden in a later fragment). Note that glance-manage currently loads configuration from three files: glance-api.conf glance-manage.conf By default glance-manage.conf only specifies a custom logging file but
other configuration options for glance-manage should be migrated
in there. Warning : Options set in glance-manage.conf will override options of
the same section and name set in glance-api.conf"
bind_host,The address of the host to bind to. Optional. Default: 0.0.0.0
bind_port,The port the server should bind to. Optional. Default: 9292 for the API server
backlog,Number of backlog requests to configure the socket with. Optional. Default: 4096
tcp_keepidle,"Sets the value of TCP_KEEPIDLE in seconds for each server socket.
Not supported on OS X. Optional. Default: 600"
client_socket_timeout,"Timeout for client connections’ socket operations.  If an incoming
connection is idle for this period it will be closed.  A value of 0 means wait forever. Optional. Default: 900"
workers,"Number of Glance API worker processes to start. Each worker process will
listen on the same port. Increasing this value may increase performance
(especially if using SSL with compression enabled). Typically it is
recommended to have one worker process per CPU. The value 0 will prevent
any new worker processes from being created. Optional. Default: The number of CPUs available will be used by default."
max_request_id_length,"Limits the maximum size of the x-openstack-request-id header which is
logged. Affects only if context middleware is configured in pipeline. Optional. Default: 64 (Limited by max_header_line default: 16384)"
log-config,Optional. Default: None Specified on the command line only. Takes a path to a configuration file to use for configuring logging.
log_file,"The filepath of the file to use for logging messages from Glance’s servers.
If missing, the default is to output messages to stdout ,
so if you are running Glance servers in a daemon mode
(using glance-control ) you should make sure that the log_file option is set appropriately."
log_dir,"The filepath of the directory to use for log files.
If not specified (the default) the log_file is used as
an absolute filepath."
log_date_format,The format string for timestamps in the log output. Defaults to %Y-%m-%d %H:%M:%S . See the logging module documentation for more information on setting this format string.
log_use_syslog,Use syslog logging functionality. Defaults to False.
enabled_backends,"Required. A comma-separated list of “store_id:store_type” strings. The store ids can
be chosen by the user, whereas valid store types are ( file , http , rbd , swift , cinder , vmware , s3 )."
filesystem_store_datadir,"Optional. Default: /var/lib/glance/images/ Can only be specified in configuration files. This option is specific to the filesystem storage backend. Sets the path where the filesystem storage backend write disk images.
Note that the filesystem storage backend will attempt to create this
directory if it does not exist. Ensure that the user that glance-api runs under has write permissions to this directory."
filesystem_store_file_perm,"Optional. Default: 0 Can only be specified in configuration files. This option is specific to the filesystem storage backend. The required permission value, in octal representation, for the created
image file. You can use this value to specify the user of the consuming
service (such as Nova) as the only member of the group that owns
the created files. To keep the default value, assign a permission value that
is less than or equal to 0.  Note that the file owner must maintain read
permission; if this value removes that permission an error message
will be logged and the BadStoreConfiguration exception will be raised.
If the Glance service has insufficient privileges to change file access
permissions, a file will still be saved, but a warning message
will appear in the Glance log."
filesystem_store_chunk_size,"Optional. Default: 65536 Can only be specified in configuration files. This option is specific to the filesystem storage backend. The chunk size used when reading or writing image files. Raising this value
may improve the throughput but it may also slightly increase the memory
usage when handling a large number of requests."
filesystem_store_datadirs,"Optional. Default: /var/lib/glance/images/:1 Example: This option can only be specified in configuration file and is specific
to the filesystem storage backend only. filesystem_store_datadirs option allows administrators to configure
multiple store directories to save glance image in filesystem storage
backend. Each directory can be coupled with its priority. NOTE : This option can be specified multiple times to specify multiple stores. Either filesystem_store_datadir or filesystem_store_datadirs option must be
specified in glance-api.conf Store with priority 200 has precedence over store with priority 100. If no priority is specified, default priority ‘0’ is associated with it. If two filesystem stores have same priority store with maximum free space
will be chosen to store the image. If same store is specified multiple times then BadStoreConfiguration
exception will be raised."
swift_store_auth_address,"Required when using the Swift storage backend. Can only be specified in configuration files. Deprecated. Use auth_address in the Swift back-end configuration
file instead. This option is specific to the Swift storage backend. Sets the authentication URL supplied to Swift when making calls to its
storage system. For more information about the Swift authentication system,
please see the Swift auth documentation. IMPORTANT NOTE : Swift authentication addresses use HTTPS by default. This
means that if you are running Swift with authentication over HTTP, you need
to set your swift_store_auth_address to the full URL,
including the http:// ."
swift_store_user,Required when using the Swift storage backend. Can only be specified in configuration files. Deprecated. Use user in the Swift back-end configuration file instead. This option is specific to the Swift storage backend. Sets the user to authenticate against the swift_store_auth_address with.
swift_store_key,Required when using the Swift storage backend. Can only be specified in configuration files. Deprecated. Use key in the Swift back-end configuration file instead. This option is specific to the Swift storage backend. Sets the authentication key to authenticate against the swift_store_auth_address with for the user swift_store_user .
swift_store_container,Optional. Default: glance Can only be specified in configuration files. This option is specific to the Swift storage backend. Sets the name of the container to use for Glance images in Swift.
swift_store_create_container_on_put,"Optional. Default: False Can only be specified in configuration files. This option is specific to the Swift storage backend. If true, Glance will attempt to create the container swift_store_container if it does not exist."
swift_store_large_object_size,"Optional. Default: 5120 Can only be specified in configuration files. This option is specific to the Swift storage backend. What size, in MB, should Glance start chunking image files
and do a large object manifest in Swift? By default, this is
the maximum object size in Swift, which is 5GB"
swift_store_large_object_chunk_size,"Optional. Default: 200 Can only be specified in configuration files. This option is specific to the Swift storage backend. When doing a large object manifest, what size, in MB, should
Glance write chunks to Swift?  The default is 200MB."
swift_store_multi_tenant,"Optional. Default: False Can only be specified in configuration files. This option is specific to the Swift storage backend. If set to True enables multi-tenant storage mode which causes Glance images
to be stored in tenant specific Swift accounts. When set to False Glance
stores all images in a single Swift account."
swift_store_multiple_containers_seed,"Optional. Default: 0 Can only be specified in configuration files. This option is specific to the Swift storage backend. When set to 0, a single-tenant store will only use one container to store all
images. When set to an integer value between 1 and 32, a single-tenant store
will use multiple containers to store images, and this value will determine
how many characters from an image UUID are checked when determining what
container to place the image in. The maximum number of containers that will
be created is approximately equal to 16^N. This setting is used only when
swift_store_multi_tenant is disabled. Example: if this config option is set to 3 and
swift_store_container = ‘glance’, then an image with UUID
‘fdae39a1-bac5-4238-aba4-69bcc726e848’ would be placed in the container
‘glance_fda’. All dashes in the UUID are included when creating the container
name but do not count toward the character limit, so in this example
with N=10 the container name would be ‘glance_fdae39a1-ba’. When choosing the value for swift_store_multiple_containers_seed, deployers
should discuss a suitable value with their swift operations team. The authors
of this option recommend that large scale deployments use a value of ‘2’,
which will create a maximum of ~256 containers. Choosing a higher number than
this, even in extremely large scale deployments, may not have any positive
impact on performance and could lead to a large number of empty, unused
containers. The largest of deployments could notice an increase in
performance if swift rate limits are throttling on single container.
Note: If dynamic container creation is turned off, any value for this
configuration option higher than ‘1’ may be unreasonable as the deployer
would have to manually create each container."
swift_store_admin_tenants,"Can only be specified in configuration files. This option is specific to the Swift storage backend. Optional. Default: Not set. A list of swift ACL strings that will be applied as both read and
write ACLs to the containers created by Glance in multi-tenant
mode. This grants the specified tenants/users read and write access
to all newly created image objects. The standard swift ACL string
formats are allowed, including: <tenant_id>:<username>
<tenant_name>:<username>
*:<username> Multiple ACLs can be combined using a comma separated list, for
example: swift_store_admin_tenants = service:glance,*:admin"
swift_store_auth_version,"Can only be specified in configuration files. Deprecated. Use auth_version in the Swift back-end configuration
file instead. This option is specific to the Swift storage backend. Optional. Default: 2 A string indicating which version of Swift OpenStack authentication
to use. See the project python-swiftclient for more details."
swift_store_service_type,"Can only be specified in configuration files. This option is specific to the Swift storage backend. Optional. Default: object-store A string giving the service type of the swift service to use. This
setting is only used if swift_store_auth_version is 2 ."
swift_store_region,"Can only be specified in configuration files. This option is specific to the Swift storage backend. Optional. Default: Not set. A string giving the region of the swift service endpoint to use. This
setting is only used if swift_store_auth_version is 2 . This
setting is especially useful for disambiguation if multiple swift
services might appear in a service catalog during authentication."
swift_store_endpoint_type,"Can only be specified in configuration files. This option is specific to the Swift storage backend. Optional. Default: publicURL A string giving the endpoint type of the swift service endpoint to
use. This setting is only used if swift_store_auth_version is 2 ."
swift_store_ssl_compression,"Can only be specified in configuration files. This option is specific to the Swift storage backend. Optional. Default: True. If set to False, disables SSL layer compression of https swift
requests. Setting to ‘False’ may improve performance for images which
are already in a compressed format, e.g. qcow2. If set to True then
compression will be enabled (provided it is supported by the swift
proxy)."
swift_store_cacert,"Can only be specified in configuration files. Optional. Default: None A string giving the path to a CA certificate bundle that will allow Glance’s
services to perform SSL verification when communicating with Swift."
swift_store_retry_get_count,"The number of times a Swift download will be retried before the request
fails.
Optional. Default: 0"
swift_store_config_file,This option is specific to the Swift storage backend.
default_swift_reference,Required when multiple Swift accounts/backing stores are configured. Can only be specified in configuration files. This option is specific to the Swift storage backend. It is the default swift reference that is used to add any new images.
swift_store_auth_insecure,"If True, bypass SSL certificate verification for Swift. Can only be specified in configuration files. This option is specific to the Swift storage backend. Optional. Default: False"
user,"A project_name user_name pair in the project_name:user_name format
to authenticate against the Swift authentication service."
key,"An authentication key for a user authenticating against the Swift
authentication service."
auth_address,An address where the Swift authentication service is located.
auth_version,"A version of the authentication service to use.
Valid versions are 2 and 3 for Keystone and 1 (deprecated) for Swauth and Rackspace. Optional. Default: 2"
project_domain_id,"A domain ID of the project which is the requested project-level
authorization scope. Optional. Default: None This option can be specified if ``auth_version` is 3 .`"
project_domain_name,"A domain name of the project which is the requested project-level
authorization scope. Optional. Default: None This option can be specified if ``auth_version` is 3 .`"
user_domain_id,"A domain ID of the user which is the requested domain-level
authorization scope. Optional. Default: None This option can be specified if ``auth_version` is 3 .`"
user_domain_name,"A domain name of the user which is the requested domain-level
authorization scope. Optional. Default: None This option can be specified if ``auth_version` is 3 . `"
rbd_store_pool,Optional. Default: rbd Can only be specified in configuration files. This option is specific to the RBD storage backend. Sets the RADOS pool in which images are stored.
rbd_store_chunk_size,"Optional. Default: 8 Can only be specified in configuration files. This option is specific to the RBD storage backend. Images will be chunked into objects of this size (in megabytes).
For best performance, this should be a power of two."
rados_connect_timeout,"Optional. Default: 0 Can only be specified in configuration files. This option is specific to the RBD storage backend. Prevents glance-api hangups during the connection to RBD. Sets the time
to wait (in seconds) for glance-api before closing the connection.
Setting rados_connect_timeout<=0 means no timeout."
rbd_store_ceph_conf,"Optional. Default: /etc/ceph/ceph.conf , ~/.ceph/config , and ./ceph.conf Can only be specified in configuration files. This option is specific to the RBD storage backend. Sets the Ceph configuration file to use."
rbd_store_user,"Optional. Default: admin Can only be specified in configuration files. This option is specific to the RBD storage backend. Sets the RADOS user to authenticate as. This is only needed
when RADOS authentication is enabled."
cinder_catalog_info,"Optional. Default: volumev3::publicURL Can only be specified in configuration files. This option is specific to the Cinder storage backend. Sets the info to match when looking for cinder in the service catalog.
Format is :
separated values of the form: <service_type>:<service_name>:<endpoint_type>"
cinder_endpoint_template,"Optional. Default: None Can only be specified in configuration files. This option is specific to the Cinder storage backend. Override service catalog lookup with template for cinder endpoint. %(...)s parts are replaced by the value in the request context.
e.g. http://localhost:8776/v3/%(tenant)s"
os_region_name,Optional. Default: None Can only be specified in configuration files. This option is specific to the Cinder storage backend. Region name of this node. Deprecated. Use cinder_os_region_name instead.
cinder_os_region_name,"Optional. Default: None Can only be specified in configuration files. This option is specific to the Cinder storage backend. Region name of this node.  If specified, it is used to locate cinder from
the service catalog."
cinder_ca_certificates_file,Optional. Default: None Can only be specified in configuration files. This option is specific to the Cinder storage backend. Location of ca certificates file to use for cinder client requests.
cinder_http_retries,Optional. Default: 3 Can only be specified in configuration files. This option is specific to the Cinder storage backend. Number of cinderclient retries on failed http calls.
cinder_state_transition_timeout,"Optional. Default: 300 Can only be specified in configuration files. This option is specific to the Cinder storage backend. Time period, in seconds, to wait for a cinder volume transition to complete."
cinder_api_insecure,Optional. Default: False Can only be specified in configuration files. This option is specific to the Cinder storage backend. Allow to perform insecure SSL requests to cinder.
cinder_store_user_name,"Optional. Default: None Can only be specified in configuration files. This option is specific to the Cinder storage backend. User name to authenticate against Cinder. If <None>, the user of current
context is used. NOTE : This option is applied only if all of cinder_store_user_name , cinder_store_password , cinder_store_project_name and cinder_store_auth_address are set.
These options are useful to put image volumes into the internal service
project in order to hide the volume from users, and to make the image
shareable among projects."
cinder_store_user_domain_name,"Optional. Default: Default Can only be specified in configuration files. This option is specific to the Cinder storage backend. Domain of the user to authenticate against cinder. NOTE : This option is applied only if all of cinder_store_user_name , cinder_store_password , cinder_store_project_name and cinder_store_auth_address are set."
cinder_store_password,"Optional. Default: None Can only be specified in configuration files. This option is specific to the Cinder storage backend. Password for the user authenticating against Cinder. If <None>, the current
context auth token is used. NOTE : This option is applied only if all of cinder_store_user_name , cinder_store_password , cinder_store_project_name and cinder_store_auth_address are set."
cinder_store_project_name,"Optional. Default: None Can only be specified in configuration files. This option is specific to the Cinder storage backend. Project name where the image is stored in Cinder. If <None>, the project
in current context is used. NOTE : This option is applied only if all of cinder_store_user_name , cinder_store_password , cinder_store_project_name and cinder_store_auth_address are set."
cinder_store_project_domain_name,"Optional. Default: Default Can only be specified in configuration files. This option is specific to the Cinder storage backend. Domain of the project where the image volume is stored in cinder. NOTE : This option is applied only if all of cinder_store_user_name , cinder_store_password , cinder_store_project_name and cinder_store_auth_address are set."
cinder_store_auth_address,"Optional. Default: None Can only be specified in configuration files. This option is specific to the Cinder storage backend. The address where the Cinder authentication service is listening. If <None>,
the cinder endpoint in the service catalog is used. NOTE : This option is applied only if all of cinder_store_user_name , cinder_store_password , cinder_store_project_name and cinder_store_auth_address are set."
rootwrap_config,Optional. Default: /etc/glance/rootwrap.conf Can only be specified in configuration files. This option is specific to the Cinder storage backend. Path to the rootwrap configuration file to use for running commands as root.
lock_path,"Required.  Defaults to environment variable OSLO_LOCK_PATH, though we
recommend setting a value in the configuration file. This specifies the directory to use for lock files. NOTE: This option must be set in the [oslo_concurrency] section of the
configuration file."
vmware_server_host,"Required when using the VMware storage backend. Can only be specified in configuration files. Sets the address of the ESX/ESXi or vCenter Server target system.
The address can contain an IP ( 127.0.0.1 ), an IP and port
( 127.0.0.1:443 ), a DNS name ( www.my-domain.com ) or DNS and port. This option is specific to the VMware storage backend."
vmware_server_username,Required when using the VMware storage backend. Can only be specified in configuration files. Username for authenticating with VMware ESX/ESXi or vCenter Server.
vmware_server_password,Required when using the VMware storage backend. Can only be specified in configuration files. Password for authenticating with VMware ESX/ESXi or vCenter Server.
vmware_datastores,"Required when using the VMware storage backend. This option can only be specified in configuration file and is specific
to the VMware storage backend. vmware_datastores allows administrators to configure multiple datastores to
save glance image in the VMware store backend. The required format for the
option is: <datacenter_path>:<datastore_name>:<optional_weight>. where datacenter_path is the inventory path to the datacenter where the
datastore is located. An optional weight can be given to specify the
priority. Example: NOTE : This option can be specified multiple times to specify multiple datastores. Either vmware_datastore_name or vmware_datastores option must be specified
in glance-api.conf Datastore with weight 200 has precedence over datastore with weight 100. If no weight is specified, default weight ‘0’ is associated with it. If two datastores have same weight, the datastore with maximum free space
will be chosen to store the image. If the datacenter path or datastore name contains a colon (:) symbol, it
must be escaped with a backslash."
vmware_api_retry_count,"Optional. Default: 10 Can only be specified in configuration files. The number of times VMware ESX/VC server API must be
retried upon connection related issues."
vmware_task_poll_interval,Optional. Default: 5 Can only be specified in configuration files. The interval used for polling remote tasks invoked on VMware ESX/VC server.
vmware_store_image_dir,"Optional. Default: /openstack_glance Can only be specified in configuration files. The path to access the folder where the images will be stored
in the datastore."
vmware_api_insecure,Optional. Default: False Can only be specified in configuration files. Allow to perform insecure SSL requests to ESX/VC server.
vmware_server_host,"Required when using the VMware storage backend. Can only be specified in configuration files. Sets the address of the ESX/ESXi or vCenter Server target system.
The address can contain an IP ( 127.0.0.1 ), an IP and port
( 127.0.0.1:443 ), a DNS name ( www.my-domain.com ) or DNS and port. This option is specific to the VMware storage backend."
vmware_server_username,Required when using the VMware storage backend. Can only be specified in configuration files. Username for authenticating with VMware ESX/ESXi or vCenter Server.
vmware_server_password,Required when using the VMware storage backend. Can only be specified in configuration files. Password for authenticating with VMware ESX/ESXi or vCenter Server.
vmware_datastores,"Required when using the VMware storage backend. This option can only be specified in configuration file and is specific
to the VMware storage backend. vmware_datastores allows administrators to configure multiple datastores to
save glance image in the VMware store backend. The required format for the
option is: <datacenter_path>:<datastore_name>:<optional_weight>. where datacenter_path is the inventory path to the datacenter where the
datastore is located. An optional weight can be given to specify the
priority. Example: NOTE : This option can be specified multiple times to specify multiple datastores. Either vmware_datastore_name or vmware_datastores option must be specified
in glance-api.conf Datastore with weight 200 has precedence over datastore with weight 100. If no weight is specified, default weight ‘0’ is associated with it. If two datastores have same weight, the datastore with maximum free space
will be chosen to store the image. If the datacenter path or datastore name contains a colon (:) symbol, it
must be escaped with a backslash."
vmware_api_retry_count,"Optional. Default: 10 Can only be specified in configuration files. The number of times VMware ESX/VC server API must be
retried upon connection related issues."
vmware_task_poll_interval,Optional. Default: 5 Can only be specified in configuration files. The interval used for polling remote tasks invoked on VMware ESX/VC server.
vmware_store_image_dir,"Optional. Default: /openstack_glance Can only be specified in configuration files. The path to access the folder where the images will be stored
in the datastore."
vmware_api_insecure,Optional. Default: False Can only be specified in configuration files. Allow to perform insecure SSL requests to ESX/VC server.
s3_store_host,"Can only be specified in configuration files. The host where the S3 server is listening. This option can contain a DNS name
(e.g. s3.amazonaws.com, my-object-storage.com) or an IP address (127.0.0.1). Example:"
s3_store_access_key,"Can only be specified in configuration files. Access Key for authenticating with the Amazon S3 or S3 compatible storage
server."
s3_store_secret_key,"Can only be specified in configuration files. Secret Key for authenticating with the Amazon S3 or S3 compatible storage
server."
s3_store_bucket,"Can only be specified in configuration files. Bucket name where the glance images will be stored in the S3.
If s3_store_create_bucket_on_put is set to true, it will be created
automatically even if the bucket does not exist."
s3_store_create_bucket_on_put,"Optional. Default: False Can only be specified in configuration files. Determine whether S3 should create a new bucket. This option takes boolean
value to indicate whether or not Glance should create new bucket to S3 if it
does not exist."
s3_store_bucket_url_format,"Optional. Default: auto Can only be specified in configuration files. This option takes access model that is used to specify the address of an
object in an S3 bucket. You can set the value from auto , virtual or path . NOTE : In path -style, the endpoint for the object looks like https://s3.amazonaws.com/bucket/example.img . In virtual -style, the endpoint for the object looks like https://bucket.s3.amazonaws.com/example.img . If you do not follow the DNS naming convention in the bucket name, you can
get objects in the path style, but not in the virtual style."
s3_store_large_object_size,"Optional. Default: 100 Can only be specified in configuration files. What size, in MB, should S3 start chunking image files and do a multipart
upload in S3."
s3_store_large_object_chunk_size,"Optional. Default: 10 Can only be specified in configuration files. What multipart upload part size, in MB, should S3 use when uploading parts."
s3_store_thread_pools,Optional. Default: 10 Can only be specified in configuration files. The number of thread pools to perform a multipart upload in S3.
swift_store_endpoint,"Optional. Default: None Can only be specified in configuration files. Overrides the storage URL returned by auth. The URL should include the
path up to and excluding the container. The location of an object is
obtained by appending the container and object to the configured URL.
e.g. https://www.my-domain.com/v1/path_up_to_container"
image_size_cap,"Optional. Default: 1099511627776 (1 TB) Maximum image size, in bytes, which can be uploaded through
the Glance API server. IMPORTANT NOTE : this value should only be increased after careful
consideration and must be set to a value under 8 EB (9223372036854775808)."
user_storage_quota,"Optional. Default: 0 (Unlimited). This value specifies the maximum amount of storage that each user can use
across all storage systems. Optionally unit can be specified for the value.
Values are accepted in B, KB, MB, GB or TB which are for Bytes, KiloBytes,
MegaBytes, GigaBytes and TeraBytes respectively. Default unit is Bytes. user_storage_quota=20GB"
image_cache_dir,"Required when image cache middleware is enabled. Default: /var/lib/glance/image-cache This is the base directory the image cache can write files to.
Make sure the directory is writable by the user running the glance-api server"
image_cache_driver,"Optional. Choice of sqlite , xattr or centralized_db Default: centralized_db The default centralized_db cache driver has no special
dependencies, other than worker_self_reference_url which needs
to be configured to store the reference of node in the database.
Earlier cache database used to be independent for each glance api
service, now with centralized_db cache driver it stores
information about the cached files at one place which is in
a central database. Old records from SQLite database will
be migrated to
central database on service restart during upgrade process. The sqlite cache driver has no special dependencies, other
than the python-sqlite3 library, which is installed on virtually
all operating systems with modern versions of Python. It stores
information about the cached files in a SQLite database. NOTE In Caracal release sqlite cache driver has been deprecated and will
be removed in F development cycle. The xattr cache driver required the python-xattr>=0.6.0 library
and requires that the filesystem containing image_cache_dir have
access times tracked for all files (in other words, the noatime option
CANNOT be set for that filesystem). In addition, user_xattr must be
set on the filesystem’s description line in fstab."
image_cache_sqlite_db,"Optional. Default: cache.db When using the sqlite cache driver, you can set the name of the database
that will be used to store the cached images information. The database
is always contained in the image_cache_dir . NOTE In Caracal release image_cache_sqlite_db option has been deprecated
and will be removed in F development cycle."
image_cache_max_size,"Optional. Default: 10737418240 (10 GB) Size, in bytes, that the image cache should be constrained to. Images files
are cached automatically in the local image cache, even if the writing of
that image file would put the total cache size over this size. The glance-cache-pruner executable is what prunes the image cache to be equal
to or less than this value. The glance-cache-pruner executable is
designed to be run via cron on a regular basis. See more about this
executable in Controlling the Growth of the Image Cache"
image_cache_dir,"Required when image cache middleware is enabled. Default: /var/lib/glance/image-cache This is the base directory the image cache can write files to.
Make sure the directory is writable by the user running the glance-api server"
image_cache_driver,"Optional. Choice of sqlite , xattr or centralized_db Default: centralized_db The default centralized_db cache driver has no special
dependencies, other than worker_self_reference_url which needs
to be configured to store the reference of node in the database.
Earlier cache database used to be independent for each glance api
service, now with centralized_db cache driver it stores
information about the cached files at one place which is in
a central database. Old records from SQLite database will
be migrated to
central database on service restart during upgrade process. The sqlite cache driver has no special dependencies, other
than the python-sqlite3 library, which is installed on virtually
all operating systems with modern versions of Python. It stores
information about the cached files in a SQLite database. NOTE In Caracal release sqlite cache driver has been deprecated and will
be removed in F development cycle. The xattr cache driver required the python-xattr>=0.6.0 library
and requires that the filesystem containing image_cache_dir have
access times tracked for all files (in other words, the noatime option
CANNOT be set for that filesystem). In addition, user_xattr must be
set on the filesystem’s description line in fstab."
image_cache_sqlite_db,"Optional. Default: cache.db When using the sqlite cache driver, you can set the name of the database
that will be used to store the cached images information. The database
is always contained in the image_cache_dir . NOTE In Caracal release image_cache_sqlite_db option has been deprecated
and will be removed in F development cycle."
image_cache_max_size,"Optional. Default: 10737418240 (10 GB) Size, in bytes, that the image cache should be constrained to. Images files
are cached automatically in the local image cache, even if the writing of
that image file would put the total cache size over this size. The glance-cache-pruner executable is what prunes the image cache to be equal
to or less than this value. The glance-cache-pruner executable is
designed to be run via cron on a regular basis. See more about this
executable in Controlling the Growth of the Image Cache"
[oslo_messaging_notifications]/driver,"Optional. Default: noop Sets the notification driver used by oslo.messaging. Options include messaging , messagingv2 , log and routing . NOTE In M release, the``[DEFAULT]/notification_driver`` option has been
deprecated in favor of [oslo_messaging_notifications]/driver . For more information see Glance notifications and oslo.messaging ."
[DEFAULT]/disabled_notifications,"Optional. Default: [] List of disabled notifications. A notification can be given either as a
notification type to disable a single event, or as a notification group
prefix to disable all events within a group. Example: if this config option is set to
[“image.create”, “metadef_namespace”], then “image.create” notification will
not be sent after image is created and none of the notifications
for metadefinition namespaces will be sent."
property_protection_file,"Optional. Default: not enabled. If property_protection_file is set, the file may use either roles or policies
to specify property protections."
property_protection_rule_format,Optional. Default: roles .
task_time_to_live,"Optional. Default: 48 The config value task_executor is used to determine which executor
should be used by the Glance service to process the task. The currently
available implementation is: taskflow ."
task_executor,"Optional. Default: taskflow The taskflow engine has its own set of configuration options,
under the taskflow_executor section, that can be tuned to improve
the task execution process. Among the available options, you may find engine_mode and max_workers . The former allows for selecting
an execution model and the available options are serial , parallel and worker-based . The max_workers option,
instead, allows for controlling the number of workers that will be
instantiated per executor instance. The default value for the engine_mode is parallel , whereas
the default number of max_workers is 10 ."
enabled,"Optional. Default: False There is one more configuration option that needs to be defined to enable
Glance services profiling. The config value hmac_keys is used for
encrypting context data for performance profiling."
hmac_keys,"Optional. Default: SECRET_KEY IMPORTANT NOTE : in order to make profiling work as designed operator
needs to make those values of HMAC key be consistent for all services
in their deployment. Without HMAC key the profiling will not be triggered
even profiling feature is enabled. The config value trace_sqlalchemy is used to determine whether fully
enable sqlalchemy engine based SQL execution profiling feature for glance-api
service."
trace_sqlalchemy,Optional. Default: False
public_endpoint,Optional. Default: None
http_keepalive,"If False, server will return the header “Connection: close”, If True, server
will return “Connection: Keep-Alive” in its responses. In order to close the
client socket connection explicitly after the response is sent and read
successfully by the client, you simply have to set this option to False when
you create a wsgi server."
disk_formats,"Optional. Default: ami,ari,aki,vhd,vhdx,vmdk,raw,qcow2,vdi,iso,ploop"
