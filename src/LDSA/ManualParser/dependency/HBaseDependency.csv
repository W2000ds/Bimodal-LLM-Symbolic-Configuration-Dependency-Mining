ID,Option A,Option B,Option A Description,Option B Description
1,hbase.rootdir,hbase.tmp.dir,"The directory shared by region servers and into which HBase persists.  The URL should be 'fully-qualified' to include the filesystem scheme.  For example, to specify the HDFS directory '/hbase' where the HDFS instance's namenode is running at namenode.example.org on port 9000, set this value to: hdfs://namenode.example.org:9000/hbase.  By default, we write to whatever ${hbase.tmp.dir} is set too -- usually /tmp -- so change this configuration or else all data will be lost on machine restart.","Temporary directory on the local filesystem. Change this setting to point to a location more permanent than '/tmp', the usual resolve for java.io.tmpdir, as the '/tmp' directory is cleared on machine restart."
2,hbase.zookeeper.quorum,hbase.zookeeper.property.clientPort,"Comma separated list of servers in the ZooKeeper ensemble (This config. should have been named hbase.zookeeper.ensemble). For example, ""host1.mydomain.com,host2.mydomain.com,host3.mydomain.com"". By default this is set to localhost for local and pseudo-distributed modes of operation. For a fully-distributed setup, this should be set to a full list of ZooKeeper ensemble servers. If HBASE_MANAGES_ZK is set in hbase-env.sh this is the list of servers which hbase will start/stop ZooKeeper on as part of cluster start/stop.  Client-side, we will take this list of ensemble members and put it together with the hbase.zookeeper.property.clientPort config. and pass it into zookeeper constructor as the connectString parameter.",Property from ZooKeeper's config zoo.cfg. The port at which the clients will connect.
3,hbase.master.logcleaner.ttl,hbase.rootdir,"How long a WAL remain in the archive ({hbase.rootdir}/oldWALs) directory, after which it will be cleaned by a Master thread. The value is in milliseconds.","The directory shared by region servers and into which HBase persists.  The URL should be 'fully-qualified' to include the filesystem scheme.  For example, to specify the HDFS directory '/hbase' where the HDFS instance's namenode is running at namenode.example.org on port 9000, set this value to: hdfs://namenode.example.org:9000/hbase.  By default, we write to whatever ${hbase.tmp.dir} is set too -- usually /tmp -- so change this configuration or else all data will be lost on machine restart."
4,hbase.master.infoserver.redirect,hbase.master.info.port,Whether or not the Master listens to the Master web   UI port (hbase.master.info.port) and redirects requests to the web   UI server shared by the Master and RegionServer. Config. makes   sense when Master is serving Regions (not the default).,The port for the HBase Master web UI. Set to -1 if you do not want a UI instance run.
5,hbase.regionserver.info.port.auto,hbase.regionserver.info.port,"Whether or not the Master or RegionServer UI should search for a port to bind to. Enables automatic port search if hbase.regionserver.info.port is already in use. Useful for testing, turned off by default.",The port for the HBase RegionServer web UI Set to -1 if you do not want the RegionServer UI to run.
6,hbase.regionserver.global.memstore.size,hbase.regionserver.global.memstore.size.lower.limit,Maximum size of all memstores in a region server before new   updates are blocked and flushes are forced. Defaults to 40% of heap (0.4).   Updates are blocked and flushes are forced until size of all memstores   in a region server hits hbase.regionserver.global.memstore.size.lower.limit.   The default value in this configuration has been intentionally left empty in order to   honor the old hbase.regionserver.global.memstore.upperLimit property if present. ,Maximum size of all memstores in a region server before flushes   are forced. Defaults to 95% of hbase.regionserver.global.memstore.size   (0.95). A 100% value for this value causes the minimum possible flushing   to occur when updates are blocked due to memstore limiting. The default   value in this configuration has been intentionally left empty in order to   honor the old hbase.regionserver.global.memstore.lowerLimit property if   present. 
7,hbase.regionserver.global.memstore.size.lower.limit,hbase.regionserver.global.memstore.size,Maximum size of all memstores in a region server before flushes   are forced. Defaults to 95% of hbase.regionserver.global.memstore.size   (0.95). A 100% value for this value causes the minimum possible flushing   to occur when updates are blocked due to memstore limiting. The default   value in this configuration has been intentionally left empty in order to   honor the old hbase.regionserver.global.memstore.lowerLimit property if   present. ,Maximum size of all memstores in a region server before new   updates are blocked and flushes are forced. Defaults to 40% of heap (0.4).   Updates are blocked and flushes are forced until size of all memstores   in a region server hits hbase.regionserver.global.memstore.size.lower.limit.   The default value in this configuration has been intentionally left empty in order to   honor the old hbase.regionserver.global.memstore.upperLimit property if present. 
8,hbase.client.write.buffer,hbase.regionserver.handler.count,"Default size of the BufferedMutator write buffer in bytes. A bigger buffer takes more memory -- on both the client and server side since server instantiates the passed write buffer to process it -- but a larger buffer size reduces the number of RPCs made. For an estimate of server-side memory-used, evaluate hbase.client.write.buffer * hbase.regionserver.handler.count","Count of RPC Listener instances spun up on RegionServers.   Same property is used by the Master for count of master handlers.   Too many handlers can be counter-productive. Make it a multiple of   CPU count. If mostly read-only, handlers count close to cpu count   does well. Start with twice the CPU count and tune from there."
9,hbase.client.pause,hbase.client.retries.number,"General client pause value.  Used mostly as value to wait before running a retry of a failed get, region lookup, etc. See hbase.client.retries.number for description of how we backoff from this initial pause amount and how this pause works w/ retries.","Maximum retries.  Used as maximum for all retryable operations such as the getting of a cell's value, starting a row update, etc.  Retry interval is a rough function based on hbase.client.pause.  At first we retry at this interval but then with backoff, we pretty quickly reach retrying every ten seconds.  See HConstants#RETRY_BACKOFF for how the backup ramps up.  Change this setting and hbase.client.pause to suit your workload."
10,hbase.client.pause.server.overloaded,hbase.client.pause,"Pause time when encountering an exception indicating a server is overloaded, CallQueueTooBigException or CallDroppedException. Set this property to a higher value than hbase.client.pause if you observe frequent CallQueueTooBigException or CallDroppedException from the same RegionServer and the call queue there keeps filling up. This config used to be called hbase.client.pause.cqtbe, which has been deprecated as of 2.5.0.","General client pause value.  Used mostly as value to wait before running a retry of a failed get, region lookup, etc. See hbase.client.retries.number for description of how we backoff from this initial pause amount and how this pause works w/ retries."
11,hbase.client.retries.number,hbase.client.pause,"Maximum retries.  Used as maximum for all retryable operations such as the getting of a cell's value, starting a row update, etc.  Retry interval is a rough function based on hbase.client.pause.  At first we retry at this interval but then with backoff, we pretty quickly reach retrying every ten seconds.  See HConstants#RETRY_BACKOFF for how the backup ramps up.  Change this setting and hbase.client.pause to suit your workload.","General client pause value.  Used mostly as value to wait before running a retry of a failed get, region lookup, etc. See hbase.client.retries.number for description of how we backoff from this initial pause amount and how this pause works w/ retries."
12,hbase.client.scanner.caching,hbase.client.scanner.timeout.period,"Number of rows that we try to fetch when calling next on a scanner if it is not served from (local, client) memory. This configuration works together with hbase.client.scanner.max.result.size to try and use the network efficiently. The default value is Integer.MAX_VALUE by default so that the network will fill the chunk size defined by hbase.client.scanner.max.result.size rather than be limited by a particular number of rows since the size of rows varies table to table. If you know ahead of time that you will not require more than a certain number of rows from a scan, this configuration should be set to that row limit via Scan#setCaching. Higher caching values will enable faster scanners but will eat up more memory and some calls of next may take longer and longer times when the cache is empty. Do not set this value such that the time between invocations is greater than the scanner timeout; i.e. hbase.client.scanner.timeout.period",Client scanner lease period in milliseconds.
13,hbase.client.scanner.caching,hbase.client.scanner.max.result.size,"Number of rows that we try to fetch when calling next on a scanner if it is not served from (local, client) memory. This configuration works together with hbase.client.scanner.max.result.size to try and use the network efficiently. The default value is Integer.MAX_VALUE by default so that the network will fill the chunk size defined by hbase.client.scanner.max.result.size rather than be limited by a particular number of rows since the size of rows varies table to table. If you know ahead of time that you will not require more than a certain number of rows from a scan, this configuration should be set to that row limit via Scan#setCaching. Higher caching values will enable faster scanners but will eat up more memory and some calls of next may take longer and longer times when the cache is empty. Do not set this value such that the time between invocations is greater than the scanner timeout; i.e. hbase.client.scanner.timeout.period","Maximum number of bytes returned when calling a scanner's next method. Note that when a single row is larger than this limit the row is still returned completely. The default value is 2MB, which is good for 1ge networks. With faster and/or high latency networks this value should be increased. "
14,hbase.server.thread.wakefrequency,hbase.regionserver.flush.check.period,"In master side, this config is the period used for FS related behaviors:   checking if hdfs is out of safe mode, setting or checking hbase.version file,   setting or checking hbase.id file. Using default value should be fine.   In regionserver side, this config is used in several places: flushing check interval,   compaction check interval, wal rolling check interval. Specially, admin can tune   flushing and compaction check interval by hbase.regionserver.flush.check.period   and hbase.regionserver.compaction.check.period. (in milliseconds)","It determines the flushing check period of PeriodicFlusher in regionserver.   If unset, it uses hbase.server.thread.wakefrequency as default value.   (in milliseconds)"
15,hbase.server.thread.wakefrequency,hbase.regionserver.compaction.check.period,"In master side, this config is the period used for FS related behaviors:   checking if hdfs is out of safe mode, setting or checking hbase.version file,   setting or checking hbase.id file. Using default value should be fine.   In regionserver side, this config is used in several places: flushing check interval,   compaction check interval, wal rolling check interval. Specially, admin can tune   flushing and compaction check interval by hbase.regionserver.flush.check.period   and hbase.regionserver.compaction.check.period. (in milliseconds)","It determines the compaction check period of CompactionChecker in regionserver.   If unset, it uses hbase.server.thread.wakefrequency as default value.   (in milliseconds)"
16,hbase.regionserver.flush.check.period,hbase.server.thread.wakefrequency,"It determines the flushing check period of PeriodicFlusher in regionserver.   If unset, it uses hbase.server.thread.wakefrequency as default value.   (in milliseconds)","In master side, this config is the period used for FS related behaviors:   checking if hdfs is out of safe mode, setting or checking hbase.version file,   setting or checking hbase.id file. Using default value should be fine.   In regionserver side, this config is used in several places: flushing check interval,   compaction check interval, wal rolling check interval. Specially, admin can tune   flushing and compaction check interval by hbase.regionserver.flush.check.period   and hbase.regionserver.compaction.check.period. (in milliseconds)"
17,hbase.regionserver.compaction.check.period,hbase.server.thread.wakefrequency,"It determines the compaction check period of CompactionChecker in regionserver.   If unset, it uses hbase.server.thread.wakefrequency as default value.   (in milliseconds)","In master side, this config is the period used for FS related behaviors:   checking if hdfs is out of safe mode, setting or checking hbase.version file,   setting or checking hbase.id file. Using default value should be fine.   In regionserver side, this config is used in several places: flushing check interval,   compaction check interval, wal rolling check interval. Specially, admin can tune   flushing and compaction check interval by hbase.regionserver.flush.check.period   and hbase.regionserver.compaction.check.period. (in milliseconds)"
18,hbase.server.versionfile.writeattempts,hbase.server.thread.wakefrequency, How many times to retry attempting to write a version file before just aborting. Each attempt is separated by the hbase.server.thread.wakefrequency milliseconds.,"In master side, this config is the period used for FS related behaviors:   checking if hdfs is out of safe mode, setting or checking hbase.version file,   setting or checking hbase.id file. Using default value should be fine.   In regionserver side, this config is used in several places: flushing check interval,   compaction check interval, wal rolling check interval. Specially, admin can tune   flushing and compaction check interval by hbase.regionserver.flush.check.period   and hbase.regionserver.compaction.check.period. (in milliseconds)"
19,hbase.hregion.memstore.flush.size,hbase.server.thread.wakefrequency, Memstore will be flushed to disk if size of the memstore exceeds this number of bytes.  Value is checked by a thread that runs every hbase.server.thread.wakefrequency.,"In master side, this config is the period used for FS related behaviors:   checking if hdfs is out of safe mode, setting or checking hbase.version file,   setting or checking hbase.id file. Using default value should be fine.   In regionserver side, this config is used in several places: flushing check interval,   compaction check interval, wal rolling check interval. Specially, admin can tune   flushing and compaction check interval by hbase.regionserver.flush.check.period   and hbase.regionserver.compaction.check.period. (in milliseconds)"
20,hbase.hregion.percolumnfamilyflush.size.lower.bound.min,hbase.hregion.memstore.flush.size," If FlushLargeStoresPolicy is used and there are multiple column families, then every time that we hit the total memstore limit, we find out all the column families whose memstores exceed a ""lower bound"" and only flush them while retaining the others in memory. The ""lower bound"" will be ""hbase.hregion.memstore.flush.size / column_family_number"" by default unless value of this property is larger than that. If none of the families have their memstore size more than lower bound, all the memstores will be flushed (just as usual). ", Memstore will be flushed to disk if size of the memstore exceeds this number of bytes.  Value is checked by a thread that runs every hbase.server.thread.wakefrequency.
21,hbase.hregion.memstore.block.multiplier,hbase.hregion.memstore.flush.size," Block updates if memstore has hbase.hregion.memstore.block.multiplier times hbase.hregion.memstore.flush.size bytes.  Useful preventing runaway memstore during spikes in update traffic.  Without an upper-bound, memstore fills such that when it flushes the resultant flush files take a long time to compact or split, or worse, we OOME.", Memstore will be flushed to disk if size of the memstore exceeds this number of bytes.  Value is checked by a thread that runs every hbase.server.thread.wakefrequency.
22,hbase.hregion.max.filesize,hbase.hregion.split.overallfiles,"Maximum file size. If the sum of the sizes of a region's HFiles has   grown to exceed this value, the region is split in two. There are two choices of   how this option works, the first is when any store's size exceed the threshold   then split, and the other is overall region's size exceed the threshold then split,   it can be configed by hbase.hregion.split.overallfiles.",If we should sum overall region files size when check to split.
23,hbase.hregion.majorcompaction,hbase.hregion.majorcompaction.jitter,"Time between major compactions, expressed in milliseconds. Set to 0 to disable   time-based automatic major compactions. User-requested and size-based major compactions will   still run. This value is multiplied by hbase.hregion.majorcompaction.jitter to cause   compaction to start at a somewhat-random time during a given window of time. The default value   is 7 days, expressed in milliseconds. If major compactions are causing disruption in your   environment, you can configure them to run at off-peak times for your deployment, or disable   time-based major compactions by setting this parameter to 0, and run major compactions in a   cron job or by another external mechanism.","A multiplier applied to hbase.hregion.majorcompaction to cause compaction to occur   a given amount of time either side of hbase.hregion.majorcompaction. The smaller the number,   the closer the compactions will happen to the hbase.hregion.majorcompaction   interval."
24,hbase.hregion.majorcompaction.jitter,hbase.hregion.majorcompaction,"A multiplier applied to hbase.hregion.majorcompaction to cause compaction to occur   a given amount of time either side of hbase.hregion.majorcompaction. The smaller the number,   the closer the compactions will happen to the hbase.hregion.majorcompaction   interval.","Time between major compactions, expressed in milliseconds. Set to 0 to disable   time-based automatic major compactions. User-requested and size-based major compactions will   still run. This value is multiplied by hbase.hregion.majorcompaction.jitter to cause   compaction to start at a somewhat-random time during a given window of time. The default value   is 7 days, expressed in milliseconds. If major compactions are causing disruption in your   environment, you can configure them to run at off-peak times for your deployment, or disable   time-based major compactions by setting this parameter to 0, and run major compactions in a   cron job or by another external mechanism."
25,hbase.hstore.blockingStoreFiles,hbase.hstore.blockingWaitTime," If more than this number of StoreFiles exist in any one Store (one StoreFile  is written per flush of MemStore), updates are blocked for this region until a compaction is   completed, or until hbase.hstore.blockingWaitTime has been exceeded."," The time for which a region will block updates after reaching the StoreFile limit defined by hbase.hstore.blockingStoreFiles. After this time has elapsed, the region will stop blocking updates even if a compaction has not been completed."
26,hbase.hstore.blockingWaitTime,hbase.hstore.blockingStoreFiles," The time for which a region will block updates after reaching the StoreFile limit defined by hbase.hstore.blockingStoreFiles. After this time has elapsed, the region will stop blocking updates even if a compaction has not been completed."," If more than this number of StoreFiles exist in any one Store (one StoreFile  is written per flush of MemStore), updates are blocked for this region until a compaction is   completed, or until hbase.hstore.blockingWaitTime has been exceeded."
27,hbase.hstore.compaction.min,hbase.hstore.compactionThreshold,"The minimum number of StoreFiles which must be eligible for compaction before   compaction can run. The goal of tuning hbase.hstore.compaction.min is to avoid ending up with   too many tiny StoreFiles to compact. Setting this value to 2 would cause a minor compaction   each time you have two StoreFiles in a Store, and this is probably not appropriate. If you   set this value too high, all the other values will need to be adjusted accordingly. For most   cases, the default value is appropriate  (empty value here, results in 3 by code logic). In   previous versions of HBase, the parameter hbase.hstore.compaction.min was named   hbase.hstore.compactionThreshold."," If more than or equal to this number of StoreFiles exist in any one Store   (one StoreFile is written per flush of MemStore), a compaction is run to rewrite all   StoreFiles into a single StoreFile. Larger values delay compaction, but when compaction does   occur, it takes longer to complete."
28,hbase.hstore.compaction.min.size,hbase.hstore.compaction.ratio,"A StoreFile (or a selection of StoreFiles, when using ExploringCompactionPolicy)   smaller than this size will always be eligible for minor compaction.   HFiles this size or larger are evaluated by hbase.hstore.compaction.ratio to determine if   they are eligible. Because this limit represents the ""automatic include"" limit for all   StoreFiles smaller than this value, this value may need to be reduced in write-heavy   environments where many StoreFiles in the 1-2 MB range are being flushed, because every   StoreFile will be targeted for compaction and the resulting StoreFiles may still be under the   minimum size and require further compaction. If this parameter is lowered, the ratio check is   triggered more quickly. This addressed some issues seen in earlier versions of HBase but   changing this parameter is no longer necessary in most situations. Default: 128 MB expressed   in bytes.","For minor compaction, this ratio is used to determine whether a given StoreFile   which is larger than hbase.hstore.compaction.min.size is eligible for compaction. Its   effect is to limit compaction of large StoreFiles. The value of hbase.hstore.compaction.ratio   is expressed as a floating-point decimal. A large ratio, such as 10, will produce a single   giant StoreFile. Conversely, a low value, such as .25, will produce behavior similar to the   BigTable compaction algorithm, producing four StoreFiles. A moderate value of between 1.0 and   1.4 is recommended. When tuning this value, you are balancing write costs with read costs.   Raising the value (to something like 1.4) will have more write costs, because you will   compact larger StoreFiles. However, during reads, HBase will need to seek through fewer   StoreFiles to accomplish the read. Consider this approach if you cannot take advantage of   Bloom filters. Otherwise, you can lower this value to something like 1.0 to reduce the   background cost of writes, and use Bloom filters to control the number of StoreFiles touched   during reads. For most cases, the default value is appropriate."
29,hbase.hstore.compaction.max.size,hbase.hstore.compaction.max,"A StoreFile (or a selection of StoreFiles, when using ExploringCompactionPolicy)   larger than this size will be excluded from compaction. The effect of   raising hbase.hstore.compaction.max.size is fewer, larger StoreFiles that do not get   compacted often. If you feel that compaction is happening too often without much benefit, you   can try raising this value. Default: the value of LONG.MAX_VALUE, expressed in bytes.","The maximum number of StoreFiles which will be selected for a single minor   compaction, regardless of the number of eligible StoreFiles. Effectively, the value of   hbase.hstore.compaction.max controls the length of time it takes a single compaction to   complete. Setting it larger means that more StoreFiles are included in a compaction. For most   cases, the default value is appropriate."
30,hbase.hstore.compaction.ratio,hbase.hstore.compaction.min,"For minor compaction, this ratio is used to determine whether a given StoreFile   which is larger than hbase.hstore.compaction.min.size is eligible for compaction. Its   effect is to limit compaction of large StoreFiles. The value of hbase.hstore.compaction.ratio   is expressed as a floating-point decimal. A large ratio, such as 10, will produce a single   giant StoreFile. Conversely, a low value, such as .25, will produce behavior similar to the   BigTable compaction algorithm, producing four StoreFiles. A moderate value of between 1.0 and   1.4 is recommended. When tuning this value, you are balancing write costs with read costs.   Raising the value (to something like 1.4) will have more write costs, because you will   compact larger StoreFiles. However, during reads, HBase will need to seek through fewer   StoreFiles to accomplish the read. Consider this approach if you cannot take advantage of   Bloom filters. Otherwise, you can lower this value to something like 1.0 to reduce the   background cost of writes, and use Bloom filters to control the number of StoreFiles touched   during reads. For most cases, the default value is appropriate.","The minimum number of StoreFiles which must be eligible for compaction before   compaction can run. The goal of tuning hbase.hstore.compaction.min is to avoid ending up with   too many tiny StoreFiles to compact. Setting this value to 2 would cause a minor compaction   each time you have two StoreFiles in a Store, and this is probably not appropriate. If you   set this value too high, all the other values will need to be adjusted accordingly. For most   cases, the default value is appropriate  (empty value here, results in 3 by code logic). In   previous versions of HBase, the parameter hbase.hstore.compaction.min was named   hbase.hstore.compactionThreshold."
31,hbase.hstore.compaction.ratio,hbase.hstore.compaction.min.size,"For minor compaction, this ratio is used to determine whether a given StoreFile   which is larger than hbase.hstore.compaction.min.size is eligible for compaction. Its   effect is to limit compaction of large StoreFiles. The value of hbase.hstore.compaction.ratio   is expressed as a floating-point decimal. A large ratio, such as 10, will produce a single   giant StoreFile. Conversely, a low value, such as .25, will produce behavior similar to the   BigTable compaction algorithm, producing four StoreFiles. A moderate value of between 1.0 and   1.4 is recommended. When tuning this value, you are balancing write costs with read costs.   Raising the value (to something like 1.4) will have more write costs, because you will   compact larger StoreFiles. However, during reads, HBase will need to seek through fewer   StoreFiles to accomplish the read. Consider this approach if you cannot take advantage of   Bloom filters. Otherwise, you can lower this value to something like 1.0 to reduce the   background cost of writes, and use Bloom filters to control the number of StoreFiles touched   during reads. For most cases, the default value is appropriate.","A StoreFile (or a selection of StoreFiles, when using ExploringCompactionPolicy)   smaller than this size will always be eligible for minor compaction.   HFiles this size or larger are evaluated by hbase.hstore.compaction.ratio to determine if   they are eligible. Because this limit represents the ""automatic include"" limit for all   StoreFiles smaller than this value, this value may need to be reduced in write-heavy   environments where many StoreFiles in the 1-2 MB range are being flushed, because every   StoreFile will be targeted for compaction and the resulting StoreFiles may still be under the   minimum size and require further compaction. If this parameter is lowered, the ratio check is   triggered more quickly. This addressed some issues seen in earlier versions of HBase but   changing this parameter is no longer necessary in most situations. Default: 128 MB expressed   in bytes."
32,hbase.hstore.compaction.ratio.offpeak,hbase.hstore.compaction.ratio,"Allows you to set a different (by default, more aggressive) ratio for determining   whether larger StoreFiles are included in compactions during off-peak hours. Works in the   same way as hbase.hstore.compaction.ratio. Only applies if hbase.offpeak.start.hour and   hbase.offpeak.end.hour are also enabled.","For minor compaction, this ratio is used to determine whether a given StoreFile   which is larger than hbase.hstore.compaction.min.size is eligible for compaction. Its   effect is to limit compaction of large StoreFiles. The value of hbase.hstore.compaction.ratio   is expressed as a floating-point decimal. A large ratio, such as 10, will produce a single   giant StoreFile. Conversely, a low value, such as .25, will produce behavior similar to the   BigTable compaction algorithm, producing four StoreFiles. A moderate value of between 1.0 and   1.4 is recommended. When tuning this value, you are balancing write costs with read costs.   Raising the value (to something like 1.4) will have more write costs, because you will   compact larger StoreFiles. However, during reads, HBase will need to seek through fewer   StoreFiles to accomplish the read. Consider this approach if you cannot take advantage of   Bloom filters. Otherwise, you can lower this value to something like 1.0 to reduce the   background cost of writes, and use Bloom filters to control the number of StoreFiles touched   during reads. For most cases, the default value is appropriate."
33,hbase.hstore.compaction.ratio.offpeak,hbase.offpeak.start.hour,"Allows you to set a different (by default, more aggressive) ratio for determining   whether larger StoreFiles are included in compactions during off-peak hours. Works in the   same way as hbase.hstore.compaction.ratio. Only applies if hbase.offpeak.start.hour and   hbase.offpeak.end.hour are also enabled.","The start of off-peak hours, expressed as an integer between 0 and 23, inclusive.   Set to -1 to disable off-peak."
34,hbase.hstore.compaction.ratio.offpeak,hbase.offpeak.end.hour,"Allows you to set a different (by default, more aggressive) ratio for determining   whether larger StoreFiles are included in compactions during off-peak hours. Works in the   same way as hbase.hstore.compaction.ratio. Only applies if hbase.offpeak.start.hour and   hbase.offpeak.end.hour are also enabled.","The end of off-peak hours, expressed as an integer between 0 and 23, inclusive. Set   to -1 to disable off-peak."
35,hbase.regionserver.thread.compaction.throttle,hbase.hregion.memstore.flush.size,"There are two different thread pools for compactions, one for large compactions and   the other for small compactions. This helps to keep compaction of lean tables (such as   hbase:meta) fast. If a compaction is larger than this threshold, it   goes into the large compaction pool. In most cases, the default value is appropriate. Default:   2 x hbase.hstore.compaction.max x hbase.hregion.memstore.flush.size (which defaults to 128MB).   The value field assumes that the value of hbase.hregion.memstore.flush.size is unchanged from   the default.", Memstore will be flushed to disk if size of the memstore exceeds this number of bytes.  Value is checked by a thread that runs every hbase.server.thread.wakefrequency.
36,hbase.regionserver.thread.compaction.throttle,hbase.hstore.compaction.max,"There are two different thread pools for compactions, one for large compactions and   the other for small compactions. This helps to keep compaction of lean tables (such as   hbase:meta) fast. If a compaction is larger than this threshold, it   goes into the large compaction pool. In most cases, the default value is appropriate. Default:   2 x hbase.hstore.compaction.max x hbase.hregion.memstore.flush.size (which defaults to 128MB).   The value field assumes that the value of hbase.hregion.memstore.flush.size is unchanged from   the default.","The maximum number of StoreFiles which will be selected for a single minor   compaction, regardless of the number of eligible StoreFiles. Effectively, the value of   hbase.hstore.compaction.max controls the length of time it takes a single compaction to   complete. Setting it larger means that more StoreFiles are included in a compaction. For most   cases, the default value is appropriate."
37,hfile.block.cache.memory.size,hfile.block.cache.size,"Defines the maximum heap memory allocated for the HFile block cache,   specified in bytes or human-readable formats like '10m' for megabytes or '10g' for gigabytes.   This configuration allows setting an absolute memory size instead of a percentage of the maximum heap.   Takes precedence over hfile.block.cache.size if both are specified.",Percentage of maximum heap (-Xmx setting) to allocate to block cache  used by a StoreFile. Default of 0.4 means allocate 40%.  Set to 0 to disable but it's not recommended; you need at least  enough cache to hold the storefile indices.
38,hfile.format.version,hbase.replication.rpc.codec,The HFile format version to use for new files.   Version 3 adds support for tags in hfiles (See http://hbase.apache.org/book.html#hbase.tags).   Also see the configuration 'hbase.replication.rpc.codec'.   ,  		The codec that is to be used when replication is enabled so that  		the tags are also replicated. This is used along with HFileV3 which  		supports tags in them.  If tags are not used or if the hfile version used  		is HFileV2 then KeyValueCodec can be used as the replication codec. Note that  		using KeyValueCodecWithTags for replication when there are no tags causes no harm.  	
39,hbase.rpc.shortoperation.timeout,hbase.rpc.timeout,"This is another version of ""hbase.rpc.timeout"". For those RPC operation  within cluster, we rely on this configuration to set a short timeout limitation  for short operation. For example, short rpc timeout for region server's trying  to report to active master can benefit quicker master failover process.",This is for the RPC layer to define how long (millisecond) HBase client applications  take for a remote call to time out. It uses pings to check connections  but will eventually throw a TimeoutException.
40,hbase.unsafe.regionserver.hostname.disable.master.reversedns,hbase.unsafe.regionserver.hostname,"This config is for experts: don't set its value unless you really know what you are doing. When set to true, regionserver will use the current node hostname for the servername and HMaster will skip reverse DNS lookup and use the hostname sent by regionserver instead. Note that this config and hbase.unsafe.regionserver.hostname are mutually exclusive. See https://issues.apache.org/jira/browse/HBASE-18226 for more details.","This config is for experts: don't set its value unless you really know what you are doing. When set to a non-empty value, this represents the (external facing) hostname for the underlying server. See https://issues.apache.org/jira/browse/HBASE-12954 for details."
41,hbase.regionserver.kerberos.principal,hbase.regionserver.keytab.file,"Ex. ""hbase/_HOST@EXAMPLE.COM"".  The kerberos principal name that should be used to run the HRegionServer process.  The principal name should be in the form: user/hostname@DOMAIN.  If ""_HOST"" is used as the hostname portion, it will be replaced with the actual hostname of the running instance.  An entry for this principal must exist in the file specified in hbase.regionserver.keytab.file",Full path to the kerberos keytab file to use for logging in the configured HRegionServer server principal.
42,hbase.coprocessor.user.enabled,hbase.coprocessor.enabled,"Enables or disables user (aka. table) coprocessor loading. If 'false' (disabled), any table coprocessor attributes in table descriptors will be ignored. If ""hbase.coprocessor.enabled"" is 'false' this setting has no effect. ","Enables or disables coprocessor loading. If 'false' (disabled), any other coprocessor related configuration will be ignored. "
43,hbase.defaults.for.version.skip,hbase.defaults.for.version,"Set to true to skip the 'hbase.defaults.for.version' check. Setting this to true can be useful in contexts other than the other side of a maven generation; i.e. running in an IDE.  You'll want to set this boolean to true to avoid seeing the RuntimeException complaint: ""hbase-default.xml file seems to be for and old version of HBase (\${hbase.version}), this version is X.X.X-SNAPSHOT""",This defaults file was compiled for version ${project.version}. This variable is used to make sure that a user doesn't have an old version of hbase-default.xml on the classpath.
44,hbase.data.umask,hbase.data.umask.enable,File permissions that should be used to write data   files when hbase.data.umask.enable is true,"Enable, if true, that file permissions should be assigned   to the files written by the regionserver"
45,hbase.server.compactchecker.interval.multiplier,hbase.server.thread.wakefrequency,"The number that determines how often we scan to see if compaction is necessary.  Normally, compactions are done after some events (such as memstore flush), but if  region didn't receive a lot of writes for some time, or due to different compaction  policies, it may be necessary to check it periodically. The interval between checks is  hbase.server.compactchecker.interval.multiplier multiplied by  hbase.server.thread.wakefrequency.","In master side, this config is the period used for FS related behaviors:   checking if hdfs is out of safe mode, setting or checking hbase.version file,   setting or checking hbase.id file. Using default value should be fine.   In regionserver side, this config is used in several places: flushing check interval,   compaction check interval, wal rolling check interval. Specially, admin can tune   flushing and compaction check interval by hbase.regionserver.flush.check.period   and hbase.regionserver.compaction.check.period. (in milliseconds)"
46,dfs.domain.socket.path,dfs.client.read.shortcircuit,"   This is a path to a UNIX domain socket that will be used for   communication between the DataNode and local HDFS clients, if   dfs.client.read.shortcircuit is set to true. If the string ""_PORT"" is   present in this path, it will be replaced by the TCP port of the DataNode.   Be careful about permissions for the directory that hosts the shared   domain socket; dfsclient will complain if open to other users than the HBase user. ","   If set to true, this configuration parameter enables short-circuit local   reads. "
47,hbase.dfs.client.read.shortcircuit.buffer.size,dfs.client.read.shortcircuit,"If the DFSClient configuration dfs.client.read.shortcircuit.buffer.size is unset, we will use what is configured here as the short circuit read default direct byte buffer size. DFSClient native default is 1MB; HBase keeps its HDFS files open so number of file blocks * 1MB soon starts to add up and threaten OOME because of a shortage of direct memory.  So, we set it down from the default.  Make it > the default hbase block size set in the HColumnDescriptor which is usually 64k. ","   If set to true, this configuration parameter enables short-circuit local   reads. "
48,hbase.rest-csrf.browser-useragents-regex,hbase.rest.csrf.enabled," A comma-separated list of regular expressions used to match against an HTTP request's User-Agent header when protection against cross-site request forgery (CSRF) is enabled for REST server by setting hbase.rest.csrf.enabled to true.  If the incoming User-Agent matches any of these regular expressions, then the request is considered to be sent by a browser, and therefore CSRF prevention is enforced.  If the request's User-Agent does not match any of these regular expressions, then the request is considered to be sent by something other than a browser, such as scripted automation.  In this case, CSRF is not a potential attack vector, so the prevention is not enforced.  This helps achieve backwards-compatibility with existing automation that has not been updated to send the CSRF prevention header.  ", Set to true to enable protection against cross-site request forgery (CSRF)	
49,hbase.http.filter.initializers,hbase.http.staticuser.user,"   A comma separated list of class names. Each class in the list must extend   org.apache.hadoop.hbase.http.FilterInitializer. The corresponding Filter will   be initialized. Then, the Filter will be applied to all user facing jsp   and servlet web pages.   The ordering of the list defines the ordering of the filters.   The default StaticUserWebFilter add a user principal as defined by the   hbase.http.staticuser.user property. ","   The user name to filter as, on static web filters   while rendering content. An example use is the HDFS   web UI (user to be used for browsing files). "
50,hbase.mob.cache.evict.remain.ratio,hbase.mob.file.cache.size,   The ratio (between 0.0 and 1.0) of files that remains cached after an eviction   is triggered when the number of cached mob files exceeds the hbase.mob.file.cache.size.   The default value is 0.5f. ,"   Number of opened file handlers to cache.   A larger value will benefit reads by providing more file handlers per mob   file cache and would reduce frequent file opening and closing.   However, if this is set too high, this could lead to a ""too many opened file handlers""   The default value is 1000. "
51,hbase.rpc.rows.warning.threshold,hbase.client.write.buffer,"   Number of rows in a batch operation above which a warning will be logged.   If hbase.client.write.buffer.maxmutations is not set, this will be used as   fallback for that setting. ","Default size of the BufferedMutator write buffer in bytes. A bigger buffer takes more memory -- on both the client and server side since server instantiates the passed write buffer to process it -- but a larger buffer size reduces the number of RPCs made. For an estimate of server-side memory-used, evaluate hbase.client.write.buffer * hbase.regionserver.handler.count"
52,hbase.regionserver.slowlog.buffer.enabled,hbase.regionserver.slowlog.ringbuffer.size,"   Indicates whether RegionServers have ring buffer running for storing   Online Slow logs in FIFO manner with limited entries. The size of   the ring buffer is indicated by config: hbase.regionserver.slowlog.ringbuffer.size   The default value is false, turn this on and get latest slowlog   responses with complete data. ","   Default size of ringbuffer to be maintained by each RegionServer in order   to store online slowlog responses. This is an in-memory ring buffer of   requests that were judged to be too slow in addition to the responseTooSlow   logging. The in-memory representation would be complete.   For more details, please look into Doc Section:   Get Slow Response Log from shell "
53,hbase.regionserver.slowlog.systable.enabled,hbase.regionserver.slowlog.buffer.enabled,"   Should be enabled only if hbase.regionserver.slowlog.buffer.enabled is enabled. If enabled   (true), all slow/large RPC logs would be persisted to system table hbase:slowlog (in addition   to in-memory ring buffer at each RegionServer). The records are stored in increasing   order of time. Operators can scan the table with various combination of ColumnValueFilter.   More details are provided in the doc section:   ""Get Slow/Large Response Logs from System table hbase:slowlog"" ","   Indicates whether RegionServers have ring buffer running for storing   Online Slow logs in FIFO manner with limited entries. The size of   the ring buffer is indicated by config: hbase.regionserver.slowlog.ringbuffer.size   The default value is false, turn this on and get latest slowlog   responses with complete data. "
54,hbase.rpc.rows.size.threshold.reject,hbase.rpc.rows.warning.threshold,"   If value is true, RegionServer will abort batch requests of Put/Delete with number of rows   in a batch operation exceeding threshold defined by value of config:   hbase.rpc.rows.warning.threshold. The default value is false and hence, by default, only   warning will be logged. This config should be turned on to prevent RegionServer from serving   very large batch size of rows and this way we can improve CPU usages by discarding   too large batch request. ","   Number of rows in a batch operation above which a warning will be logged.   If hbase.client.write.buffer.maxmutations is not set, this will be used as   fallback for that setting. "
