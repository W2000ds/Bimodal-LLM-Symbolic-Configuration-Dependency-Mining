id,Parameter1,Parameter2,bnf,type
1,dfs.journalnode.keytab.file,dfs.datanode.keytab.file,dfs.journalnode.keytab.file != null => dfs.datanode.keytab.file != null,behavior
2,dfs.qjournal.write-txns.timeout.ms,dfs.journalnode.edit.cache.size.bytes,dfs.qjournal.write-txns.timeout.ms > 1000 => dfs.journalnode.edit.cache.size.bytes > 1048576,behavior
3,dfs.datanode.available-space-volume-choosing-policy.balanced-space-threshold,dfs.datanode.available-space-volume-choosing-policy.balanced-space-preference-fraction,dfs.datanode.available-space-volume-choosing-policy.balanced-space-threshold = 10737418240 => dfs.datanode.available-space-volume-choosing-policy.balanced-space-preference-fraction = 0.75f,behavior
4,dfs.namenode.checkpoint.period,dfs.namenode.checkpoint.check.period,dfs.namenode.checkpoint.period = <Number> => dfs.namenode.checkpoint.check.period = <Number>,behavior
5,dfs.journalnode.rpc-address,dfs.journalnode.kerberos.principal,dfs.journalnode.rpc-address != null => dfs.journalnode.kerberos.principal != null,behavior
6,dfs.client.retry.policy.spec,dfs.client.retry.max.attempts,dfs.client.retry.policy.spec != null => dfs.client.retry.max.attempts > 0,behavior
7,dfs.http.client.failover.max.attempts,dfs.http.client.failover.sleep.max.millis,dfs.http.client.failover.max.attempts > 1 => dfs.http.client.failover.sleep.max.millis > dfs.http.client.failover.sleep.base.millis,behavior
8,dfs.client.use.legacy.blockreader.local,dfs.domain.socket.path,dfs.domain.socket.path != null => dfs.client.use.legacy.blockreader.local = false,behavior
9,dfs.client.key.provider.cache.expiry,dfs.client.key.provider.cache.timeout.ms,dfs.client.key.provider.cache.expiry = ANY => dfs.client.key.provider.cache.timeout.ms = [0 .. 86400000],behavior
10,dfs.balancer.address,dfs.namenode.rpc-address,dfs.balancer.address != null => dfs.namenode.rpc-address != null,behavior
11,dfs.datanode.shared.file.descriptor.paths,dfs.datanode.du.reserved,dfs.datanode.shared.file.descriptor.paths != null => dfs.datanode.du.reserved > 0,behavior
12,dfs.journalnode.kerberos.principal,dfs.web.authentication.kerberos.principal,dfs.journalnode.kerberos.principal != null => dfs.web.authentication.kerberos.principal != null,behavior
13,dfs.namenode.resource.check.interval,dfs.namenode.resource.du.reserved,dfs.namenode.resource.check.interval > 0 => dfs.namenode.resource.du.reserved > 0,behavior
14,dfs.journalnode.http-address,dfs.namenode.shared.edits.dir,dfs.journalnode.http-address != null => dfs.namenode.shared.edits.dir in {{ qjournal://host1:port1;host2:port2;host3:port3/journalId }},behavior
15,dfs.namenode.delegation.key.update-interval,dfs.namenode.delegation.token.max-lifetime,dfs.namenode.delegation.key.update-interval < dfs.namenode.delegation.token.max-lifetime => dfs.namenode.delegation.token.max-lifetime > dfs.namenode.delegation.key.update-interval,behavior
16,dfs.namenode.lifeline.rpc-address,dfs.namenode.rpc-address,dfs.namenode.lifeline.rpc-address != null => dfs.namenode.rpc-address != null,behavior
17,dfs.namenode.rpc-bind-host,dfs.namenode.rpc-address,dfs.namenode.rpc-bind-host != null => dfs.namenode.rpc-address != null,behavior
18,dfs.namenode.audit.log.async,dfs.namenode.audit.log.maxfilesize,dfs.namenode.audit.log.async = true => dfs.namenode.audit.log.maxfilesize > 0,behavior
19,dfs.namenode.top.enabled,dfs.namenode.top.users.num,dfs.namenode.top.enabled = true => dfs.namenode.top.users.num > 0,behavior
20,dfs.journalnode.kerberos.principal,dfs.data.transfer.protection,"dfs.journalnode.kerberos.principal != null => dfs.data.transfer.protection in {""authentication"", ""integrity"", ""privacy""}",behavior
21,dfs.client.replica.accessor.builder.classes,dfs.client.replica.selector.class,dfs.client.replica.accessor.builder.classes != null => dfs.client.replica.selector.class != null,behavior
22,dfs.client.local.interfaces,dfs.client.socket-timeout,dfs.client.local.interfaces != null => dfs.client.socket-timeout > 0,behavior
23,dfs.namenode.top.window.num.buckets,dfs.namenode.top.num.users,dfs.namenode.top.window.num.buckets > 0 => dfs.namenode.top.num.users > 0,behavior
24,dfs.namenode.fs-limits.max-component-length,dfs.blocksize,dfs.namenode.fs-limits.max-component-length > 255 => dfs.blocksize > 134217728,behavior
25,dfs.webhdfs.enabled,hadoop.security.authentication,dfs.webhdfs.enabled = true => hadoop.security.authentication = kerberos,behavior
26,dfs.client.retry.window.base,dfs.client.retry.max.attempts,dfs.client.retry.window.base > 0 => dfs.client.retry.max.attempts > 0,behavior
27,dfs.client.retry.policy.spec,dfs.client.retry.interval,dfs.client.retry.policy.spec != null => dfs.client.retry.interval > 0,behavior
28,dfs.datanode.http.internal-proxy.port,dfs.datanode.address,dfs.datanode.http.internal-proxy.port != null => dfs.datanode.address != null,behavior
29,dfs.short.circuit.shared.memory.watcher.interrupt.check.ms,dfs.domain.socket.path,dfs.domain.socket.path != null => dfs.short.circuit.shared.memory.watcher.interrupt.check.ms in [1..60000],behavior
30,dfs.namenode.edits.noeditlogchannelflush,dfs.namenode.edits.dir,dfs.namenode.edits.noeditlogchannelflush = true => dfs.namenode.edits.dir != null,behavior
31,dfs.qjournal.start-segment.timeout.ms,dfs.journalnode.edits.dir,dfs.qjournal.start-segment.timeout.ms > 0 => dfs.journalnode.edits.dir != null,behavior
32,dfs.datanode.hdfs-blocks-metadata.enabled,dfs.datanode.numblocks,dfs.datanode.hdfs-blocks-metadata.enabled = true => dfs.datanode.numblocks > 0,behavior
33,dfs.namenode.resource.checked.volumes,dfs.namenode.resource.checked.volumes.minimum,dfs.namenode.resource.checked.volumes != null => dfs.namenode.resource.checked.volumes.minimum = 1,behavior
34,dfs.hosts,dfs.hosts.exclude,dfs.hosts != null => dfs.hosts.exclude != null,behavior
35,dfs.client.block.write.replace-datanode-on-failure.enable,dfs.client.block.write.replace-datanode-on-failure.policy,dfs.client.block.write.replace-datanode-on-failure.enable = true => dfs.client.block.write.replace-datanode-on-failure.policy != null,behavior
36,dfs.namenode.top.window.num.buckets,dfs.namenode.top.windows.minutes,dfs.namenode.top.window.num.buckets > 0 => dfs.namenode.top.windows.minutes > 0,behavior
37,dfs.namenode.block-placement-policy.default.prefer-local-node,dfs.datanode.data.dir,dfs.namenode.block-placement-policy.default.prefer-local-node = true => dfs.datanode.data.dir != null,behavior
38,dfs.datanode.transfer.socket.send.buffer.size,dfs.datanode.transfer.socket.receive.buffer.size,dfs.datanode.transfer.socket.send.buffer.size > default => dfs.datanode.transfer.socket.receive.buffer.size > default,behavior
39,dfs.webhdfs.oauth2.enabled,dfs.webhdfs.oauth2.token.provider,dfs.webhdfs.oauth2.enabled = true => dfs.webhdfs.oauth2.token.provider != null,behavior
40,dfs.client.cache.drop.behind.reads,dfs.client.cache.readahead,dfs.client.cache.drop.behind.reads = ANY => dfs.client.cache.readahead = ANY,behavior
41,dfs.namenode.backup.address,dfs.namenode.backup.http-address,<Dependency> ::= <Condition> => <ConstraintItem>,behavior
42,dfs.namenode.backup.address,dfs.namenode.backup.service.rpc-address,dfs.namenode.backup.address != null => dfs.namenode.backup.service.rpc-address != null,behavior
43,dfs.client.failover.connection.retries,dfs.client.failover.sleep.max.millis,dfs.client.failover.sleep.max.millis > dfs.client.failover.sleep.base.millis => dfs.client.failover.connection.retries = dfs.client.failover.connection.retries + (dfs.client.failover.sleep.max.millis / dfs.client.failover.sleep.base.millis),behavior
44,dfs.namenode.kerberos.principal,dfs.namenode.keytab.file,dfs.namenode.kerberos.principal != null => dfs.namenode.keytab.file != null,behavior
45,dfs.namenode.hosts.provider.classname,dfs.ha.automatic-failover.enabled,dfs.namenode.hosts.provider.classname != default => dfs.ha.automatic-failover.enabled = true,behavior
46,dfs.client.https.need-auth,dfs.client.https.keystore.resource,"dfs.client.https.keystore.resource != ""null"" => dfs.client.https.need-auth = ""true""",behavior
47,dfs.datanode.disk.check.min.gap,dfs.datanode.disk.check.timeout,dfs.datanode.disk.check.min.gap > default => dfs.datanode.disk.check.timeout > default,behavior
48,dfs.journalnode.edits.dir,dfs.namenode.shared.edits.dir,dfs.journalnode.edits.dir != null => dfs.namenode.shared.edits.dir = dfs.journalnode.edits.dir,behavior
49,dfs.namenode.edits.noeditlogchannelflush,dfs.namenode.num.extra.edits.retained,dfs.namenode.edits.noeditlogchannelflush = true => dfs.namenode.num.extra.edits.retained > 0,behavior
50,dfs.namenode.kerberos.internal.spnego.principal,dfs.journalnode.kerberos.principal,dfs.namenode.kerberos.internal.spnego.principal != null => dfs.journalnode.kerberos.principal != null,behavior
51,dfs.http.client.retry.policy.spec,dfs.http.client.retry.max.attempts,dfs.http.client.retry.policy.spec != null => dfs.http.client.retry.max.attempts > 1,behavior
52,dfs.mover.max-no-move-interval,dfs.datanode.max.transfer.threads,dfs.mover.max-no-move-interval > 600 => dfs.datanode.max.transfer.threads > 4096,behavior
53,dfs.datanode.cached-dfsused.check.interval.ms,dfs.datanode.cached-dfsused.limit,dfs.datanode.cached-dfsused.check.interval.ms < 30000 => dfs.datanode.cached-dfsused.limit < default,behavior
54,dfs.secondary.namenode.kerberos.internal.spnego.principal,dfs.namenode.kerberos.principal,dfs.secondary.namenode.kerberos.internal.spnego.principal != null => dfs.namenode.kerberos.principal != null,behavior
55,dfs.client.https.keystore.resource,dfs.client.https.truststore.resource,dfs.client.https.keystore.resource != null => dfs.client.https.truststore.resource != null,behavior
56,dfs.block.access.key.update.interval,dfs.block.access.token.enable,dfs.block.access.token.enable = true => dfs.block.access.key.update.interval > 0,behavior
57,dfs.mover.movedWinWidth,dfs.datanode.max.transfer.threads,dfs.mover.movedWinWidth > 1000 => dfs.datanode.max.transfer.threads > 4096,behavior
58,dfs.journalnode.kerberos.internal.spnego.principal,dfs.journalnode.kerberos.internal.spnego.keytab.file,dfs.journalnode.kerberos.internal.spnego.principal != null => dfs.journalnode.kerberos.internal.spnego.keytab.file != null,behavior
59,dfs.datanode.network.counts.cache.max.size,dfs.datanode.handler.count,dfs.datanode.network.counts.cache.max.size > default => dfs.datanode.handler.count > default,control
60,dfs.balancer.movedWinWidth,dfs.balancer.getBlocks.size,dfs.balancer.movedWinWidth > 0 => dfs.balancer.getBlocks.size > 0,control
61,dfs.namenode.checkpoint.txns,dfs.namenode.num.checkpoints.retained,dfs.namenode.checkpoint.txns in {{500000..1000000}} => dfs.namenode.num.checkpoints.retained in {{2..3}},control
62,dfs.web.authentication.kerberos.principal,dfs.client.https.need-auth,dfs.client.https.need-auth = true => dfs.web.authentication.kerberos.principal != null,control
63,dfs.use.dfs.network.topology,dfs.client.use.datanode.hostname,dfs.use.dfs.network.topology = true => dfs.client.use.datanode.hostname = true,control
64,dfs.http.policy,dfs.client.https.keystore.resource,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.client.https.keystore.resource != ""null""",control
65,dfs.client.short.circuit.replica.stale.threshold.ms,dfs.namenode.stale.datanode.interval,dfs.namenode.stale.datanode.interval > 0 => dfs.client.short.circuit.replica.stale.threshold.ms < dfs.namenode.stale.datanode.interval,control
66,dfs.namenode.name.dir,dfs.namenode.shared.edits.dir,dfs.namenode.shared.edits.dir = ANY => dfs.namenode.name.dir = ANY,control
67,dfs.datanode.sync.behind.writes.in.background,dfs.datanode.sync.behind.writes,dfs.datanode.sync.behind.writes = true => dfs.datanode.sync.behind.writes.in.background = true,control
68,dfs.block.misreplication.processing.limit,dfs.namenode.replication.max-streams,dfs.block.misreplication.processing.limit > 100 => dfs.namenode.replication.max-streams > 50,control
69,dfs.namenode.safemode.replication.min,dfs.namenode.safemode.threshold-pct,dfs.namenode.safemode.threshold-pct = ANY => dfs.namenode.safemode.replication.min = ANY,control
70,dfs.ha.automatic-failover.enabled,dfs.ha.standby.checkpoints,dfs.ha.automatic-failover.enabled = true => dfs.ha.standby.checkpoints = true,control
71,dfs.datanode.directoryscan.throttle.limit.ms.per.sec,dfs.datanode.max.transfer.threads,dfs.datanode.directoryscan.throttle.limit.ms.per.sec < 500 => dfs.datanode.max.transfer.threads in {{4096..8192}},control
72,dfs.namenode.list.cache.pools.num.responses,dfs.namenode.cache.pools.max,dfs.namenode.list.cache.pools.num.responses > 0 => dfs.namenode.cache.pools.max >= dfs.namenode.list.cache.pools.num.responses,control
73,dfs.datanode.ipc.address,dfs.datanode.use.datanode.hostname,dfs.datanode.use.datanode.hostname = true => dfs.datanode.ipc.address in {hostname:port},control
74,dfs.webhdfs.oauth2.client.id,dfs.webhdfs.oauth2.refresh.url,dfs.webhdfs.oauth2.refresh.url != null => dfs.webhdfs.oauth2.client.id != null,control
75,dfs.namenode.lifeline.rpc-address,dfs.namenode.lifeline.handler.ratio,dfs.namenode.lifeline.rpc-address != null => dfs.namenode.lifeline.handler.ratio != null,control
76,dfs.blockreport.split.threshold,dfs.heartbeat.interval,dfs.blockreport.split.threshold > 1000 => dfs.heartbeat.interval < 5,control
77,dfs.namenode.edits.dir,dfs.namenode.edits.dir.required,dfs.namenode.edits.dir.required = true => dfs.namenode.edits.dir != null,control
78,dfs.datanode.sync.behind.writes,dfs.datanode.sync.behind.writes.in.background,dfs.datanode.sync.behind.writes = true => dfs.datanode.sync.behind.writes.in.background is valid and non-null,control
79,dfs.client.read.shortcircuit,dfs.domain.socket.path,dfs.client.read.shortcircuit = true => dfs.domain.socket.path != null,control
80,dfs.image.compress,dfs.image.compress.buffer.size,dfs.image.compress = true => dfs.image.compress.buffer.size > 0,control
81,dfs.namenode.lifeline.rpc-bind-host,dfs.ha.automatic-failover.enabled,dfs.namenode.lifeline.rpc-bind-host != null AND dfs.ha.automatic-failover.enabled = true => dfs.namenode.lifeline.rpc-bind-host != null,control
82,dfs.namenode.checkpoint.max-retries,dfs.namenode.checkpoint.period,dfs.namenode.checkpoint.period > 0 => dfs.namenode.checkpoint.max-retries = ANY,control
83,dfs.client.socketcache.expiryMsec,dfs.client.socketcache.capacity,dfs.client.socketcache.expiryMsec > 0 => dfs.client.socketcache.capacity > 0,control
84,dfs.journalnode.rpc-address,dfs.ha.automatic-failover.enabled,dfs.ha.automatic-failover.enabled = true => dfs.journalnode.rpc-address != null,control
85,dfs.client.retry.window.base,dfs.client.retry.policy.enabled,dfs.client.retry.window.base = <Expression> => dfs.client.retry.policy.enabled = <Boolean>,control
86,dfs.permissions.enabled,dfs.permissions.superusergroup,dfs.permissions.enabled = true => dfs.permissions.superusergroup != null,control
87,dfs.balancer.keytab.enabled,dfs.balancer.keytab.file,dfs.balancer.keytab.enabled = true => dfs.balancer.keytab.file != null,control
88,dfs.image.transfer.bandwidthPerSec,dfs.namenode.checkpoint.period,dfs.image.transfer.bandwidthPerSec > 0 => dfs.namenode.checkpoint.period > 0,control
89,dfs.quota.by.storage.type.enabled,dfs.storage.policy.enabled,dfs.quota.by.storage.type.enabled = true => dfs.storage.policy.enabled = true,control
90,dfs.balancer.block-move.timeout,dfs.balancer.max-no-move-interval,dfs.balancer.max-no-move-interval > 0 => dfs.balancer.block-move.timeout = ANY,control
91,dfs.client.write.byte-array-manager.count-limit,dfs.client.write.byte-array-manager.count-threshold,dfs.client.write.byte-array-manager.count-limit > 0 => dfs.client.write.byte-array-manager.count-threshold > 0,control
92,dfs.ha.namenodes.EXAMPLENAMESERVICE,dfs.namenode.rpc-address.EXAMPLENAMESERVICE.[namenode_id],"dfs.ha.namenodes.EXAMPLENAMESERVICE = {{ namenode1,namenode2 }} => dfs.namenode.rpc-address.EXAMPLENAMESERVICE.namenode1 = ANY && dfs.namenode.rpc-address.EXAMPLENAMESERVICE.namenode2 = ANY",control
93,dfs.block.access.token.enable,dfs.block.access.token.lifetime,dfs.block.access.token.enable = true => dfs.block.access.token.lifetime != null,control
94,dfs.client.read.prefetch.size,dfs.datanode.max.locked.memory,dfs.client.read.prefetch.size > default => dfs.datanode.max.locked.memory > default,control
95,dfs.client.write.max-packets-in-flight,dfs.client.block.write.retries,dfs.client.block.write.retries > 0 => dfs.client.write.max-packets-in-flight = ANY,control
96,dfs.client.failover.proxy.provider,dfs.ha.namenodes.EXAMPLENAMESERVICE,dfs.ha.namenodes.EXAMPLENAMESERVICE != null => dfs.client.failover.proxy.provider = ANY,control
97,dfs.client.block.write.replace-datanode-on-failure.enable,dfs.replication,dfs.client.block.write.replace-datanode-on-failure.enable = true => dfs.replication > 1,control
98,dfs.client.https.need-auth,dfs.http.policy,"dfs.client.https.need-auth = true => dfs.http.policy in {{HTTPS_ONLY, HTTP_AND_HTTPS}}",control
99,dfs.ha.fencing.ssh.connect-timeout,dfs.ha.fencing.methods,"dfs.ha.fencing.methods = ""ssh"" => dfs.ha.fencing.ssh.connect-timeout > 0",control
100,dfs.journalnode.keytab.file,dfs.https.enable,dfs.journalnode.keytab.file != null => dfs.https.enable = true,control
101,dfs.client.read.short.circuit.replica.stale.threshold.ms,dfs.namenode.avoid.read.stale.datanode,dfs.namenode.avoid.read.stale.datanode = true => dfs.client.read.short.circuit.replica.stale.threshold.ms < dfs.namenode.stale.datanode.interval,control
102,dfs.replication,dfs.namenode.replication.min,dfs.replication >= dfs.namenode.replication.min,control
103,dfs.blockreport.split.threshold,dfs.blockreport.initialDelay,dfs.blockreport.split.threshold > 1000 => dfs.blockreport.initialDelay < 30,control
104,dfs.namenode.decommission.interval,dfs.namenode.decommission.max.concurrent.tracked.nodes,dfs.namenode.decommission.interval < 60 => dfs.namenode.decommission.max.concurrent.tracked.nodes < 100,control
105,dfs.journalnode.kerberos.internal.spnego.principal,dfs.http.policy,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.journalnode.kerberos.internal.spnego.principal != null",control
106,dfs.nameservices,dfs.nameservice.id,dfs.nameservices != null => dfs.nameservice.id = ANY,control
107,dfs.cluster.administrators,dfs.permissions.superusergroup,dfs.cluster.administrators != null => dfs.permissions.superusergroup in {{ <Singlevalue> }},control
108,dfs.namenode.checkpoint.max-retries,dfs.namenode.checkpoint.txns,dfs.namenode.checkpoint.txns > 0 => dfs.namenode.checkpoint.max-retries = ANY,control
109,dfs.namenode.checkpoint.dir,dfs.namenode.checkpoint.period,dfs.namenode.checkpoint.dir != null => dfs.namenode.checkpoint.period > 0,control
110,dfs.datanode.address,dfs.client.use.datanode.hostname,dfs.client.use.datanode.hostname = true => dfs.datanode.address != null,control
111,dfs.namenode.lock.detailed-metrics.enabled,dfs.namenode.lock.metrics.log.interval,dfs.namenode.lock.detailed-metrics.enabled = true => dfs.namenode.lock.metrics.log.interval > 0,control
112,dfs.datanode.sync.behind.writes.in.background,dfs.datanode.max.transfer.threads,dfs.datanode.sync.behind.writes.in.background = true => dfs.datanode.max.transfer.threads > 4096,control
113,dfs.webhdfs.rest-csrf.methods-to-ignore,dfs.webhdfs.rest-csrf.enabled,dfs.webhdfs.rest-csrf.enabled = true => dfs.webhdfs.rest-csrf.methods-to-ignore != null,control
114,dfs.namenode.fs-limits.min-block-size,dfs.blocksize,dfs.namenode.fs-limits.min-block-size < dfs.blocksize,control
115,dfs.http.policy,dfs.https.server.keystore.resource,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.https.server.keystore.resource != ""null""",control
116,dfs.webhdfs.enabled,dfs.https.server.keystore.resource,dfs.https.server.keystore.resource = null => dfs.webhdfs.enabled = false,control
117,dfs.namenode.fs-limits.max-xattr-size,dfs.namenode.fs-limits.min-block-size,dfs.namenode.fs-limits.max-xattr-size != default => dfs.namenode.fs-limits.min-block-size != default,control
118,dfs.webhdfs.oauth2.enabled,dfs.webhdfs.enabled,dfs.webhdfs.enabled = true => dfs.webhdfs.oauth2.enabled = true,control
119,dfs.namenode.retrycache.expirytime.millis,dfs.namenode.enable.retrycache,dfs.namenode.enable.retrycache = true => dfs.namenode.retrycache.expirytime.millis > 0,control
120,dfs.client.slow.io.warning.threshold.ms,dfs.client.slow.io.log.enabled,dfs.client.slow.io.warning.threshold.ms > 0 => dfs.client.slow.io.log.enabled = true,control
121,dfs.client.retry.interval-ms.get-last-block-length,dfs.client.retry.policy.enabled,dfs.client.retry.policy.enabled = true => dfs.client.retry.interval-ms.get-last-block-length = ANY,control
122,dfs.ha.namenodes.EXAMPLENAMESERVICE,dfs.namenode.http-address.EXAMPLENAMESERVICE.[namenode_id],"dfs.ha.namenodes.EXAMPLENAMESERVICE = {{ namenode1,namenode2 }} => dfs.namenode.http-address.EXAMPLENAMESERVICE.namenode1 = ANY && dfs.namenode.http-address.EXAMPLENAMESERVICE.namenode2 = ANY",control
123,dfs.namenode.startup.delay.block.deletion.sec,dfs.namenode.num.blocks.to.process,dfs.namenode.startup.delay.block.deletion.sec > 0 => dfs.namenode.num.blocks.to.process > 1000,control
124,dfs.http.policy,dfs.encrypt.data.transfer,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.encrypt.data.transfer = ""true""",control
125,dfs.client.failover.connection.retries.on.timeouts,dfs.client.failover.sleep.base.millis,dfs.client.failover.sleep.base.millis > 0 => dfs.client.failover.connection.retries.on.timeouts = ANY,control
126,dfs.namenode.rpc-address,dfs.namenode.rpc-bind-host,dfs.namenode.rpc-bind-host != null => dfs.namenode.rpc-address = dfs.namenode.rpc-bind-host:<port>,control
127,dfs.namenode.avoid.write.stale.datanode,dfs.namenode.write.stale.datanode.ratio,dfs.namenode.write.stale.datanode.ratio > 0 => dfs.namenode.avoid.write.stale.datanode = true,control
128,dfs.client.write.byte-array-manager.count-reset-time-period-ms,dfs.client.write.packet.size,dfs.client.write.packet.size > default => dfs.client.write.byte-array-manager.count-reset-time-period-ms < [default..default/2],control
129,dfs.namenode.checkpoint.edits.dir,dfs.namenode.checkpoint.period,dfs.namenode.checkpoint.edits.dir != null => dfs.namenode.checkpoint.period > 0,control
130,dfs.ha.zkfc.nn.http.timeout.ms,dfs.ha.fencing.ssh.connect-timeout,dfs.ha.zkfc.nn.http.timeout.ms > 5000 => dfs.ha.fencing.ssh.connect-timeout > dfs.ha.zkfc.nn.http.timeout.ms,control
131,dfs.datanode.block-pinning.enabled,dfs.datanode.max.locked.memory,dfs.datanode.block-pinning.enabled = true => dfs.datanode.max.locked.memory > 0,control
132,dfs.client.failover.proxy.provider,dfs.ha.namenodes.[nameservice ID],dfs.client.failover.proxy.provider != null => dfs.ha.namenodes.[nameservice ID] != null,control
133,dfs.block.access.token.enable,dfs.block.access.key.update.interval,dfs.block.access.token.enable = true => dfs.block.access.key.update.interval != null,control
134,dfs.client.write.byte-array-manager.count-limit,dfs.client-write-packet-size,"dfs.client.write.byte-array-manager.count-limit > 0 => dfs.client-write-packet-size in {{65536, 131072, 262144}}",control
135,dfs.namenode.resource.checked.volumes,dfs.namenode.resource.check.interval,dfs.namenode.resource.checked.volumes > 0 => dfs.namenode.resource.check.interval > 0,control
136,dfs.ha.fencing.methods,dfs.ha.zkfc.port,dfs.ha.fencing.methods = ANY => dfs.ha.zkfc.port = 8019,control
137,dfs.datanode.keytab.file,dfs.data.transfer.protection,"dfs.data.transfer.protection = ""privacy"" => dfs.datanode.keytab.file != null",control
138,dfs.webhdfs.enabled,dfs.web.authentication.kerberos.principal,dfs.web.authentication.kerberos.principal = null => dfs.webhdfs.enabled = false,control
139,dfs.namenode.avoid.write.stale.datanode,dfs.namenode.stale.datanode.interval,dfs.namenode.stale.datanode.interval > 0 => dfs.namenode.avoid.write.stale.datanode = true,control
140,dfs.webhdfs.rest-csrf.enabled,dfs.webhdfs.enabled,dfs.webhdfs.enabled = true => dfs.webhdfs.rest-csrf.enabled = ANY,control
141,dfs.namenode.write.stale.datanode.ratio,dfs.namenode.avoid.write.stale.datanode,dfs.namenode.write.stale.datanode.ratio > 0.5f => dfs.namenode.avoid.write.stale.datanode is valid and non-null,control
142,dfs.namenode.checkpoint.max-retries,dfs.namenode.checkpoint.check.period,dfs.namenode.checkpoint.check.period > 0 => dfs.namenode.checkpoint.max-retries = ANY,control
143,dfs.datanode.keytab.file,dfs.encrypt.data.transfer,dfs.encrypt.data.transfer = true => dfs.datanode.keytab.file != null,control
144,dfs.datanode.keytab.file,dfs.http.policy,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.datanode.keytab.file != null",control
145,dfs.journalnode.kerberos.principal,hadoop.security.authentication,dfs.journalnode.kerberos.principal != null => hadoop.security.authentication = 'kerberos',control
146,dfs.journalnode.rpc-bind-host,dfs.journalnode.http-bind-host,dfs.journalnode.rpc-bind-host = ANY => dfs.journalnode.http-bind-host = ANY,control
147,dfs.client.block.write.retries,dfs.client.block.write.replace-datanode-on-failure.policy,dfs.client.block.write.replace-datanode-on-failure.policy = DEFAULT => dfs.client.block.write.retries > 0,control
148,dfs.namenode.upgrade.domain.factor,dfs.namenode.upgrade.parallel.copies,dfs.namenode.upgrade.domain.factor > 1 => dfs.namenode.upgrade.parallel.copies > 1,control
149,dfs.namenode.retrycache.heap.percent,dfs.namenode.enable.retrycache,dfs.namenode.enable.retrycache = true => dfs.namenode.retrycache.heap.percent > 0,control
150,dfs.journalnode.http-bind-host,dfs.journalnode.https-bind-host,dfs.http.policy = HTTPS_ONLY => dfs.journalnode.http-bind-host = null,control
151,dfs.nameservices,dfs.ha.fencing.methods,dfs.nameservices != null => dfs.ha.fencing.methods = ANY,control
152,dfs.webhdfs.use.ipc.callq,dfs.webhdfs.ipc.server.handler.count,dfs.webhdfs.use.ipc.callq = true => dfs.webhdfs.ipc.server.handler.count > 1,control
153,dfs.namenode.name.cache.threshold,dfs.namenode.max.objects,dfs.namenode.name.cache.threshold > 0 => dfs.namenode.max.objects > dfs.namenode.name.cache.threshold,control
154,dfs.client.block.write.retries,dfs.client.block.write.replace-datanode-on-failure.enable,dfs.client.block.write.replace-datanode-on-failure.enable = true => dfs.client.block.write.retries > 0,control
155,dfs.namenode.handler.count,dfs.namenode.service.handler.count,dfs.namenode.handler.count > {{X}} => dfs.namenode.service.handler.count > {{X}},control
156,dfs.mover.max-no-move-interval,dfs.mover.checkinterval.seconds,dfs.mover.max-no-move-interval > 600 => dfs.mover.checkinterval.seconds > 300,control
157,dfs.namenode.list.cache.directives.num.responses,dfs.namenode.list.cache.directives.batch.size,dfs.namenode.list.cache.directives.num.responses > 100 => dfs.namenode.list.cache.directives.batch.size > 10,control
158,dfs.client.socketcache.capacity,dfs.client.parallel.threads,dfs.client.socketcache.capacity > {{ANY}} => dfs.client.parallel.threads > {{ANY}},control
159,dfs.webhdfs.rest-csrf.enabled,dfs.webhdfs.rest-csrf.custom-header,dfs.webhdfs.rest-csrf.enabled = true => dfs.webhdfs.rest-csrf.custom-header != null,control
160,dfs.namenode.servicerpc-address,dfs.namenode.service.handler.count,dfs.namenode.servicerpc-address != null => dfs.namenode.service.handler.count = 10,control
161,dfs.namenode.edits.asynclogging,dfs.namenode.edits.journal-plugin.qjournal,dfs.namenode.edits.asynclogging = true => dfs.namenode.edits.journal-plugin.qjournal in {{org.apache.hadoop.hdfs.qjournal.client.QuorumJournalManager}},control
162,dfs.client.read.shortcircuit.buffer.size,dfs.client.read.shortcircuit,dfs.client.read.shortcircuit.buffer.size != null => dfs.client.read.shortcircuit = true,control
163,dfs.namenode.num.extra.edits.retained,dfs.namenode.max.extra.edits.retained,dfs.namenode.num.extra.edits.retained > 0 => dfs.namenode.max.extra.edits.retained >= dfs.namenode.num.extra.edits.retained,control
164,dfs.namenode.datanode.registration.ip-hostname-check,dfs.datanode.use.datanode.hostname,dfs.datanode.use.datanode.hostname = true => dfs.namenode.datanode.registration.ip-hostname-check = true,control
165,dfs.client.replica.accessor.builder.classes,dfs.client.replica.accessor.builder.threads,"dfs.client.replica.accessor.builder.classes in {{org.apache.hadoop.hdfs.server.datanode.fsdataset.impl.RandomAccessReplicaAccessorBuilder, org.apache.hadoop.hdfs.server.datanode.fsdataset.impl.SequentialReplicaAccessorBuilder}} => dfs.client.replica.accessor.builder.threads > 1",control
166,dfs.http.port,dfs.namenode.http-address,dfs.http.port != dfs.namenode.http-address.port,control
167,dfs.namenode.replication.max-streams,dfs.namenode.replication.max-streams-hard-limit,dfs.namenode.replication.max-streams > 0 => dfs.namenode.replication.max-streams-hard-limit > dfs.namenode.replication.max-streams,control
168,dfs.namenode.support.allow.format,dfs.reformat.disabled,dfs.reformat.disabled = true => dfs.namenode.support.allow.format = false,control
169,dfs.namenode.checkpoint.check.period,dfs.namenode.checkpoint.txns,dfs.namenode.checkpoint.check.period > 0 => dfs.namenode.checkpoint.txns > 0,control
170,dfs.namenode.name.dir,dfs.namenode.edits.dir,dfs.namenode.edits.dir = ANY => dfs.namenode.name.dir = ANY,control
171,dfs.datanode.directoryscan.interval,dfs.datanode.directoryscan.throttle.limit.ms.per.sec,dfs.datanode.directoryscan.interval > 0 => dfs.datanode.directoryscan.throttle.limit.ms.per.sec > 0,control
172,dfs.ha.tail-edits.period,dfs.ha.log-roll.period,dfs.ha.log-roll.period = ANY => dfs.ha.tail-edits.period = ANY,control
173,dfs.balancer.dispatcherThreads,dfs.balancer.movedThreads,dfs.balancer.dispatcherThreads > 1 => dfs.balancer.movedThreads > 1,control
174,dfs.datanode.block-pinning.enabled,dfs.datanode.du.reserved,dfs.datanode.block-pinning.enabled = true => dfs.datanode.du.reserved < (total_system_memory - dfs.datanode.max.locked.memory),control
175,dfs.ha.automatic-failover.enabled,dfs.client.failover.proxy.provider,dfs.ha.automatic-failover.enabled = true => dfs.client.failover.proxy.provider != null,control
176,dfs.client.block.write.retries,dfs.replication.max,dfs.client.block.write.retries > 1 => dfs.replication.max > dfs.client.block.write.retries,control
177,dfs.nameservices,dfs.ha.zkfc.nn.http.timeout.ms,dfs.nameservices != null => dfs.ha.zkfc.nn.http.timeout.ms = ANY,control
178,dfs.client.socket.send.buffer.size,dfs.datanode.handler.count,dfs.client.socket.send.buffer.size > default => dfs.datanode.handler.count > default,control
179,dfs.encrypt.data.transfer,dfs.trustedchannel.resolver.class,dfs.encrypt.data.transfer = true => dfs.trustedchannel.resolver.class != null,control
180,dfs.ha.automatic-failover.enabled,dfs.ha.zkfc.port,dfs.ha.automatic-failover.enabled = true => dfs.ha.zkfc.port != null,control
181,dfs.webhdfs.rest-csrf.methods-to-ignore,dfs.webhdfs.rest-csrf.browser-useragents-regex,dfs.webhdfs.rest-csrf.browser-useragents-regex != null => dfs.webhdfs.rest-csrf.methods-to-ignore in {ANY},control
182,dfs.namenode.replication.considerLoad,dfs.namenode.replication.min,dfs.namenode.replication.considerLoad = true => dfs.namenode.replication.min <= dfs.replication,control
183,dfs.namenode.decommission.blocks.per.interval,dfs.namenode.decommission.interval,dfs.namenode.decommission.interval > 0 => dfs.namenode.decommission.blocks.per.interval > 0,control
184,dfs.namenode.top.enabled,dfs.namenode.top.num.users,top.enabled = true => dfs.namenode.top.num.users != null,control
185,dfs.namenode.backup.dnrpc-address,dfs.namenode.backup.address,dfs.namenode.backup.address != null => dfs.namenode.backup.dnrpc-address = dfs.namenode.backup.address,control
186,dfs.http.policy,dfs.client.https.need-auth,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.client.https.need-auth = ""true""",control
187,dfs.encrypt.data.transfer.cipher.suites,dfs.encrypt.data.transfer,dfs.encrypt.data.transfer = true => dfs.encrypt.data.transfer.cipher.suites != null,control
188,dfs.namenode.decommission.interval,dfs.namenode.decommission.nodes.per.interval,dfs.namenode.decommission.interval > 0 => dfs.namenode.decommission.nodes.per.interval > 0,control
189,dfs.nameservices,dfs.internal.nameservices,dfs.nameservices != null => dfs.internal.nameservices = ANY,control
190,dfs.namenode.checkpoint.edits.dir,dfs.namenode.max.extra.edits.segments.retained,dfs.namenode.max.extra.edits.segments.retained = ANY => dfs.namenode.checkpoint.edits.dir = ANY,control
191,dfs.permissions.enabled,dfs.permissions.superusergroup,dfs.permissions.enabled = true => dfs.permissions.superusergroup != null,control
192,dfs.namenode.checkpoint.edits.dir,dfs.namenode.checkpoint.check.period,dfs.namenode.checkpoint.check.period = ANY => dfs.namenode.checkpoint.edits.dir = ANY,control
193,dfs.client.local.interfaces,dfs.datanode.max.transfer.threads,dfs.client.local.interfaces != null => dfs.datanode.max.transfer.threads > 0,control
194,dfs.qjournal.finalize-segment.timeout.ms,dfs.qjournal.max-txns-per-segment,dfs.qjournal.finalize-segment.timeout.ms > 60000 => dfs.qjournal.max-txns-per-segment < 1000,control
195,dfs.web.authentication.simple.anonymous.allowed,dfs.web.ugi,dfs.web.ugi != null => dfs.web.authentication.simple.anonymous.allowed = false,control
196,dfs.nameservices,dfs.ha.namenodes.[nameservice ID],dfs.nameservices != null => dfs.ha.namenodes.[nameservice ID] != null,control
197,dfs.datanode.drop.cache.behind.reads,dfs.datanode.max.locked.memory,dfs.datanode.drop.cache.behind.reads = true => dfs.datanode.max.locked.memory > [default..ANY],control
198,dfs.balancer.max-size-to-move,dfs.datanode.balance.bandwidthPerSec,dfs.balancer.max-size-to-move > ANY => dfs.datanode.balance.bandwidthPerSec > ANY,control
199,dfs.journalnode.http-address,dfs.http.policy,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.journalnode.http-address = null",control
200,dfs.namenode.kerberos.principal,hadoop.security.authentication,dfs.namenode.kerberos.principal != null => hadoop.security.authentication = 'kerberos',control
201,dfs.client.mmap.enabled,dfs.namenode.max.full.block.report.threads,dfs.client.mmap.enabled = true => dfs.namenode.max.full.block.report.threads < (system_memory * 0.1 / thread_stack_size),control
202,dfs.ha.automatic-failover.enabled,dfs.namenode.shared.edits.dir,dfs.ha.automatic-failover.enabled = true => dfs.namenode.shared.edits.dir != null,control
203,dfs.namenode.backup.http-address,dfs.ha.namenodes.[nameservice ID],"dfs.namenode.backup.http-address != null => dfs.ha.namenodes.[nameservice ID] in {{backup_namenode_id, other_namenode_ids}}",control
204,dfs.namenode.avoid.read.stale.datanode,dfs.namenode.write.stale.datanode.ratio,dfs.namenode.write.stale.datanode.ratio > 0 => dfs.namenode.avoid.read.stale.datanode = true,control
205,dfs.http.policy,dfs.web.authentication.kerberos.keytab,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.web.authentication.kerberos.keytab != ""null""",control
206,dfs.client.failover.connection.retries,dfs.client.failover.connection.retries.on.timeouts,dfs.client.failover.connection.retries.on.timeouts = true => dfs.client.failover.connection.retries = dfs.client.failover.connection.retries + 1,control
207,dfs.namenode.path.based.cache.block.map.allocation.percent,dfs.namenode.path.based.cache.retry.interval.ms,dfs.namenode.path.based.cache.block.map.allocation.percent > 0 => dfs.namenode.path.based.cache.retry.interval.ms > 0,control
208,dfs.namenode.stale.datanode.interval,dfs.heartbeat.interval,dfs.namenode.stale.datanode.interval > 0 => dfs.heartbeat.interval < dfs.namenode.stale.datanode.interval,control
209,dfs.journalnode.https-address,dfs.http.policy,dfs.http.policy = HTTPS_ONLY => dfs.journalnode.https-address != null,control
210,dfs.hosts,dfs.hosts.exclude,dfs.hosts in {ANY} => dfs.hosts.exclude in {ANY},control
211,dfs.client.read.shortcircuit.streams.cache.expiry.ms,dfs.client.read.shortcircuit,dfs.client.read.shortcircuit.streams.cache.expiry.ms > 0 => dfs.client.read.shortcircuit = true,control
212,dfs.client.mmap.enabled,dfs.client.mmap.cache.size,dfs.client.mmap.enabled = true => dfs.client.mmap.cache.size != null,control
213,dfs.quota.by.storage.type.enabled,dfs.namenode.quota.enabled,dfs.quota.by.storage.type.enabled = true => dfs.namenode.quota.enabled = true,control
214,dfs.namenode.lifeline.rpc-address,dfs.namenode.lifeline.handler.count,dfs.namenode.lifeline.rpc-address != null => dfs.namenode.lifeline.handler.count != null,control
215,dfs.web.authentication.simple.anonymous.allowed,dfs.web.authentication.kerberos.principal,dfs.web.authentication.kerberos.principal != null => dfs.web.authentication.simple.anonymous.allowed = false,control
216,dfs.nameservices,dfs.ha.namenodes.EXAMPLENAMESERVICE,dfs.nameservices != null => dfs.ha.namenodes.EXAMPLENAMESERVICE = ANY,control
217,dfs.client.retry.max.attempts,dfs.client.retry.policy.spec,dfs.client.retry.policy.spec != null => dfs.client.retry.max.attempts = ANY,control
218,dfs.mover.retry.max.attempts,dfs.datanode.max.transfer.threads,dfs.mover.retry.max.attempts > 5 => dfs.datanode.max.transfer.threads > 4096,control
219,dfs.web.authentication.filter,dfs.web.authentication.kerberos.keytab,"dfs.web.authentication.filter = ""Kerberos"" => dfs.web.authentication.kerberos.keytab != null",control
220,dfs.web.authentication.kerberos.principal,dfs.web.authentication.kerberos.keytab,dfs.web.authentication.kerberos.principal != null => dfs.web.authentication.kerberos.keytab != null,control
221,dfs.encrypt.data.transfer.cipher.key.bitlength,dfs.data.transfer.protection,"dfs.data.transfer.protection in {""authentication"", ""integrity"", ""privacy""} => dfs.encrypt.data.transfer.cipher.key.bitlength in {{128, 192, 256}}",control
222,dfs.http.policy,dfs.client.https.need-auth,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.client.https.need-auth != null",control
223,dfs.namenode.enable.retrycache,dfs.namenode.retrycache.expirytime.millis,dfs.namenode.enable.retrycache = true => dfs.namenode.retrycache.expirytime.millis != null,control
224,dfs.encrypt.data.transfer,dfs.encrypt.data.transfer.cipher.key.bitlength,"dfs.encrypt.data.transfer = true => dfs.encrypt.data.transfer.cipher.key.bitlength in {128, 192, 256}",control
225,dfs.client.failover.random.order,dfs.client.failover.connection.timeout,dfs.client.failover.random.order = true => dfs.client.failover.connection.timeout > 30000,control
226,dfs.web.authentication.kerberos.keytab,dfs.client.https.need-auth,dfs.client.https.need-auth = true => dfs.web.authentication.kerberos.keytab != null,control
227,dfs.webhdfs.socket.read-timeout,dfs.client.socket-timeout,dfs.webhdfs.socket.read-timeout < dfs.client.socket-timeout => dfs.webhdfs.socket.read-timeout in [0 .. dfs.client.socket-timeout],control
228,dfs.datanode.fsdataset.volume.choosing.policy,dfs.datanode.disk.check.timeout.ms,dfs.datanode.fsdataset.volume.choosing.policy != null => dfs.datanode.disk.check.timeout.ms > 0,control
229,dfs.datanode.use.datanode.hostname,dfs.datanode.hostname,dfs.datanode.hostname != null => dfs.datanode.use.datanode.hostname = true,control
230,dfs.http.policy,dfs.webhdfs.enabled,"dfs.http.policy = ""HTTP_ONLY"" => dfs.webhdfs.enabled = ""true""",control
231,dfs.http.policy,dfs.namenode.https-address,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.namenode.https-address != ""null""",control
232,dfs.namenode.stale.datanode.minimum.interval,dfs.namenode.avoid.read.stale.datanode,dfs.namenode.avoid.read.stale.datanode = true => dfs.namenode.stale.datanode.minimum.interval > 0,control
233,dfs.datanode.cache.revocation.timeout.ms,dfs.datanode.cache.revocation.polling.interval.ms,dfs.datanode.cache.revocation.timeout.ms > 0 => dfs.datanode.cache.revocation.polling.interval.ms < dfs.datanode.cache.revocation.timeout.ms,control
234,dfs.webhdfs.rest-csrf.enabled,dfs.webhdfs.rest-csrf.methods-to-ignore,dfs.webhdfs.rest-csrf.enabled = true => dfs.webhdfs.rest-csrf.methods-to-ignore != null,control
235,dfs.http.policy,dfs.datanode.http.address,"dfs.http.policy = ""HTTP_ONLY"" => dfs.datanode.http.address != ""null""",control
236,dfs.client-write-packet-size,dfs.datanode.max.xcievers,dfs.client-write-packet-size > 65536 => dfs.datanode.max.xcievers > 4096,control
237,dfs.client.read.shortcircuit.buffer.size,dfs.domain.socket.path,dfs.domain.socket.path != null => dfs.client.read.shortcircuit.buffer.size > 0,control
238,dfs.http.policy,dfs.datanode.https.address,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.datanode.https.address != ""null""",control
239,dfs.nameservices,dfs.ha.namenode.id,dfs.nameservices != null => dfs.ha.namenode.id = ANY,control
240,dfs.client.block.write.locateFollowingBlock.initial.delay.ms,dfs.blocksize,dfs.blocksize > 134217728 => dfs.client.block.write.locateFollowingBlock.initial.delay.ms > 1000,control
241,dfs.namenode.checkpoint.edits.dir,dfs.namenode.num.extra.edits.retained,dfs.namenode.num.extra.edits.retained = ANY => dfs.namenode.checkpoint.edits.dir = ANY,control
242,dfs.ha.automatic-failover.enabled,dfs.ha.fencing.methods,dfs.ha.automatic-failover.enabled = true => dfs.ha.fencing.methods != null,control
243,dfs.secondary.namenode.kerberos.principal,hadoop.security.authentication,"dfs.secondary.namenode.kerberos.principal != null => hadoop.security.authentication = ""kerberos""",control
244,dfs.client.retry.max.attempts,dfs.client.retry.policy.enabled,dfs.client.retry.policy.enabled = true => dfs.client.retry.max.attempts = ANY,control
245,dfs.web.authentication.kerberos.keytab,hadoop.security.authentication,dfs.web.authentication.kerberos.keytab != null => hadoop.security.authentication = 'kerberos',control
246,dfs.data.transfer.saslproperties.resolver.class,hadoop.security.authentication,"dfs.data.transfer.saslproperties.resolver.class != null => hadoop.security.authentication in {{""kerberos"", ""simple""}}",control
247,dfs.datanode.ram.disk.replica.tracker,dfs.datanode.ram.disk.replica.buffer.size,dfs.datanode.ram.disk.replica.tracker = true => dfs.datanode.ram.disk.replica.buffer.size > 0,control
248,dfs.namenode.backup.http-address,dfs.http.policy,dfs.http.policy = HTTPS_ONLY => dfs.namenode.backup.http-address = null,control
249,dfs.namenode.lifeline.rpc-address,dfs.namenode.rpc-address,dfs.namenode.rpc-address = ANY => dfs.namenode.lifeline.rpc-address = dfs.namenode.rpc-address,default
250,dfs.client.retry.policy.spec,dfs.http.client.retry.policy.spec,dfs.client.retry.policy.spec = ANY => dfs.http.client.retry.policy.spec = dfs.client.retry.policy.spec,default
251,dfs.block.access.token.enable,dfs.block.access.token.lifetime,dfs.block.access.token.enable = true => dfs.block.access.token.lifetime = ANY,default
252,dfs.http.client.retry.max.attempts,dfs.client.retry.max.attempts,dfs.client.retry.max.attempts = null => dfs.http.client.retry.max.attempts = default,default
253,dfs.http.client.retry.policy.enabled,dfs.http.client.retry.policy.spec,dfs.http.client.retry.policy.enabled = true => dfs.http.client.retry.policy.spec != null,default
254,dfs.http.client.retry.policy.spec,dfs.client.retry.policy.spec,"dfs.client.retry.policy.spec = null => dfs.http.client.retry.policy.spec = ""default""",default
255,dfs.encrypt.data.transfer.cipher.suites,dfs.encrypt.data.transfer.algorithm,dfs.encrypt.data.transfer.cipher.suites = null => dfs.encrypt.data.transfer.algorithm = ANY,default
256,dfs.namenode.rpc-bind-host,dfs.namenode.rpc-address,dfs.namenode.rpc-bind-host = null => dfs.namenode.rpc-address = dfs.namenode.rpc-address,default
257,dfs.client.block.write.replace-datanode-on-failure.enable,dfs.client.block.write.replace-datanode-on-failure.best-effort,dfs.client.block.write.replace-datanode-on-failure.best-effort = ANY => dfs.client.block.write.replace-datanode-on-failure.enable = true,default
258,dfs.client.failover.sleep.base.millis,dfs.http.client.failover.sleep.base.millis,dfs.http.client.failover.sleep.base.millis = dfs.client.failover.sleep.base.millis,default
259,dfs.client.block.write.replace-datanode-on-failure.enable,dfs.client.block.write.replace-datanode-on-failure.policy,dfs.client.block.write.replace-datanode-on-failure.policy = ANY => dfs.client.block.write.replace-datanode-on-failure.enable = true,default
260,dfs.namenode.lifeline.rpc-address,dfs.namenode.lifeline.rpc-bind-host,dfs.namenode.lifeline.rpc-bind-host = ANY => dfs.namenode.lifeline.rpc-address = {dfs.namenode.lifeline.rpc-bind-host:port},default
261,dfs.webhdfs.oauth2.enabled,dfs.webhdfs.oauth2.refresh.url,dfs.webhdfs.oauth2.enabled = true => dfs.webhdfs.oauth2.refresh.url != null,default
262,dfs.client.failover.max.attempts,dfs.http.client.failover.max.attempts,dfs.http.client.failover.max.attempts = dfs.client.failover.max.attempts,default
263,dfs.namenode.handler.count,dfs.namenode.lifeline.handler.ratio,dfs.namenode.handler.count = ANY => dfs.namenode.lifeline.handler.ratio = (dfs.namenode.handler.count * 0.10),default
264,dfs.client.block.write.replace-datanode-on-failure.enable,dfs.client.block.write.replace-datanode-on-failure.min-replication,dfs.client.block.write.replace-datanode-on-failure.min-replication = ANY => dfs.client.block.write.replace-datanode-on-failure.enable = true,default
265,dfs.namenode.edits.journal-plugin.qjournal,dfs.namenode.edits.journal-plugin,"dfs.namenode.edits.journal-plugin = ""qjournal"" => dfs.namenode.edits.journal-plugin.qjournal = ""ANY""",default
266,dfs.encrypt.data.transfer,dfs.encrypt.data.transfer.cipher.key.bitlength,"dfs.encrypt.data.transfer = ""true"" => dfs.encrypt.data.transfer.cipher.key.bitlength != ""null""",default
267,dfs.datanode.du.reserved.pct,dfs.datanode.du.reserved.pct.ram_disk,dfs.datanode.du.reserved.pct.ram_disk = null => dfs.datanode.du.reserved.pct = dfs.datanode.du.reserved.pct.ram_disk,default
268,dfs.image.compress,dfs.image.compression.codec,dfs.image.compress = true => dfs.image.compression.codec != null,default
269,dfs.client.short.circuit.replica.stale.threshold.ms,dfs.client.read.short.circuit.replica.stale.threshold.ms,dfs.client.read.short.circuit.replica.stale.threshold.ms = null => dfs.client.short.circuit.replica.stale.threshold.ms = dfs.client.read.short.circuit.replica.stale.threshold.ms,default
270,dfs.nameservices,dfs.internal.nameservices,dfs.nameservices = ANY => dfs.internal.nameservices = dfs.nameservices,default
271,dfs.block.access.token.enable,dfs.block.access.key.update.interval,dfs.block.access.token.enable = true => dfs.block.access.key.update.interval = ANY,default
272,dfs.datanode.du.reserved.calculator,dfs.datanode.du.reserved.pct,dfs.datanode.du.reserved.calculator = org.apache.hadoop.hdfs.server.datanode.fsdataset.impl.ReservedSpaceCalculator$ReservedSpaceCalculatorPercentage => dfs.datanode.du.reserved.pct = ANY,default
273,dfs.namenode.name.dir,dfs.namenode.name.dir.restore,dfs.namenode.name.dir.restore = null => dfs.namenode.name.dir = ANY,default
274,dfs.web.authentication.kerberos.principal,dfs.web.authentication.kerberos.keytab,dfs.web.authentication.kerberos.keytab = null => dfs.web.authentication.kerberos.principal != null,default
275,dfs.namenode.servicerpc-address,dfs.namenode.servicerpc-bind-host,dfs.namenode.servicerpc-bind-host = null => dfs.namenode.servicerpc-address = ANY,default
276,dfs.http.client.retry.policy.enabled,dfs.http.client.failover.max.attempts,dfs.http.client.retry.policy.enabled = true => dfs.http.client.failover.max.attempts > 0,default
277,dfs.http.client.retry.policy.enabled,dfs.http.client.failover.sleep.base.millis,dfs.http.client.retry.policy.enabled = true => dfs.http.client.failover.sleep.base.millis > 0,default
278,dfs.http.client.retry.policy.enabled,dfs.http.client.failover.sleep.max.millis,dfs.http.client.retry.policy.enabled = true => dfs.http.client.failover.sleep.max.millis > dfs.http.client.failover.sleep.base.millis,default
279,dfs.blocksize,dfs.client.read.prefetch.size,dfs.blocksize = ANY => dfs.client.read.prefetch.size = 10 * ${dfs.blocksize},default
280,dfs.datanode.du.reserved.pct,dfs.datanode.du.reserved.pct.[ssd]/[disk]/[archive]/[ram_disk],dfs.datanode.du.reserved.pct.[ssd]/[disk]/[archive]/[ram_disk] = null => dfs.datanode.du.reserved.pct = dfs.datanode.du.reserved.pct.[ssd]/[disk]/[archive]/[ram_disk],default
281,dfs.journalnode.kerberos.internal.spnego.principal,dfs.journalnode.keytab.file,dfs.journalnode.keytab.file = ANY => dfs.journalnode.kerberos.internal.spnego.principal = ANY,default
282,dfs.namenode.rpc-address,dfs.namenode.servicerpc-address,dfs.namenode.servicerpc-address = null => dfs.namenode.servicerpc-address = dfs.namenode.rpc-address,default
283,dfs.client.failover.max.attempts,dfs.http.client.failover.sleep.base.millis,dfs.http.client.failover.sleep.base.millis = dfs.client.failover.sleep.base.millis,default
284,dfs.namenode.http-address,dfs.namenode.http-bind-host,dfs.namenode.http-bind-host = null => dfs.namenode.http-address = ANY,default
285,dfs.http.client.retry.policy.enabled,dfs.http.client.retry.max.attempts,dfs.http.client.retry.policy.enabled = true => dfs.http.client.retry.max.attempts > 0,default
286,dfs.encrypt.data.transfer,dfs.encrypt.data.transfer.cipher.suites,"dfs.encrypt.data.transfer = ""true"" => dfs.encrypt.data.transfer.cipher.suites != ""null""",default
287,dfs.client.failover.proxy.provider,dfs.client.failover.max.attempts,dfs.client.failover.max.attempts > 0 => dfs.client.failover.proxy.provider = ANY,value
288,dfs.data.transfer.protection,dfs.data.transfer.sasl.properties,"dfs.data.transfer.protection in {{integrity, privacy}} => dfs.data.transfer.sasl.properties in {{""QOP=auth-int"", ""QOP=auth-conf""}}",value
289,dfs.http.client.retry.policy.spec,dfs.http.client.failover.sleep.base.millis,"dfs.http.client.failover.sleep.base.millis > 0 => dfs.http.client.retry.policy.spec = ""sleepTime="" + dfs.http.client.failover.sleep.base.millis",value
290,dfs.qjournal.accept-recovery.timeout.ms,dfs.qjournal.select-input-streams.timeout.ms,dfs.qjournal.select-input-streams.timeout.ms = dfs.qjournal.accept-recovery.timeout.ms,value
291,dfs.qjm.operations.timeout,dfs.qjournal.new-epoch.timeout.ms,dfs.qjm.operations.timeout = dfs.qjournal.new-epoch.timeout.ms,value
292,dfs.client.read.shortcircuit.buffer.size,dfs.client.read.shortcircuit.streams.cache.size,dfs.client.read.shortcircuit.streams.cache.size > 256 => dfs.client.read.shortcircuit.buffer.size < 1048576,value
293,dfs.namenode.max-num-blocks-to-log,dfs.namenode.replication.max-streams-hard-limit,dfs.namenode.replication.max-streams-hard-limit > dfs.namenode.max-num-blocks-to-log => dfs.namenode.max-num-blocks-to-log < dfs.namenode.replication.max-streams-hard-limit,value
294,dfs.datanode.du.reserved,dfs.datanode.du.reserved.pct,dfs.datanode.du.reserved.pct > 0 => dfs.datanode.du.reserved = dfs.datanode.du.reserved.pct * total_disk_space,value
295,dfs.datanode.max.transfer.threads,dfs.datanode.handler.count,dfs.datanode.handler.count = ANY => dfs.datanode.max.transfer.threads > dfs.datanode.handler.count,value
296,dfs.image.transfer.chunksize,dfs.image.transfer.bandwidthPerSec,dfs.image.transfer.bandwidthPerSec > 0 => dfs.image.transfer.chunksize = (dfs.image.transfer.bandwidthPerSec * dfs.image.transfer.timeout),value
297,dfs.namenode.safemode.threshold-pct,dfs.namenode.safemode.min.datanodes,dfs.namenode.safemode.threshold-pct > 0 => dfs.namenode.safemode.min.datanodes > 0,value
298,dfs.namenode.retrycache.expirytime.millis,dfs.client.failover.sleep.max.millis,dfs.client.failover.sleep.max.millis < dfs.namenode.retrycache.expirytime.millis,value
299,dfs.balancer.moverThreads,dfs.balancer.max-no-move-interval,dfs.balancer.max-no-move-interval = ANY => dfs.balancer.moverThreads = ANY,value
300,dfs.namenode.resource.checked.volumes,dfs.namenode.resource.checked.volumes.minimum,dfs.namenode.resource.checked.volumes >= dfs.namenode.resource.checked.volumes.minimum,value
301,dfs.client.cache.drop.behind.reads,dfs.client.cache.drop.behind.writes,dfs.client.cache.drop.behind.writes = dfs.client.cache.drop.behind.reads,value
302,dfs.ha.tail-edits.period,dfs.ha.tail-edits.rolledits.timeout,dfs.ha.tail-edits.rolledits.timeout > 0 => dfs.ha.tail-edits.period > 0,value
303,dfs.datanode.hostname,dfs.datanode.address,"dfs.datanode.hostname != null => dfs.datanode.address = {dfs.datanode.hostname + "":50010""}",value
304,dfs.block.access.key.update.interval,dfs.block.access.token.lifetime,dfs.block.access.token.lifetime = X => dfs.block.access.key.update.interval < X,value
305,dfs.client.block.write.replace-datanode-on-failure.best-effort,dfs.client.block.write.replace-datanode-on-failure.min-replication,dfs.client.block.write.replace-datanode-on-failure.min-replication > 1 => dfs.client.block.write.replace-datanode-on-failure.best-effort = true,value
306,dfs.namenode.servicerpc-bind-host,dfs.namenode.http-bind-host,dfs.namenode.http-bind-host = ANY => dfs.namenode.servicerpc-bind-host = ANY,value
307,dfs.datanode.du.reserved.calculator,dfs.datanode.du.reserved.pct,dfs.datanode.du.reserved.calculator = ANY => dfs.datanode.du.reserved.pct = ANY,value
308,dfs.qjm.operations.timeout,dfs.qjournal.accept-recovery.timeout.ms,dfs.qjm.operations.timeout = dfs.qjournal.accept-recovery.timeout.ms,value
309,dfs.client.hedged.read.threshold.millis,dfs.client.hedged.read.threadpool.size,dfs.client.hedged.read.threadpool.size > 0 => dfs.client.hedged.read.threshold.millis > 0,value
310,dfs.balancer.max-no-move-interval,dfs.balancer.max-size-to-move,dfs.balancer.max-size-to-move > 0 => dfs.balancer.max-no-move-interval > 0,value
311,dfs.http.client.retry.policy.spec,dfs.http.client.failover.sleep.max.millis,"dfs.http.client.failover.sleep.max.millis > 0 => dfs.http.client.retry.policy.spec = ""maxSleepTime="" + dfs.http.client.failover.sleep.max.millis",value
312,dfs.namenode.replication.considerLoad,dfs.replication,dfs.namenode.replication.considerLoad = true => dfs.replication >= dfs.namenode.replication.min,value
313,dfs.secondary.namenode.kerberos.internal.spnego.principal,dfs.namenode.kerberos.internal.spnego.principal,dfs.secondary.namenode.kerberos.internal.spnego.principal = dfs.namenode.kerberos.internal.spnego.principal,value
314,dfs.qjournal.start-segment.timeout.ms,dfs.qjournal.select-input-streams.timeout.ms,dfs.qjournal.select-input-streams.timeout.ms = dfs.qjournal.start-segment.timeout.ms,value
315,dfs.datanode.address,dfs.datanode.http.address,dfs.datanode.address = ANY => dfs.datanode.http.address = ANY,value
316,dfs.balancer.keytab.file,dfs.http.policy,dfs.http.policy = HTTPS => dfs.balancer.keytab.file != null,value
317,dfs.client.read.shortcircuit,dfs.client.read.shortcircuit.skip.checksum,"dfs.client.read.shortcircuit = true => dfs.client.read.shortcircuit.skip.checksum in {true, false}",value
318,dfs.datanode.https.address,dfs.https.port,"dfs.https.port = <PortNumber> => dfs.datanode.https.address in {{ ""ANY:.."" + <PortNumber> + ""..ANY"" }}",value
319,dfs.namenode.lease-recheck-interval-ms,dfs.namenode.heartbeat.recheck-interval,dfs.namenode.heartbeat.recheck-interval > 0 => dfs.namenode.lease-recheck-interval-ms = dfs.namenode.heartbeat.recheck-interval * 1000,value
320,dfs.namenode.checkpoint.dir,dfs.namenode.checkpoint.period,dfs.namenode.checkpoint.period > 0 => dfs.namenode.checkpoint.dir != null,value
321,dfs.namenode.available-space-block-placement-policy.balanced-space-preference-fraction,dfs.datanode.available-space-volume-choosing-policy.balanced-space-preference-fraction,dfs.datanode.available-space-volume-choosing-policy.balanced-space-preference-fraction = dfs.namenode.available-space-block-placement-policy.balanced-space-preference-fraction,value
322,dfs.balancer.moverThreads,dfs.datanode.balance.max.concurrent.moves,dfs.datanode.balance.max.concurrent.moves = ANY => dfs.balancer.moverThreads = ANY,value
323,dfs.replication,dfs.replication.max,dfs.replication < dfs.replication.max,value
324,dfs.client.socketcache.capacity,dfs.blocksize,dfs.client.socketcache.capacity > {{ANY}} => dfs.blocksize > {{ANY}},value
325,dfs.namenode.service.handler.count,dfs.namenode.lifeline.handler.ratio,dfs.namenode.service.handler.count = dfs.namenode.handler.count * dfs.namenode.lifeline.handler.ratio,value
326,dfs.datanode.available-space-volume-choosing-policy.balanced-space-preference-fraction,dfs.datanode.available-space-volume-choosing-policy.balanced-space-threshold,dfs.datanode.available-space-volume-choosing-policy.balanced-space-threshold > 0 => dfs.datanode.available-space-volume-choosing-policy.balanced-space-preference-fraction = (0..1),value
327,dfs.datanode.du.reserved,dfs.namenode.resource.du.reserved,dfs.namenode.resource.du.reserved = dfs.datanode.du.reserved,value
328,dfs.qjm.operations.timeout,dfs.qjournal.finalize-segment.timeout.ms,dfs.qjm.operations.timeout = dfs.qjournal.finalize-segment.timeout.ms,value
329,dfs.client.failover.proxy.provider,dfs.client.failover.sleep.base.millis,dfs.client.failover.sleep.base.millis > 0 => dfs.client.failover.proxy.provider = ANY,value
330,dfs.namenode.http-address,dfs.datanode.use.datanode.hostname,dfs.datanode.use.datanode.hostname = true => dfs.namenode.http-address != ANY,value
331,dfs.block.access.key.update.interval,dfs.block.access.token.lifetime,dfs.block.access.token.lifetime > dfs.block.access.key.update.interval => dfs.block.access.key.update.interval < dfs.block.access.token.lifetime,value
332,dfs.namenode.kerberos.principal,dfs.web.authentication.kerberos.principal,dfs.namenode.kerberos.principal != null => dfs.web.authentication.kerberos.principal in { dfs.namenode.kerberos.principal },value
333,dfs.namenode.kerberos.principal.pattern,dfs.web.authentication.kerberos.principal,dfs.web.authentication.kerberos.principal = ANY => dfs.namenode.kerberos.principal.pattern = ANY,value
334,dfs.quota.by.storage.type.enabled,dfs.datanode.data.dir,dfs.quota.by.storage.type.enabled = true => dfs.datanode.data.dir contains [DISK]/[SSD]/[ARCHIVE],value
335,dfs.http.client.failover.sleep.base.millis,dfs.client.failover.sleep.max.millis,dfs.client.failover.sleep.max.millis > dfs.client.failover.sleep.base.millis,value
336,dfs.http.client.failover.sleep.base.millis,dfs.http.client.failover.sleep.max.millis,dfs.http.client.failover.sleep.max.millis > dfs.http.client.failover.sleep.base.millis,value
337,dfs.namenode.stale.datanode.minimum.interval,dfs.namenode.write.stale.datanode.ratio,dfs.namenode.write.stale.datanode.ratio > 0 => dfs.namenode.stale.datanode.minimum.interval > 0,value
338,dfs.qjm.operations.timeout,dfs.qjournal.select-input-streams.timeout.ms,dfs.qjm.operations.timeout = dfs.qjournal.select-input-streams.timeout.ms,value
339,dfs.datanode.hostname,dfs.datanode.http.address,"dfs.datanode.hostname != null => dfs.datanode.http.address = {dfs.datanode.hostname + "":50075""}",value
340,dfs.client.failover.max.attempts,dfs.client.failover.sleep.base.millis,dfs.client.failover.sleep.base.millis < dfs.client.failover.max.attempts * 1000,value
341,dfs.balancer.moverThreads,dfs.balancer.getBlocks.size,dfs.balancer.getBlocks.size = ANY => dfs.balancer.moverThreads = ANY,value
342,dfs.datanode.du.reserved.calculator,dfs.datanode.du.reserved,dfs.datanode.du.reserved.calculator = ANY => dfs.datanode.du.reserved = ANY,value
343,dfs.image.transfer-bootstrap-standby.bandwidthPerSec,dfs.datanode.balance.bandwidthPerSec,dfs.datanode.balance.bandwidthPerSec = dfs.image.transfer-bootstrap-standby.bandwidthPerSec,value
344,dfs.qjournal.accept-recovery.timeout.ms,dfs.qjournal.prepare-recovery.timeout.ms,dfs.qjournal.prepare-recovery.timeout.ms = dfs.qjournal.accept-recovery.timeout.ms,value
345,dfs.namenode.backup.http-address,dfs.namenode.https-address,dfs.namenode.https-address != null => dfs.namenode.backup.http-address in {ANY},value
346,dfs.balancer.address,dfs.balancer.dispatcherThreads,dfs.balancer.dispatcherThreads > 0 => dfs.balancer.address != null,value
347,dfs.replication.max,dfs.namenode.safemode.replication.min,dfs.replication.max > dfs.namenode.safemode.replication.min => dfs.namenode.safemode.replication.min = [1 .. dfs.replication.max],value
348,dfs.image.transfer-bootstrap-standby.bandwidthPerSec,dfs.image.transfer.bandwidthPerSec,dfs.image.transfer.bandwidthPerSec = dfs.image.transfer-bootstrap-standby.bandwidthPerSec,value
349,dfs.client.block.write.retries,dfs.client.block.write.locateFollowingBlock.retries,dfs.client.block.write.locateFollowingBlock.retries > 0 => dfs.client.block.write.retries > 0,value
350,dfs.data.transfer.protection,dfs.data.transfer.saslproperties.resolver.class,dfs.data.transfer.protection != null => dfs.data.transfer.saslproperties.resolver.class = ANY,value
351,dfs.qjournal.prepare-recovery.timeout.ms,dfs.qjournal.finalize-segment.timeout.ms,dfs.qjournal.finalize-segment.timeout.ms = dfs.qjournal.prepare-recovery.timeout.ms,value
352,dfs.client.block.write.replace-datanode-on-failure.min-replication,dfs.replication,dfs.replication > dfs.client.block.write.replace-datanode-on-failure.min-replication => dfs.client.block.write.replace-datanode-on-failure.min-replication < dfs.replication,value
353,dfs.webhdfs.oauth2.enabled,dfs.http.policy,dfs.http.policy = HTTPS_ONLY => dfs.webhdfs.oauth2.enabled = true,value
354,dfs.encrypt.data.transfer.cipher.key.bitlength,dfs.encrypt.data.transfer.cipher.suites,dfs.encrypt.data.transfer.cipher.suites != null => dfs.encrypt.data.transfer.cipher.key.bitlength != null,value
355,dfs.client.failover.proxy.provider,dfs.client.failover.sleep.max.millis,dfs.client.failover.sleep.max.millis > 0 => dfs.client.failover.proxy.provider = ANY,value
356,dfs.namenode.retrycache.expirytime.millis,dfs.client.failover.sleep.base.millis,dfs.client.failover.sleep.base.millis < dfs.namenode.retrycache.expirytime.millis,value
357,dfs.client.read.shortcircuit.skip.checksum,dfs.client.read.shortcircuit.streams.cache.size,dfs.client.read.shortcircuit.streams.cache.size > 0 => dfs.client.read.shortcircuit.skip.checksum = ANY,value
358,dfs.webhdfs.rest-csrf.enabled,dfs.webhdfs.rest-csrf.browser-useragents-regex,dfs.webhdfs.rest-csrf.enabled = true => dfs.webhdfs.rest-csrf.browser-useragents-regex != null,value
359,dfs.namenode.edits.journal-plugin.qjournal,dfs.qjournal.write-txns.timeout.ms,"dfs.qjournal.write-txns.timeout.ms > 0 => dfs.namenode.edits.journal-plugin.qjournal = ""ANY""",value
360,dfs.client.read.shortcircuit.buffer.size,dfs.client.read.short.circuit.replica.stale.threshold.ms,dfs.client.read.short.circuit.replica.stale.threshold.ms < 60000 => dfs.client.read.shortcircuit.buffer.size < 1048576,value
361,dfs.namenode.rpc-bind-host,dfs.namenode.servicerpc-bind-host,dfs.namenode.rpc-bind-host != null => dfs.namenode.servicerpc-bind-host = <Expression>,value
362,dfs.client.use.legacy.blockreader.local,dfs.client.use.legacy.blockreader,dfs.client.use.legacy.blockreader = true => dfs.client.use.legacy.blockreader.local = false,value
363,dfs.http.client.failover.max.attempts,dfs.http.client.failover.sleep.base.millis,dfs.http.client.failover.sleep.base.millis < dfs.http.client.failover.max.attempts,value
364,dfs.namenode.backup.http-address,dfs.namenode.http-address,dfs.namenode.http-address != null => dfs.namenode.backup.http-address in {ANY},value
365,dfs.mover.movedWinWidth,dfs.balancer.movedWinWidth,dfs.balancer.movedWinWidth = dfs.mover.movedWinWidth,value
366,dfs.qjournal.accept-recovery.timeout.ms,dfs.qjournal.write-txns.timeout.ms,dfs.qjournal.write-txns.timeout.ms = dfs.qjournal.accept-recovery.timeout.ms,value
367,dfs.namenode.top.window.num.buckets,dfs.namenode.top.windows.minutes,dfs.namenode.top.windows.minutes > 0 => dfs.namenode.top.window.num.buckets > 0,value
368,dfs.namenode.replication.max-streams,dfs.replication,dfs.replication > 1 => dfs.namenode.replication.max-streams > dfs.replication,value
369,dfs.datanode.drop.cache.behind.reads,dfs.datanode.drop.cache.behind.writes,dfs.datanode.drop.cache.behind.writes = dfs.datanode.drop.cache.behind.reads,value
370,dfs.client.block.write.replace-datanode-on-failure.policy,dfs.client.block.write.replace-datanode-on-failure.best-effort,dfs.client.block.write.replace-datanode-on-failure.best-effort = true => dfs.client.block.write.replace-datanode-on-failure.policy = ANY,value
371,dfs.webhdfs.rest-csrf.custom-header,dfs.webhdfs.rest-csrf.browser-useragents-regex,dfs.webhdfs.rest-csrf.custom-header != null => dfs.webhdfs.rest-csrf.browser-useragents-regex = ANY,value
372,dfs.namenode.edits.asynclogging,dfs.namenode.edits.toleration.length,dfs.namenode.edits.asynclogging = true => dfs.namenode.edits.toleration.length > [1024..65536],value
373,dfs.namenode.safemode.threshold-pct,dfs.namenode.safemode.extension,dfs.namenode.safemode.threshold-pct = 0 => dfs.namenode.safemode.extension = 0,value
374,dfs.client.block.write.retries,dfs.client.block.write.replace-datanode-on-failure.min-replication,dfs.client.block.write.replace-datanode-on-failure.min-replication > 1 => dfs.client.block.write.retries > 0,value
375,dfs.http.client.failover.max.attempts,dfs.http.client.failover.sleep.max.millis,dfs.http.client.failover.sleep.max.millis > dfs.http.client.failover.sleep.base.millis,value
376,dfs.client.failover.sleep.base.millis,dfs.client.failover.sleep.max.millis,dfs.client.failover.sleep.base.millis < dfs.client.failover.sleep.max.millis,value
377,dfs.namenode.http-bind-host,dfs.namenode.https-bind-host,dfs.namenode.http-bind-host != null => dfs.namenode.https-bind-host = <Expression>,value
378,dfs.datanode.https.address,dfs.https.port,"dfs.https.port = <Number> => dfs.datanode.https.address = <Expression> + "":"" + dfs.https.port",value
379,dfs.client.retry.window.base,dfs.client.retry.times.get-last-block-length,dfs.client.retry.window.base = <Expression> => dfs.client.retry.times.get-last-block-length = <Expression>,value
380,dfs.namenode.resource.checked.volumes.minimum,dfs.namenode.resource.du.reserved,dfs.namenode.resource.checked.volumes.minimum < dfs.namenode.resource.du.reserved => dfs.namenode.resource.du.reserved > dfs.namenode.resource.checked.volumes.minimum,value
381,dfs.http.port,dfs.https.port,dfs.http.port != dfs.https.port,value
382,dfs.webhdfs.netty.low.watermark,dfs.webhdfs.netty.high.watermark,dfs.webhdfs.netty.high.watermark > dfs.webhdfs.netty.low.watermark,value
383,dfs.namenode.max-num-blocks-to-log,dfs.namenode.replication.max-streams,dfs.namenode.replication.max-streams > dfs.namenode.max-num-blocks-to-log => dfs.namenode.max-num-blocks-to-log < dfs.namenode.replication.max-streams,value
384,dfs.namenode.delegation.token.always-use,dfs.namenode.delegation.token.max-lifetime,"dfs.namenode.delegation.token.max-lifetime > 0 => dfs.namenode.delegation.token.always-use in {true, false}",value
385,dfs.journalnode.http-address,dfs.journalnode.http-bind-host,"dfs.journalnode.http-bind-host != null => dfs.journalnode.http-address = ""ANY""",value
386,dfs.namenode.replication.pending.timeout-sec,dfs.replication,dfs.replication > dfs.namenode.replication.min => dfs.namenode.replication.pending.timeout-sec = ANY,value
387,dfs.client.block.write.retries,dfs.client.retry.max.attempts,dfs.client.retry.max.attempts > 0 => dfs.client.block.write.retries > 0,value
388,dfs.balancer.max-no-move-interval,dfs.mover.max-no-move-interval,dfs.mover.max-no-move-interval > 0 => dfs.balancer.max-no-move-interval > 0,value
389,dfs.namenode.rpc-bind-host,dfs.journalnode.rpc-bind-host,dfs.namenode.rpc-bind-host != null => dfs.journalnode.rpc-bind-host = <Expression>,value
390,dfs.namenode.handler.count,dfs.namenode.service.handler.count,dfs.namenode.service.handler.count = dfs.namenode.handler.count,value
391,dfs.client.write.byte-array-manager.count-reset-time-period-ms,dfs.client.write.byte-array-manager.count-threshold,dfs.client.write.byte-array-manager.count-threshold > 0 => dfs.client.write.byte-array-manager.count-reset-time-period-ms > 0,value
392,dfs.qjournal.start-segment.timeout.ms,dfs.qjournal.new-epoch.timeout.ms,dfs.qjournal.new-epoch.timeout.ms = dfs.qjournal.start-segment.timeout.ms,value
393,dfs.journalnode.https-address,dfs.journalnode.https-bind-host,dfs.journalnode.https-bind-host != null => dfs.journalnode.https-address = dfs.journalnode.https-bind-host:<PortExpression>,value
394,dfs.bytes-per-checksum,dfs.stream-buffer-size,dfs.bytes-per-checksum < dfs.stream-buffer-size,value
395,dfs.qjournal.get-journal-state.timeout.ms,dfs.qjournal.prepare-recovery.timeout.ms,dfs.qjournal.prepare-recovery.timeout.ms = dfs.qjournal.get-journal-state.timeout.ms,value
396,dfs.namenode.delegation.key.update-interval,dfs.namenode.delegation.token.renew-interval,dfs.namenode.delegation.token.renew-interval < dfs.namenode.delegation.key.update-interval,value
397,dfs.webhdfs.rest-csrf.enabled,dfs.webhdfs.rest-csrf.methods-to-ignore,"dfs.webhdfs.rest-csrf.enabled = true => dfs.webhdfs.rest-csrf.methods-to-ignore in {GET, HEAD, OPTIONS}",value
398,dfs.web.authentication.simple.anonymous.allowed,dfs.permissions.enabled,dfs.permissions.enabled = true => dfs.web.authentication.simple.anonymous.allowed = false,value
399,dfs.client.read.shortcircuit.skip.checksum,dfs.client.read.shortcircuit.streams.cache.expiry.ms,dfs.client.read.shortcircuit.streams.cache.expiry.ms > 0 => dfs.client.read.shortcircuit.skip.checksum = ANY,value
400,dfs.web.authentication.filter,dfs.http.policy,"dfs.web.authentication.filter != null => dfs.http.policy in {""HTTP_ONLY"", ""HTTPS_ONLY""}",value
401,dfs.namenode.max-num-blocks-to-log,dfs.namenode.max.op.size,dfs.namenode.max.op.size > dfs.namenode.max-num-blocks-to-log => dfs.namenode.max-num-blocks-to-log < dfs.namenode.max.op.size,value
402,dfs.namenode.edits.journal-plugin.qjournal,dfs.qjournal.start-segment.timeout.ms,"dfs.qjournal.start-segment.timeout.ms > 0 => dfs.namenode.edits.journal-plugin.qjournal = ""ANY""",value
403,dfs.namenode.num.extra.edits.retained,dfs.namenode.max.extra.edits.segments.retained,dfs.namenode.max.extra.edits.segments.retained = ANY => dfs.namenode.num.extra.edits.retained = ANY,value
404,dfs.client.read.shortcircuit,dfs.client.use.legacy.blockreader.local,"dfs.client.read.shortcircuit = true => dfs.client.use.legacy.blockreader.local in {true, false}",value
405,dfs.domain.socket.path,hbase.dfs.client.read.shortcircuit.buffer.size,dfs.client.read.shortcircuit = true => dfs.domain.socket.path != null,value
406,dfs.qjournal.get-journal-state.timeout.ms,dfs.qjournal.select-input-streams.timeout.ms,dfs.qjournal.select-input-streams.timeout.ms = dfs.qjournal.get-journal-state.timeout.ms,value
407,dfs.namenode.delegation.token.max-lifetime,dfs.namenode.delegation.token.renew-interval,dfs.namenode.delegation.token.renew-interval < dfs.namenode.delegation.token.max-lifetime,value
408,dfs.namenode.decommission.interval,dfs.namenode.decommission.max.concurrent.tracked.nodes,dfs.namenode.decommission.interval > 0 => dfs.namenode.decommission.max.concurrent.tracked.nodes > 0,value
409,dfs.client.retry.window.base,dfs.client.retry.interval-ms.get-last-block-length,dfs.client.retry.window.base = <Expression> => dfs.client.retry.interval-ms.get-last-block-length = <Expression>,value
410,dfs.namenode.top.num.users,dfs.namenode.top.windows.minutes,dfs.namenode.top.windows.minutes > 0 => dfs.namenode.top.num.users > 0,value
411,dfs.permissions.enabled,fs.permissions.umask-mode,"dfs.permissions.enabled = true => fs.permissions.umask-mode in {{022, 002, 077}}",value
412,dfs.namenode.kerberos.internal.spnego.principal,dfs.namenode.kerberos.principal,dfs.namenode.kerberos.principal = dfs.namenode.kerberos.internal.spnego.principal,value
413,dfs.namenode.edekcacheloader.initial.delay.ms,dfs.namenode.edekcacheloader.interval.ms,dfs.namenode.edekcacheloader.interval.ms > 0 => dfs.namenode.edekcacheloader.initial.delay.ms < dfs.namenode.edekcacheloader.interval.ms,value
414,dfs.namenode.edits.dir,dfs.namenode.checkpoint.edits.dir,dfs.namenode.checkpoint.edits.dir = ANY => dfs.namenode.edits.dir = ANY,value
415,dfs.http.client.failover.sleep.base.millis,dfs.http.client.failover.sleep.max.millis,dfs.http.client.failover.sleep.base.millis < dfs.http.client.failover.sleep.max.millis,value
416,dfs.cachereport.intervalMsec,dfs.blockreport.intervalMsec,dfs.blockreport.intervalMsec = dfs.cachereport.intervalMsec,value
417,dfs.internal.nameservices,dfs.ha.namenodes.EXAMPLENAMESERVICE,dfs.internal.nameservices in {dfs.ha.namenodes.EXAMPLENAMESERVICE},value
418,dfs.datanode.transfer.socket.send.buffer.size,dfs.datanode.transfer.socket.recv.buffer.size,dfs.datanode.transfer.socket.recv.buffer.size = dfs.datanode.transfer.socket.send.buffer.size,value
419,dfs.http.client.retry.policy.spec,dfs.http.client.retry.max.attempts,"dfs.http.client.retry.max.attempts > 0 => dfs.http.client.retry.policy.spec = ""maxRetries="" + dfs.http.client.retry.max.attempts",value
420,dfs.nameservice.id,dfs.internal.nameservices,dfs.nameservice.id in {dfs.internal.nameservices} => dfs.nameservice.id = ANY,value
421,dfs.client.retry.interval-ms.get-last-block-length,dfs.client.retry.times.get-last-block-length,dfs.client.retry.times.get-last-block-length > 0 => dfs.client.retry.interval-ms.get-last-block-length = ANY,value
422,dfs.client.failover.max.attempts,dfs.client.failover.connection.retries.on.timeouts,dfs.client.failover.connection.retries.on.timeouts < dfs.client.failover.max.attempts,value
423,dfs.namenode.retrycache.heap.percent,dfs.namenode.retrycache.expirytime.millis,dfs.namenode.retrycache.expirytime.millis > 0 => dfs.namenode.retrycache.heap.percent > 0,value
424,dfs.namenode.https-address,dfs.namenode.https-bind-host,"dfs.namenode.https-bind-host != null => dfs.namenode.https-address = dfs.namenode.https-bind-host + "":50470""",value
425,dfs.heartbeat.interval,dfs.namenode.heartbeat.recheck-interval,dfs.namenode.heartbeat.recheck-interval > dfs.heartbeat.interval,value
426,dfs.namenode.maintenance.replication.min,dfs.namenode.safemode.replication.min,dfs.namenode.maintenance.replication.min = <Singlevalue> => dfs.namenode.safemode.replication.min = <Singlevalue>,value
427,dfs.client.failover.random.order,dfs.client.failover.max.attempts,dfs.client.failover.max.attempts > 0 => dfs.client.failover.random.order = ANY,value
428,dfs.client.write.byte-array-manager.count-limit,dfs.client.write.byte-array-manager.count-threshold,dfs.client.write.byte-array-manager.count-threshold > 0 => dfs.client.write.byte-array-manager.count-limit > dfs.client.write.byte-array-manager.count-threshold,value
429,dfs.balancer.movedWinWidth,dfs.balancer.dispatcherThreads,dfs.balancer.dispatcherThreads > 0 => dfs.balancer.movedWinWidth = ANY,value
430,dfs.namenode.service.handler.count,dfs.namenode.lifeline.handler.count,dfs.namenode.service.handler.count = dfs.namenode.lifeline.handler.count + dfs.namenode.handler.count,value
431,dfs.namenode.servicerpc-address,dfs.namenode.rpc-address,dfs.namenode.rpc-address != null => dfs.namenode.servicerpc-address != dfs.namenode.rpc-address,value
432,dfs.client.failover.sleep.base.millis,dfs.client.failover.sleep.max.millis,dfs.client.failover.sleep.base.millis < dfs.client.failover.sleep.max.millis,value
433,dfs.blocksize,dfs.namenode.fs-limits.min-block-size,dfs.namenode.fs-limits.min-block-size < dfs.blocksize,value
434,dfs.block.invalidate.limit,dfs.namenode.replication.work.multiplier.per.iteration,dfs.namenode.replication.work.multiplier.per.iteration > 0 => dfs.block.invalidate.limit = dfs.namenode.replication.work.multiplier.per.iteration * ANY,value
435,dfs.replication,dfs.namenode.safemode.replication.min,dfs.replication > dfs.namenode.safemode.replication.min,value
436,dfs.qjournal.accept-recovery.timeout.ms,dfs.qjournal.finalize-segment.timeout.ms,dfs.qjournal.finalize-segment.timeout.ms = dfs.qjournal.accept-recovery.timeout.ms,value
437,dfs.namenode.replication.considerLoad,dfs.namenode.replication.considerLoad.factor,dfs.namenode.replication.considerLoad = true => dfs.namenode.replication.considerLoad.factor > 0,value
438,dfs.balancer.kerberos.principal,dfs.http.policy,dfs.balancer.kerberos.principal != null => dfs.http.policy in {HTTPS_ONLY},value
439,dfs.namenode.rpc-bind-host,dfs.namenode.lifeline.rpc-bind-host,dfs.namenode.rpc-bind-host != null => dfs.namenode.lifeline.rpc-bind-host = <Expression>,value
440,dfs.datanode.address,dfs.datanode.https.address,dfs.datanode.address = ANY => dfs.datanode.https.address = ANY,value
441,dfs.datanode.transfer.socket.send.buffer.size,dfs.client.socket.send.buffer.size,dfs.client.socket.send.buffer.size = dfs.datanode.transfer.socket.send.buffer.size,value
442,dfs.datanode.fsdataset.volume.choosing.policy,dfs.datanode.available-space-volume-choosing-policy.balanced-space-preference-fraction,"dfs.datanode.fsdataset.volume.choosing.policy = ""AvailableSpaceVolumeChoosingPolicy"" => dfs.datanode.available-space-volume-choosing-policy.balanced-space-preference-fraction in [0.0..1.0]",value
443,dfs.https.port,dfs.namenode.https-address,"dfs.namenode.https-address = ""ANY"" => dfs.https.port = <Singlevalue>",value
444,dfs.namenode.kerberos.principal.pattern,dfs.namenode.kerberos.principal,dfs.namenode.kerberos.principal = ANY => dfs.namenode.kerberos.principal.pattern = ANY,value
445,dfs.webhdfs.use.ipc.callq,dfs.datanode.use.datanode.hostname,dfs.datanode.use.datanode.hostname = true => dfs.webhdfs.use.ipc.callq != true,value
446,dfs.blockreport.intervalMsec,dfs.blockreport.split.threshold,dfs.blockreport.split.threshold > 0 => dfs.blockreport.intervalMsec < dfs.blockreport.split.threshold * 1000,value
447,dfs.namenode.rpc-bind-host,dfs.namenode.http-bind-host,dfs.namenode.rpc-bind-host != null => dfs.namenode.http-bind-host = <Expression>,value
448,dfs.client.read.shortcircuit,dfs.client.domain.socket.data.traffic,"dfs.client.read.shortcircuit = true => dfs.client.domain.socket.data.traffic in {true, false}",value
449,dfs.namenode.stale.datanode.interval,dfs.namenode.heartbeat.recheck-interval,dfs.namenode.heartbeat.recheck-interval > 0 => dfs.namenode.stale.datanode.interval > dfs.namenode.heartbeat.recheck-interval,value
450,dfs.balancer.getBlocks.min-block-size,dfs.namenode.fs-limits.min-block-size,dfs.namenode.fs-limits.min-block-size < dfs.balancer.getBlocks.min-block-size => dfs.balancer.getBlocks.min-block-size > dfs.namenode.fs-limits.min-block-size,value
451,dfs.client.read.shortcircuit,dfs.client.read.shortcircuit.buffer.size,dfs.client.read.shortcircuit = true => dfs.client.read.shortcircuit.buffer.size > 0,value
452,dfs.namenode.stale.datanode.interval,dfs.namenode.write.stale.datanode.ratio,dfs.namenode.write.stale.datanode.ratio > 0 => dfs.namenode.stale.datanode.interval > 0,value
453,dfs.ha.zkfc.port,dfs.ha.zkfc.port,dfs.ha.zkfc.port = dfs.ha.zkfc.port,value
454,dfs.client.write.max-packets-in-flight,dfs.client.block.write.replace-datanode-on-failure.min-replication,dfs.client.block.write.replace-datanode-on-failure.min-replication > 1 => dfs.client.write.max-packets-in-flight < 100,value
455,dfs.namenode.rpc-bind-host,dfs.namenode.https-bind-host,dfs.namenode.rpc-bind-host != null => dfs.namenode.https-bind-host = <Expression>,value
456,dfs.data.transfer.protection,dfs.encrypt.data.transfer.cipher.key.bitlength,dfs.encrypt.data.transfer = true => dfs.encrypt.data.transfer.cipher.key.bitlength = ANY,value
457,dfs.balancer.max-no-move-interval,dfs.balancer.movedWinWidth,dfs.balancer.movedWinWidth > 0 => dfs.balancer.max-no-move-interval > 0,value
458,dfs.client.domain.socket.data.traffic,dfs.client.read.shortcircuit.streams.cache.size,dfs.client.read.shortcircuit.streams.cache.size > 0 => dfs.client.domain.socket.data.traffic = true,value
459,dfs.client.failover.proxy.provider,dfs.client.failover.random.order,dfs.client.failover.random.order = true => dfs.client.failover.proxy.provider = ANY,value
460,dfs.qjournal.get-journal-state.timeout.ms,dfs.qjournal.write-txns.timeout.ms,dfs.qjournal.write-txns.timeout.ms = dfs.qjournal.get-journal-state.timeout.ms,value
461,dfs.qjournal.accept-recovery.timeout.ms,dfs.qjournal.get-journal-state.timeout.ms,dfs.qjournal.get-journal-state.timeout.ms = dfs.qjournal.accept-recovery.timeout.ms,value
462,dfs.namenode.edits.dir.minimum,dfs.namenode.edits.dir,dfs.namenode.edits.dir.minimum = 1 => dfs.namenode.edits.dir in {valid_directories},value
463,dfs.client.block.write.replace-datanode-on-failure.policy,dfs.client.block.write.replace-datanode-on-failure.min-replication,dfs.client.block.write.replace-datanode-on-failure.min-replication < dfs.replication => dfs.client.block.write.replace-datanode-on-failure.policy = ANY,value
464,dfs.client.failover.sleep.base.millis,dfs.http.client.failover.sleep.max.millis,dfs.client.failover.sleep.base.millis < dfs.http.client.failover.sleep.max.millis,value
465,dfs.client.retry.max.attempts,dfs.client.failover.max.attempts,dfs.client.failover.max.attempts > 0 => dfs.client.retry.max.attempts = (dfs.client.failover.max.attempts + 1),value
466,dfs.blockreport.intervalMsec,dfs.heartbeat.interval,dfs.heartbeat.interval > 0 => dfs.blockreport.intervalMsec = dfs.heartbeat.interval * 3,value
467,dfs.stream-buffer-size,dfs.client-write-packet-size,dfs.stream-buffer-size < dfs.client-write-packet-size => dfs.client-write-packet-size > dfs.stream-buffer-size,value
468,dfs.client.failover.max.attempts,dfs.client.failover.connection.retries,dfs.client.failover.connection.retries < dfs.client.failover.max.attempts,value
469,dfs.client.read.shortcircuit,dfs.client.read.shortcircuit.streams.cache.expiry.ms,dfs.client.read.shortcircuit = true => dfs.client.read.shortcircuit.streams.cache.expiry.ms > 0,value
470,dfs.replication,dfs.replication.max,dfs.replication < dfs.replication.max,value
471,dfs.namenode.lifeline.handler.ratio,dfs.namenode.handler.count,dfs.namenode.lifeline.handler.ratio > 0 => dfs.namenode.handler.count = dfs.namenode.lifeline.handler.count / dfs.namenode.lifeline.handler.ratio,value
472,dfs.bytes-per-checksum,dfs.client-write-packet-size,dfs.bytes-per-checksum < dfs.client-write-packet-size,value
473,dfs.qjm.operations.timeout,dfs.qjournal.prepare-recovery.timeout.ms,dfs.qjm.operations.timeout = dfs.qjournal.prepare-recovery.timeout.ms,value
474,dfs.http.client.retry.max.attempts,dfs.http.client.failover.max.attempts,dfs.http.client.failover.max.attempts > 0 => dfs.http.client.retry.max.attempts > dfs.http.client.failover.max.attempts,value
475,dfs.qjm.operations.timeout,dfs.qjournal.write-txns.timeout.ms,dfs.qjm.operations.timeout = dfs.qjournal.write-txns.timeout.ms,value
476,dfs.namenode.checkpoint.dir,dfs.namenode.num.checkpoints.retained,dfs.namenode.num.checkpoints.retained > 0 => dfs.namenode.checkpoint.dir != null,value
477,dfs.image.transfer.timeout,dfs.image.transfer.chunksize,dfs.image.transfer.chunksize > 0 => dfs.image.transfer.timeout = ANY,value
478,dfs.qjournal.get-journal-state.timeout.ms,dfs.qjournal.new-epoch.timeout.ms,dfs.qjournal.new-epoch.timeout.ms = dfs.qjournal.get-journal-state.timeout.ms,value
479,dfs.namenode.fs-limits.max-xattrs-per-inode,dfs.namenode.fs-limits.max-xattr-size,dfs.namenode.fs-limits.max-xattr-size > 0 => dfs.namenode.fs-limits.max-xattrs-per-inode > 0,value
480,dfs.namenode.servicerpc-bind-host,dfs.namenode.https-bind-host,dfs.namenode.https-bind-host = ANY => dfs.namenode.servicerpc-bind-host = ANY,value
481,dfs.http.client.failover.sleep.max.millis,dfs.client.failover.sleep.base.millis,dfs.client.failover.sleep.base.millis < dfs.http.client.failover.sleep.max.millis,value
482,dfs.namenode.secondary.https-address,dfs.namenode.https-address,dfs.namenode.https-address != null => dfs.namenode.secondary.https-address != null,value
483,dfs.datanode.https.address,datanode.https.port,"datanode.https.port = <Number> => dfs.datanode.https.address = <Expression> + "":"" + datanode.https.port",value
484,dfs.image.transfer.timeout,dfs.image.transfer.bandwidthPerSec,dfs.image.transfer.bandwidthPerSec > 0 => dfs.image.transfer.timeout = ANY,value
485,dfs.replication.max,dfs.replication.min,dfs.replication.max > dfs.replication.min,value
486,dfs.qjournal.start-segment.timeout.ms,dfs.qjournal.write-txns.timeout.ms,dfs.qjournal.write-txns.timeout.ms = dfs.qjournal.start-segment.timeout.ms,value
487,dfs.https.server.keystore.resource,dfs.https.server.keystore.type,"dfs.https.server.keystore.resource != null => dfs.https.server.keystore.type in {{""JKS"", ""PKCS12""}}",value
488,dfs.namenode.safemode.min.datanodes,dfs.namenode.safemode.extension,dfs.namenode.safemode.extension > 0 => dfs.namenode.safemode.min.datanodes > 0,value
489,dfs.balancer.getBlocks.min-block-size,dfs.blocksize,dfs.blocksize > dfs.balancer.getBlocks.min-block-size => dfs.balancer.getBlocks.min-block-size < dfs.blocksize,value
490,dfs.client.read.shortcircuit,dfs.client.read.short.circuit.replica.stale.threshold.ms,dfs.client.read.shortcircuit = true => dfs.client.read.short.circuit.replica.stale.threshold.ms > 0,value
491,dfs.qjm.operations.timeout,dfs.qjournal.start-segment.timeout.ms,dfs.qjm.operations.timeout = dfs.qjournal.start-segment.timeout.ms,value
492,dfs.namenode.avoid.read.stale.datanode,dfs.namenode.avoid.write.stale.datanode,dfs.namenode.avoid.write.stale.datanode = true => dfs.namenode.avoid.read.stale.datanode = true,value
493,dfs.replication.max,dfs.namenode.maintenance.replication.min,dfs.replication.max > dfs.namenode.maintenance.replication.min => dfs.namenode.maintenance.replication.min = [1 .. dfs.replication.max],value
494,dfs.qjournal.get-journal-state.timeout.ms,dfs.qjournal.start-segment.timeout.ms,dfs.qjournal.start-segment.timeout.ms = dfs.qjournal.get-journal-state.timeout.ms,value
495,dfs.datanode.ipc.address,dfs.datanode.https.address,dfs.datanode.ipc.address = dfs.datanode.https.address,value
496,dfs.datanode.max.transfer.threads,dfs.datanode.balance.bandwidthPerSec,dfs.datanode.balance.bandwidthPerSec = ANY => dfs.datanode.max.transfer.threads > (dfs.datanode.balance.bandwidthPerSec / 1048576),value
497,dfs.namenode.delegation.token.always-use,dfs.namenode.delegation.token.renew-interval,"dfs.namenode.delegation.token.renew-interval > 0 => dfs.namenode.delegation.token.always-use in {true, false}",value
498,dfs.namenode.top.window.num.buckets,dfs.namenode.top.num.users,dfs.namenode.top.num.users > 0 => dfs.namenode.top.window.num.buckets > 0,value
499,dfs.namenode.lifeline.handler.ratio,dfs.namenode.lifeline.handler.count,dfs.namenode.lifeline.handler.ratio > 0 => dfs.namenode.lifeline.handler.count = dfs.namenode.handler.count * dfs.namenode.lifeline.handler.ratio,value
500,dfs.namenode.decommission.blocks.per.interval,dfs.namenode.decommission.max.concurrent.tracked.nodes,dfs.namenode.decommission.max.concurrent.tracked.nodes > 0 => dfs.namenode.decommission.blocks.per.interval > 0,value
501,dfs.internal.nameservices,dfs.ha.namenode.id,dfs.internal.nameservices in {dfs.ha.namenode.id},value
502,dfs.webhdfs.acl.provider.permission.pattern,dfs.webhdfs.user.provider.user.pattern,dfs.webhdfs.user.provider.user.pattern = ANY => dfs.webhdfs.acl.provider.permission.pattern = ANY,value
503,dfs.client.cache.drop.behind.writes,dfs.datanode.drop.cache.behind.reads,dfs.client.cache.drop.behind.writes = true => dfs.datanode.drop.cache.behind.reads = true,value
504,dfs.namenode.resource.checked.volumes,dfs.namenode.resource.du.reserved,dfs.namenode.resource.checked.volumes > 0 => dfs.namenode.resource.du.reserved > 0,value
505,dfs.qjournal.prepare-recovery.timeout.ms,dfs.qjournal.write-txns.timeout.ms,dfs.qjournal.write-txns.timeout.ms = dfs.qjournal.prepare-recovery.timeout.ms,value
506,dfs.webhdfs.oauth2.access.token.provider,dfs.webhdfs.oauth2.client.id,dfs.webhdfs.oauth2.client.id != null => dfs.webhdfs.oauth2.access.token.provider != null,value
507,dfs.image.transfer.bandwidthPerSec,dfs.datanode.balance.bandwidthPerSec,dfs.image.transfer.bandwidthPerSec > 0 => dfs.image.transfer.bandwidthPerSec < dfs.datanode.balance.bandwidthPerSec,value
508,dfs.client.socketcache.capacity,dfs.client.socket-timeout,dfs.client.socket-timeout > 0 => dfs.client.socketcache.capacity > 0,value
509,dfs.namenode.replication.pending.timeout-sec,dfs.namenode.replication.min,dfs.namenode.replication.min < dfs.replication => dfs.namenode.replication.pending.timeout-sec = ANY,value
510,dfs.encrypt.data.transfer.cipher.suites,dfs.encrypt.data.transfer.cipher.key.bitlength,"dfs.encrypt.data.transfer.cipher.suites != null => dfs.encrypt.data.transfer.cipher.key.bitlength in {128, 192, 256}",value
511,dfs.client.retry.interval-ms.get-last-block-length,dfs.client.retry.max.attempts,dfs.client.retry.max.attempts > 0 => dfs.client.retry.interval-ms.get-last-block-length = ANY,value
512,dfs.client.block.write.replace-datanode-on-failure.min-replication,dfs.replication,dfs.client.block.write.replace-datanode-on-failure.min-replication < dfs.replication,value
513,dfs.journalnode.kerberos.principal,dfs.journalnode.kerberos.realm,dfs.journalnode.kerberos.principal = <principal>@<realm> => dfs.journalnode.kerberos.realm = <realm>,value
514,dfs.qjournal.prepare-recovery.timeout.ms,dfs.qjournal.new-epoch.timeout.ms,dfs.qjournal.new-epoch.timeout.ms = dfs.qjournal.prepare-recovery.timeout.ms,value
515,dfs.balancer.getBlocks.size,dfs.balancer.getBlocks.min-block-size,dfs.balancer.getBlocks.min-block-size < dfs.balancer.getBlocks.size,value
516,dfs.qjournal.get-journal-state.timeout.ms,dfs.qjournal.finalize-segment.timeout.ms,dfs.qjournal.finalize-segment.timeout.ms = dfs.qjournal.get-journal-state.timeout.ms,value
517,dfs.webhdfs.oauth2.access.token.provider,dfs.webhdfs.oauth2.refresh.url,dfs.webhdfs.oauth2.refresh.url != null => dfs.webhdfs.oauth2.access.token.provider != null,value
518,dfs.encrypt.data.transfer.algorithm,dfs.encrypt.data.transfer.cipher.key.bitlength,"dfs.encrypt.data.transfer.algorithm = ""AES/CTR/NoPadding"" => dfs.encrypt.data.transfer.cipher.key.bitlength in {128, 192, 256}",value
519,dfs.client.read.short.circuit.replica.stale.threshold.ms,dfs.client.read.short.circuit.replica.stale.threshold.ms,dfs.client.read.short.circuit.replica.stale.threshold.ms = dfs.client.read.short.circuit.replica.stale.threshold.ms,value
520,dfs.namenode.replication.min,dfs.namenode.maintenance.replication.min,dfs.namenode.replication.min < dfs.namenode.maintenance.replication.min,value
521,dfs.balancer.moverThreads,dfs.balancer.max-size-to-move,dfs.balancer.max-size-to-move = ANY => dfs.balancer.moverThreads = ANY,value
522,dfs.namenode.delegation.token.always-use,dfs.namenode.delegation.key.update-interval,"dfs.namenode.delegation.key.update-interval > 0 => dfs.namenode.delegation.token.always-use in {true, false}",value
523,dfs.client.retry.times.get-last-block-length,dfs.client.retry.max.attempts,dfs.client.retry.max.attempts = ANY => dfs.client.retry.times.get-last-block-length = ANY,value
524,dfs.balancer.movedWinWidth,dfs.balancer.max-size-to-move,dfs.balancer.max-size-to-move > 0 => dfs.balancer.movedWinWidth = ANY,value
525,dfs.client.block.write.locateFollowingBlock.initial.delay.ms,dfs.client.block.write.locateFollowingBlock.retries,dfs.client.block.write.locateFollowingBlock.retries > 0 => dfs.client.block.write.locateFollowingBlock.initial.delay.ms = ANY,value
526,dfs.namenode.http-address,dfs.client.use.datanode.hostname,dfs.client.use.datanode.hostname = true => dfs.namenode.http-address != ANY,value
527,dfs.datanode.fsdataset.volume.choosing.policy,dfs.datanode.available-space-volume-choosing-policy.balanced-space-threshold,"dfs.datanode.fsdataset.volume.choosing.policy = ""AvailableSpaceVolumeChoosingPolicy"" => dfs.datanode.available-space-volume-choosing-policy.balanced-space-threshold > 0",value
528,dfs.namenode.secondary.https-address,dfs.namenode.https-bind-host,dfs.namenode.https-bind-host != null => dfs.namenode.secondary.https-address != null,value
529,dfs.client.failover.random.order,dfs.client.failover.sleep.base.millis,dfs.client.failover.sleep.base.millis > 0 => dfs.client.failover.random.order = ANY,value
530,dfs.http.client.retry.policy.spec,dfs.http.client.failover.max.attempts,"dfs.http.client.failover.max.attempts > 0 => dfs.http.client.retry.policy.spec = ""maxRetries="" + dfs.http.client.failover.max.attempts",value
531,dfs.encrypt.data.transfer.algorithm,dfs.encrypt.data.transfer.cipher.suites,"dfs.encrypt.data.transfer.algorithm = ""AES/CTR/NoPadding"" => dfs.encrypt.data.transfer.cipher.suites in {""AES/CTR/NoPadding""}",value
532,dfs.qjournal.prepare-recovery.timeout.ms,dfs.qjournal.select-input-streams.timeout.ms,dfs.qjournal.select-input-streams.timeout.ms = dfs.qjournal.prepare-recovery.timeout.ms,value
533,dfs.client.failover.random.order,dfs.client.failover.sleep.max.millis,dfs.client.failover.sleep.max.millis > 0 => dfs.client.failover.random.order = ANY,value
534,dfs.namenode.checkpoint.dir,dfs.namenode.checkpoint.txns,dfs.namenode.checkpoint.txns > 0 => dfs.namenode.checkpoint.dir != null,value
535,dfs.balancer.max-no-move-interval,dfs.balancer.dispatcherThreads,dfs.balancer.dispatcherThreads > 0 => dfs.balancer.max-no-move-interval > 0,value
536,dfs.balancer.block-move.timeout,dfs.balancer.max-size-to-move,dfs.balancer.max-size-to-move > 0 => dfs.balancer.block-move.timeout = ANY,value
537,dfs.mover.max-no-move-interval,dfs.mover.max-no-move-interval,dfs.mover.max-no-move-interval = dfs.balancer.max-no-move-interval,value
538,dfs.replication.max,dfs.namenode.replication.min,dfs.replication.max > dfs.namenode.replication.min => dfs.namenode.replication.min = [1 .. dfs.replication.max],value
539,dfs.namenode.safemode.min.datanodes,dfs.namenode.safemode.replication.min,dfs.namenode.safemode.replication.min > 0 => dfs.namenode.safemode.min.datanodes > 0,value
540,dfs.datanode.ipc.address,dfs.datanode.http.address,dfs.datanode.ipc.address = dfs.datanode.http.address,value
541,dfs.namenode.resource.du.reserved,dfs.datanode.du.reserved.pct,dfs.datanode.du.reserved.pct in [0..100] => dfs.namenode.resource.du.reserved = dfs.datanode.du.reserved * (dfs.datanode.du.reserved.pct / 100),value
542,dfs.balancer.dispatcherThreads,dfs.balancer.moverThreads,dfs.balancer.moverThreads = dfs.balancer.dispatcherThreads,value
543,dfs.webhdfs.rest-csrf.enabled,dfs.webhdfs.rest-csrf.custom-header,dfs.webhdfs.rest-csrf.enabled = true => dfs.webhdfs.rest-csrf.custom-header != null,value
544,dfs.namenode.delegation.key.update-interval,dfs.namenode.delegation.token.max-lifetime,dfs.namenode.delegation.token.max-lifetime > dfs.namenode.delegation.key.update-interval,value
545,dfs.ha.fencing.ssh.connect-timeout,ha.health-monitor.rpc-timeout.ms,ha.health-monitor.rpc-timeout.ms > dfs.ha.fencing.ssh.connect-timeout => dfs.ha.fencing.ssh.connect-timeout < ha.health-monitor.rpc-timeout.ms,value
546,dfs.webhdfs.socket.read-timeout,dfs.webhdfs.socket.connect-timeout,dfs.webhdfs.socket.connect-timeout = dfs.webhdfs.socket.read-timeout,value
547,dfs.ha.fencing.methods,dfs.namenode.handler.count,"dfs.namenode.handler.count > 10 => dfs.ha.fencing.methods in {""shell(/path/to/script)"", ""sshfence""}",value
548,dfs.client.domain.socket.data.traffic,dfs.client.read.shortcircuit.skip.checksum,dfs.client.read.shortcircuit.skip.checksum = true => dfs.client.domain.socket.data.traffic = true,value
549,dfs.client.retry.window.base,dfs.client.failover.sleep.base.millis,dfs.client.retry.window.base = <Expression> => dfs.client.failover.sleep.base.millis = <Expression>,value
550,dfs.namenode.decommission.interval,dfs.namenode.decommission.blocks.per.interval,dfs.namenode.decommission.interval > 0 => dfs.namenode.decommission.blocks.per.interval > 0,value
551,dfs.journalnode.rpc-address,dfs.journalnode.http-address,dfs.journalnode.rpc-address != null => dfs.journalnode.http-address != null,value
552,dfs.namenode.edits.dir,dfs.namenode.shared.edits.dir,dfs.namenode.shared.edits.dir = ANY => dfs.namenode.edits.dir = ANY,value
553,dfs.http.port,datanode.https.port,dfs.http.port != datanode.https.port,value
554,dfs.balancer.dispatcherThreads,dfs.datanode.balance.max.concurrent.moves,dfs.datanode.balance.max.concurrent.moves = dfs.balancer.dispatcherThreads,value
555,dfs.datanode.drop.cache.behind.writes,dfs.client.cache.drop.behind.writes,dfs.client.cache.drop.behind.writes = ANY => dfs.datanode.drop.cache.behind.writes = ANY,value
556,dfs.webhdfs.rest-csrf.custom-header,dfs.webhdfs.rest-csrf.methods-to-ignore,"dfs.webhdfs.rest-csrf.custom-header != null => dfs.webhdfs.rest-csrf.methods-to-ignore in {GET, POST, PUT, DELETE}",value
557,dfs.client.failover.max.attempts,dfs.client.failover.sleep.max.millis,dfs.client.failover.sleep.max.millis > dfs.client.failover.sleep.base.millis,value
558,dfs.client.slow.io.warning.threshold.ms,dfs.datanode.slow.io.warning.threshold.ms,dfs.datanode.slow.io.warning.threshold.ms = dfs.client.slow.io.warning.threshold.ms,value
559,dfs.namenode.stale.datanode.minimum.interval,dfs.namenode.stale.datanode.interval,dfs.namenode.stale.datanode.minimum.interval > 0 => dfs.namenode.stale.datanode.interval = (dfs.namenode.stale.datanode.minimum.interval * dfs.heartbeat.interval),value
560,dfs.namenode.rpc-address,dfs.http.policy,dfs.http.policy = HTTPS => dfs.namenode.rpc-address != null,value
561,dfs.datanode.address,dfs.datanode.ipc.address,dfs.datanode.address = ANY => dfs.datanode.ipc.address = ANY,value
562,dfs.client.write.byte-array-manager.count-limit,dfs.client.write.byte-array-manager.count-reset-time-period-ms,dfs.client.write.byte-array-manager.count-reset-time-period-ms > 0 => dfs.client.write.byte-array-manager.count-limit = ANY,value
563,dfs.qjm.operations.timeout,dfs.qjournal.get-journal-state.timeout.ms,dfs.qjm.operations.timeout = dfs.qjournal.get-journal-state.timeout.ms,value
564,dfs.client.write.byte-array-manager.enabled,dfs.client.write.byte-array-manager.count-threshold,dfs.client.write.byte-array-manager.enabled = true => dfs.client.write.byte-array-manager.count-threshold > 0,value
565,dfs.balancer.moverThreads,dfs.balancer.block-move.timeout,dfs.balancer.block-move.timeout = ANY => dfs.balancer.moverThreads = ANY,value
566,dfs.client.retry.policy.enabled,dfs.client.retry.policy.spec,dfs.client.retry.policy.enabled = true => dfs.client.retry.policy.spec != null,value
567,dfs.namenode.secondary.http-address,dfs.namenode.secondary.https-address,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.namenode.secondary.https-address != null",value
568,dfs.webhdfs.use.ipc.callq,dfs.client.use.datanode.hostname,dfs.client.use.datanode.hostname = true => dfs.webhdfs.use.ipc.callq != true,value
569,dfs.namenode.max.full.block.report.leases,dfs.namenode.full.block.report.lease.length.ms,dfs.namenode.full.block.report.lease.length.ms > 0 => dfs.namenode.max.full.block.report.leases = ANY,value
570,dfs.namenode.rpc-address,dfs.client.use.datanode.hostname,dfs.client.use.datanode.hostname = true => dfs.namenode.rpc-address != null,value
571,dfs.bytes-per-checksum,dfs.blocksize,dfs.bytes-per-checksum < dfs.blocksize,value
572,dfs.client.write.max-packets-in-flight,dfs.client.write.byte-array-manager.count-threshold,dfs.client.write.byte-array-manager.count-threshold > 0 => dfs.client.write.max-packets-in-flight < 1000,value
573,dfs.block.invalidate.limit,dfs.block.misreplication.processing.limit,dfs.block.misreplication.processing.limit > 0 => dfs.block.invalidate.limit < dfs.block.misreplication.processing.limit,value
574,dfs.checksum.type,dfs.bytes-per-checksum,dfs.bytes-per-checksum = dfs.checksum.type => dfs.bytes-per-checksum = ANY,value
575,dfs.blocksize,dfs.client.read.shortcircuit.buffer.size,dfs.blocksize > 0 => dfs.client.read.shortcircuit.buffer.size = 1048576,value
576,dfs.journalnode.rpc-address,dfs.journalnode.https-address,dfs.journalnode.rpc-address != null => dfs.journalnode.https-address != null,value
577,dfs.balancer.moverThreads,dfs.balancer.getBlocks.min-block-size,dfs.balancer.getBlocks.min-block-size = ANY => dfs.balancer.moverThreads = ANY,value
578,dfs.namenode.replication.max-streams,dfs.namenode.replication.max-streams-hard-limit,dfs.namenode.replication.max-streams < dfs.namenode.replication.max-streams-hard-limit,value
579,dfs.replication.max,dfs.namenode.replication.min,dfs.replication.max > dfs.namenode.replication.min,value
580,dfs.client.retry.policy.spec,dfs.client.socket-timeout,dfs.client.socket-timeout = <Number> => dfs.client.retry.policy.spec = <Expression>,value
581,dfs.namenode.handler.count,dfs.datanode.handler.count,dfs.datanode.handler.count = dfs.namenode.handler.count,value
582,dfs.replication,dfs.namenode.replication.min,dfs.replication > dfs.namenode.replication.min,value
583,dfs.secondary.namenode.kerberos.internal.spnego.principal,dfs.journalnode.kerberos.internal.spnego.principal,dfs.secondary.namenode.kerberos.internal.spnego.principal = dfs.journalnode.kerberos.internal.spnego.principal,value
584,dfs.qjournal.start-segment.timeout.ms,dfs.qjournal.finalize-segment.timeout.ms,dfs.qjournal.finalize-segment.timeout.ms = dfs.qjournal.start-segment.timeout.ms,value
585,dfs.datanode.drop.cache.behind.reads,dfs.client.cache.drop.behind.reads,dfs.client.cache.drop.behind.reads = dfs.datanode.drop.cache.behind.reads,value
586,dfs.blockreport.intervalMsec,dfs.blockreport.incremental.intervalMsec,dfs.blockreport.incremental.intervalMsec > 0 => dfs.blockreport.intervalMsec > dfs.blockreport.incremental.intervalMsec,value
587,dfs.client.retry.window.base,dfs.client.retry.max.attempts,dfs.client.retry.window.base = <Expression> => dfs.client.retry.max.attempts = <Expression>,value
588,dfs.qjournal.accept-recovery.timeout.ms,dfs.qjournal.start-segment.timeout.ms,dfs.qjournal.start-segment.timeout.ms = dfs.qjournal.accept-recovery.timeout.ms,value
