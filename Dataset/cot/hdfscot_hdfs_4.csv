id,Parameter1,Parameter2,bnf,type
1,dfs.client.socket-timeout,dfs.datanode.socket.write.timeout,dfs.client.socket-timeout > 0 => dfs.datanode.socket.write.timeout = dfs.client.socket-timeout + 1000,behavior
2,dfs.data.transfer.saslproperties.resolver.class,dfs.encrypt.data.transfer,dfs.data.transfer.saslproperties.resolver.class != null => dfs.encrypt.data.transfer = true,behavior
3,dfs.datanode.fsdataset.factory,dfs.datanode.data.dir,dfs.datanode.fsdataset.factory = ANY => dfs.datanode.data.dir != null,behavior
4,dfs.namenode.lock.detailed-metrics.enabled,dfs.namenode.lock.metrics.percentiles,dfs.namenode.lock.detailed-metrics.enabled = true => dfs.namenode.lock.metrics.percentiles != null,behavior
5,dfs.encrypt.data.transfer.cipher.key.bitlength,dfs.encrypt.data.transfer.algorithm,"dfs.encrypt.data.transfer.cipher.key.bitlength in {128, 192, 256} => dfs.encrypt.data.transfer.algorithm != null",behavior
6,dfs.datanode.use.datanode.hostname,dfs.datanode.http.address,dfs.datanode.use.datanode.hostname = true => dfs.datanode.http.address = hostname:50075,behavior
7,dfs.client.retry.policy.spec,dfs.client.retry.max.attempts,dfs.client.retry.policy.spec != null => dfs.client.retry.max.attempts > 0,behavior
8,dfs.encrypt.data.transfer.algorithm,dfs.data.transfer.protection,"dfs.encrypt.data.transfer.algorithm != null => dfs.data.transfer.protection = ""privacy""",behavior
9,dfs.namenode.fs-limits.max-blocks-per-file,dfs.replication,dfs.namenode.fs-limits.max-blocks-per-file > 1 => dfs.replication in {{1..dfs.namenode.fs-limits.max-blocks-per-file}},behavior
10,dfs.datanode.slow.io.warning.threshold.ms,dfs.datanode.max.locked.memory,dfs.datanode.slow.io.warning.threshold.ms > 1000 => dfs.datanode.max.locked.memory > 102400,behavior
11,dfs.namenode.hosts.provider.classname,dfs.ha.automatic-failover.enabled,dfs.namenode.hosts.provider.classname != default => dfs.ha.automatic-failover.enabled = true,behavior
12,dfs.client.retry.policy.enabled,dfs.client.retry.sleep.base,dfs.client.retry.policy.enabled = true => dfs.client.retry.sleep.base > 0,behavior
13,dfs.namenode.https-address,dfs.https.need.client.auth,dfs.namenode.https-address != null => dfs.https.need.client.auth = ANY,behavior
14,dfs.client.read.shortcircuit.streams.cache.size,dfs.domain.socket.path,dfs.client.read.shortcircuit.streams.cache.size != null => dfs.domain.socket.path != null,behavior
15,dfs.client.read.shortcircuit,dfs.datanode.hdfs-blocks-metadata.enabled,dfs.client.read.shortcircuit = true => dfs.datanode.hdfs-blocks-metadata.enabled = true,behavior
16,dfs.namenode.snapshot.skip.capture.accesstime-only-change,dfs.namenode.snapshot.snapshotdiff.skip.access-time-only-change,dfs.namenode.snapshot.skip.capture.accesstime-only-change = true => dfs.namenode.snapshot.snapshotdiff.skip.access-time-only-change = true,behavior
17,dfs.ha.automatic-failover.enabled,dfs.ha.zkfc.quorum-port,dfs.ha.automatic-failover.enabled = true => dfs.ha.zkfc.quorum-port in {{ 2181..65535 }},behavior
18,dfs.namenode.edits.asynclogging,dfs.namenode.edits.dir,dfs.namenode.edits.asynclogging = true => dfs.namenode.edits.dir != null,behavior
19,dfs.client.failover.random.order,dfs.client.retry.max.attempts,dfs.client.failover.random.order = true => dfs.client.retry.max.attempts > 3,behavior
20,dfs.datanode.transferTo.allowed,dfs.datanode.sync.behind.writes,dfs.datanode.transferTo.allowed = true => dfs.datanode.sync.behind.writes = true,behavior
21,dfs.balancer.address,dfs.namenode.rpc-address,dfs.balancer.address != null => dfs.namenode.rpc-address != null,behavior
22,dfs.datanode.hdfs-blocks-metadata.enabled,dfs.datanode.max.locked.memory,dfs.datanode.hdfs-blocks-metadata.enabled = true => dfs.datanode.max.locked.memory > 0,behavior
23,dfs.client.mmap.enabled,dfs.client.read.shortcircuit,dfs.client.mmap.enabled = true => dfs.client.read.shortcircuit = true,behavior
24,dfs.storage.policy.enabled,dfs.datanode.data.dir,dfs.storage.policy.enabled = true => dfs.datanode.data.dir in {{ANY}},behavior
25,dfs.image.transfer.chunksize,dfs.datanode.max.transfer.threads,dfs.image.transfer.chunksize > default => dfs.datanode.max.transfer.threads > default,behavior
26,dfs.permissions.superusergroup,dfs.cluster.administrators,dfs.permissions.superusergroup != null => dfs.cluster.administrators != null,behavior
27,dfs.web.authentication.kerberos.principal,dfs.web.authentication.kerberos.keytab,dfs.web.authentication.kerberos.principal != null => dfs.web.authentication.kerberos.keytab != null,behavior
28,dfs.client.failover.connection.retries,dfs.client.failover.sleep.base.millis,dfs.client.failover.connection.retries > 0 => dfs.client.failover.sleep.base.millis > 0,behavior
29,dfs.hosts.exclude,dfs.namenode.hosts.provider.classname,dfs.hosts.exclude != null => dfs.namenode.hosts.provider.classname = org.apache.hadoop.hdfs.server.blockmanagement.CombinedHostFileManager,behavior
30,dfs.mover.movedWinWidth,dfs.mover.moverThreads,dfs.mover.moverThreads > 0 => dfs.mover.movedWinWidth > 0,behavior
31,dfs.namenode.path.based.cache.refresh.interval.ms,dfs.namenode.path.based.cache.retry.interval.ms,dfs.namenode.path.based.cache.refresh.interval.ms = 30000 => dfs.namenode.path.based.cache.retry.interval.ms = 30000,behavior
32,dfs.namenode.kerberos.principal,dfs.namenode.keytab.file,dfs.namenode.kerberos.principal != null => dfs.namenode.keytab.file != null,behavior
33,dfs.namenode.kerberos.principal,hadoop.security.authorization,dfs.namenode.kerberos.principal != null => hadoop.security.authorization = true,behavior
34,dfs.client.mmap.retry.timeout.ms,dfs.client.mmap.retry.count,dfs.client.mmap.retry.timeout.ms > 0 => dfs.client.mmap.retry.count > 0,behavior
35,dfs.journalnode.https-bind-host,dfs.journalnode.https-address,dfs.journalnode.https-bind-host != null => dfs.journalnode.https-address != null,behavior
36,dfs.namenode.safemode.threshold-pct,dfs.namenode.safemode.extension,dfs.namenode.safemode.threshold-pct > 0 => dfs.namenode.safemode.extension > 0,behavior
37,dfs.datanode.fsdataset.volume.choosing.policy,dfs.datanode.available-space-volume-choosing-policy.balanced-space-threshold,dfs.datanode.fsdataset.volume.choosing.policy = 'available-space' => dfs.datanode.available-space-volume-choosing-policy.balanced-space-threshold > 0,behavior
38,dfs.client.file-block-storage-locations.num-threads,dfs.datanode.handler.count,dfs.client.file-block-storage-locations.num-threads > default => dfs.datanode.handler.count > default,behavior
39,dfs.datanode.readahead.bytes,dfs.datanode.handler.count,dfs.datanode.readahead.bytes > default => dfs.datanode.handler.count > default,behavior
40,dfs.client.write.max-packets-in-flight,dfs.client.socket-timeout,dfs.client.write.max-packets-in-flight > 100 => dfs.client.socket-timeout > 60000,behavior
41,dfs.journalnode.kerberos.internal.spnego.principal,hadoop.http.authentication.type,"dfs.journalnode.kerberos.internal.spnego.principal != null => hadoop.http.authentication.type = ""kerberos""",behavior
42,dfs.namenode.max.objects,dfs.namenode.heap.size,dfs.namenode.max.objects > default => dfs.namenode.heap.size > default,behavior
43,dfs.datanode.plugins,dfs.namenode.plugins,dfs.datanode.plugins = ANY => dfs.namenode.plugins = ANY,behavior
44,dfs.namenode.edits.dir.required,dfs.namenode.name.dir,dfs.namenode.edits.dir.required = true => dfs.namenode.name.dir != null,behavior
45,dfs.bytes-per-checksum,dfs.client-write-packet-size,dfs.bytes-per-checksum != null => dfs.client-write-packet-size = 65536,behavior
46,dfs.client.read.prefetch.size,dfs.client.socket-timeout,dfs.client.read.prefetch.size > default => dfs.client.socket-timeout > default,behavior
47,dfs.namenode.edit.log.autoroll.check.interval.ms,dfs.namenode.edit.log.autoroll.multiplier.threshold,dfs.namenode.edit.log.autoroll.check.interval.ms > 0 => dfs.namenode.edit.log.autoroll.multiplier.threshold > 1.0,behavior
48,dfs.datanode.cache.revocation.timeout.ms,dfs.datanode.max.locked.memory,dfs.datanode.cache.revocation.timeout.ms > 0 => dfs.datanode.max.locked.memory > 0,behavior
49,dfs.client.retry.times.get-last-block-length,dfs.client.socket-timeout,dfs.client.retry.times.get-last-block-length > 1 => dfs.client.socket-timeout > dfs.client.retry.times.get-last-block-length * 1000,behavior
50,dfs.client.block.write.retries,dfs.replication.max,dfs.client.block.write.retries > 1 => dfs.replication.max > dfs.client.block.write.retries,control
51,dfs.client.mmap.enabled,dfs.namenode.max.full.block.report.threads,dfs.client.mmap.enabled = true => dfs.namenode.max.full.block.report.threads < (system_memory * 0.1 / thread_stack_size),control
52,dfs.ha.namenodes.EXAMPLENAMESERVICE,dfs.ha.automatic-failover.enabled,dfs.ha.automatic-failover.enabled = true => dfs.ha.namenodes.EXAMPLENAMESERVICE != null,control
53,dfs.datanode.network.counts.cache.max.size,dfs.datanode.handler.count,dfs.datanode.network.counts.cache.max.size > default => dfs.datanode.handler.count > default,control
54,dfs.namenode.secondary.http-address,dfs.http.policy,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.namenode.secondary.http-address = null",control
55,dfs.namenode.lease-recheck-interval-ms,dfs.namenode.lease-check-interval-ms,dfs.namenode.lease-recheck-interval-ms = dfs.namenode.lease-check-interval-ms,control
56,dfs.webhdfs.oauth2.access.token.provider,dfs.webhdfs.oauth2.enabled,dfs.webhdfs.oauth2.enabled = true => dfs.webhdfs.oauth2.access.token.provider != null,control
57,dfs.journalnode.rpc-bind-host,dfs.journalnode.http-bind-host,dfs.journalnode.rpc-bind-host = ANY => dfs.journalnode.http-bind-host = ANY,control
58,dfs.permissions.enabled,dfs.permissions.superusergroup,dfs.permissions.enabled = true => dfs.permissions.superusergroup != null,control
59,dfs.namenode.lifeline.rpc-address,dfs.namenode.lifeline.handler.count,dfs.namenode.lifeline.rpc-address != null => dfs.namenode.lifeline.handler.count != null,control
60,dfs.qjournal.finalize-segment.timeout.ms,dfs.qjournal.max-txns-per-segment,dfs.qjournal.finalize-segment.timeout.ms > 60000 => dfs.qjournal.max-txns-per-segment < 1000,control
61,dfs.webhdfs.use.ipc.callq,dfs.webhdfs.ipc.server.handler.count,dfs.webhdfs.use.ipc.callq = true => dfs.webhdfs.ipc.server.handler.count > 1,control
62,dfs.balancer.block-move.timeout,dfs.balancer.dispatcherThreads,dfs.balancer.dispatcherThreads > 0 => dfs.balancer.block-move.timeout = ANY,control
63,dfs.nameservices,dfs.namenode.rpc-address.[nameservice ID].[namenode ID],dfs.nameservices != null => dfs.namenode.rpc-address.[nameservice ID].[namenode ID] != null,control
64,dfs.datanode.scan.period.hours,dfs.datanode.directoryscan.throttle.limit.ms.per.sec,dfs.datanode.scan.period.hours > 24 => dfs.datanode.directoryscan.throttle.limit.ms.per.sec < 1000,control
65,dfs.datanode.ipc.address,dfs.datanode.use.datanode.hostname,dfs.datanode.use.datanode.hostname = true => dfs.datanode.ipc.address in {hostname:port},control
66,dfs.webhdfs.ugi.expire.after.access,hadoop.security.authentication,hadoop.security.authentication = 'kerberos' => dfs.webhdfs.ugi.expire.after.access != null,control
67,dfs.client.read.shortcircuit,dfs.domain.socket.path,dfs.client.read.shortcircuit = true => dfs.domain.socket.path != null,control
68,dfs.namenode.edits.asynclogging,dfs.namenode.edits.dir,dfs.namenode.edits.asynclogging = true => dfs.namenode.edits.dir != null,control
69,dfs.namenode.xattrs.enabled,dfs.namenode.fs-limits.max-xattrs-per-inode,dfs.namenode.xattrs.enabled = true => dfs.namenode.fs-limits.max-xattrs-per-inode != null,control
70,dfs.namenode.checkpoint.txns,dfs.namenode.num.checkpoints.retained,dfs.namenode.checkpoint.txns in {{500000..1000000}} => dfs.namenode.num.checkpoints.retained in {{2..3}},control
71,dfs.client.block.write.replace-datanode-on-failure.enable,dfs.replication,dfs.client.block.write.replace-datanode-on-failure.enable = true => dfs.replication > 1,control
72,dfs.namenode.decommission.interval,dfs.namenode.decommission.nodes.per.interval,dfs.namenode.decommission.interval > 0 => dfs.namenode.decommission.nodes.per.interval > 0,control
73,dfs.webhdfs.rest-csrf.enabled,dfs.webhdfs.rest-csrf.methods-to-ignore,dfs.webhdfs.rest-csrf.enabled = true => dfs.webhdfs.rest-csrf.methods-to-ignore != null,control
74,dfs.journalnode.keytab.file,dfs.namenode.keytab.file,dfs.journalnode.keytab.file != null => dfs.namenode.keytab.file != null,control
75,dfs.datanode.sync.behind.writes,dfs.datanode.sync.behind.writes.in.background,dfs.datanode.sync.behind.writes = true => dfs.datanode.sync.behind.writes.in.background is valid and non-null,control
76,dfs.image.transfer.bandwidthPerSec,dfs.namenode.checkpoint.period,dfs.image.transfer.bandwidthPerSec > 0 => dfs.namenode.checkpoint.period > 0,control
77,dfs.webhdfs.enabled,dfs.client.https.keystore.resource,dfs.client.https.keystore.resource = null => dfs.webhdfs.enabled = false,control
78,dfs.ha.automatic-failover.enabled,dfs.ha.zkfc.port,dfs.ha.automatic-failover.enabled = true => dfs.ha.zkfc.port != null,control
79,dfs.namenode.path.based.cache.block.map.allocation.percent,dfs.namenode.path.based.cache.retry.interval.ms,dfs.namenode.path.based.cache.block.map.allocation.percent > 0 => dfs.namenode.path.based.cache.retry.interval.ms > 0,control
80,dfs.datanode.address,dfs.client.use.datanode.hostname,dfs.client.use.datanode.hostname = true => dfs.datanode.address != null,control
81,dfs.use.dfs.network.topology,dfs.replication,dfs.use.dfs.network.topology = true => dfs.replication > 1,control
82,dfs.xframe.enabled,dfs.http.policy,"dfs.http.policy = ""HTTP_ONLY"" => dfs.xframe.enabled = ""false""",control
83,dfs.namenode.fs-limits.max-xattrs-per-inode,dfs.namenode.fs-limits.max-xattrs,dfs.namenode.fs-limits.max-xattrs-per-inode > 0 => dfs.namenode.fs-limits.max-xattrs > dfs.namenode.fs-limits.max-xattrs-per-inode,control
84,dfs.secondary.namenode.kerberos.principal,hadoop.security.authentication,"dfs.secondary.namenode.kerberos.principal != null => hadoop.security.authentication = ""kerberos""",control
85,dfs.client.write.byte-array-manager.count-limit,dfs.client.write.byte-array-manager.enabled,dfs.client.write.byte-array-manager.enabled = true => dfs.client.write.byte-array-manager.count-limit = ANY,control
86,dfs.client.slow.io.warning.threshold.ms,dfs.client.slow.io.log.enabled,dfs.client.slow.io.warning.threshold.ms > 0 => dfs.client.slow.io.log.enabled = true,control
87,dfs.namenode.upgrade.domain.factor,dfs.namenode.upgrade.parallel.copies,dfs.namenode.upgrade.domain.factor > 1 => dfs.namenode.upgrade.parallel.copies > 1,control
88,dfs.namenode.path.based.cache.block.map.allocation.percent,dfs.namenode.path.based.cache.refresh.interval.ms,dfs.namenode.path.based.cache.block.map.allocation.percent > 0 => dfs.namenode.path.based.cache.refresh.interval.ms > 0,control
89,dfs.namenode.checkpoint.check.period,dfs.namenode.checkpoint.txns,dfs.namenode.checkpoint.txns > 0 => dfs.namenode.checkpoint.check.period = (dfs.namenode.checkpoint.txns / 1000),control
90,dfs.client.read.shortcircuit,dfs.domain.socket.path,dfs.client.read.shortcircuit = true => dfs.domain.socket.path != null,control
91,dfs.client.block.write.replace-datanode-on-failure.policy,dfs.client.block.write.replace-datanode-on-failure.min-replication,dfs.client.block.write.replace-datanode-on-failure.policy != null => dfs.client.block.write.replace-datanode-on-failure.min-replication = 0,control
92,dfs.webhdfs.rest-csrf.methods-to-ignore,dfs.webhdfs.rest-csrf.browser-useragents-regex,dfs.webhdfs.rest-csrf.browser-useragents-regex != null => dfs.webhdfs.rest-csrf.methods-to-ignore in {ANY},control
93,dfs.datanode.sync.behind.writes.in.background,dfs.datanode.sync.behind.writes,dfs.datanode.sync.behind.writes = true => dfs.datanode.sync.behind.writes.in.background = true,control
94,dfs.journalnode.kerberos.principal,dfs.journalnode.keytab.file,dfs.journalnode.kerberos.principal != null => dfs.journalnode.keytab.file != null,control
95,dfs.namenode.enable.retrycache,dfs.namenode.retrycache.expirytime.millis,dfs.namenode.enable.retrycache = true => dfs.namenode.retrycache.expirytime.millis != null,control
96,dfs.http.policy,dfs.client.https.need-auth,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.client.https.need-auth != null",control
97,dfs.ha.fencing.methods,dfs.ha.standby.checkpoints,dfs.ha.fencing.methods = ANY => dfs.ha.standby.checkpoints = true,control
98,dfs.client.short.circuit.replica.stale.threshold.ms,dfs.namenode.avoid.read.stale.datanode,dfs.namenode.avoid.read.stale.datanode = true => dfs.client.short.circuit.replica.stale.threshold.ms > 0,control
99,dfs.journalnode.edits.dir,dfs.journalnode.kerberos.internal.spnego.principal,dfs.journalnode.edits.dir != null => dfs.journalnode.kerberos.internal.spnego.principal != null,control
100,dfs.datanode.kerberos.principal,dfs.encrypt.data.transfer,dfs.encrypt.data.transfer = true => dfs.datanode.kerberos.principal != null,control
101,dfs.http.port,dfs.namenode.http-address,dfs.http.port != dfs.namenode.http-address.port,control
102,dfs.client.block.write.locateFollowingBlock.initial.delay.ms,dfs.blocksize,dfs.blocksize > 134217728 => dfs.client.block.write.locateFollowingBlock.initial.delay.ms > 1000,control
103,dfs.nameservices,dfs.ha.fencing.methods,dfs.nameservices != null => dfs.ha.fencing.methods = ANY,control
104,dfs.webhdfs.enabled,dfs.https.server.keystore.resource,dfs.https.server.keystore.resource = null => dfs.webhdfs.enabled = false,control
105,dfs.client.failover.max.attempts,dfs.ha.automatic-failover.enabled,dfs.ha.automatic-failover.enabled = true => dfs.client.failover.max.attempts > 1,control
106,dfs.namenode.block-placement-policy.default.prefer-local-node,dfs.namenode.plugins,dfs.namenode.block-placement-policy.default.prefer-local-node = true => dfs.namenode.plugins != null,control
107,dfs.quota.by.storage.type.enabled,dfs.namenode.quota.enabled,dfs.quota.by.storage.type.enabled = true => dfs.namenode.quota.enabled = true,control
108,dfs.http.policy,dfs.web.authentication.kerberos.keytab,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.web.authentication.kerberos.keytab != ""null""",control
109,dfs.namenode.edits.dir.minimum,dfs.namenode.edits.dir.required,dfs.namenode.edits.dir.required = true => dfs.namenode.edits.dir.minimum = ANY,control
110,dfs.qjournal.get-journal-state.timeout.ms,ipc.server.read.threadpool.size,dfs.qjournal.get-journal-state.timeout.ms < 30000 => ipc.server.read.threadpool.size > 10,control
111,dfs.client.domain.socket.data.traffic,dfs.client.use.legacy.blockreader.local,dfs.client.use.legacy.blockreader.local = false => dfs.client.domain.socket.data.traffic = true,control
112,dfs.namenode.secondary.http-address,dfs.namenode.secondary.checkpoint.period,dfs.namenode.secondary.http-address in {{active_hosts}} => dfs.namenode.secondary.checkpoint.period > 0,control
113,dfs.namenode.support.allow.format,dfs.reformat.disabled,dfs.reformat.disabled = true => dfs.namenode.support.allow.format = false,control
114,dfs.http.policy,dfs.web.authentication.kerberos.principal,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.web.authentication.kerberos.principal != ""null""",control
115,dfs.ha.automatic-failover.enabled,dfs.ha.standby.checkpoints,dfs.ha.automatic-failover.enabled = true => dfs.ha.standby.checkpoints = true,control
116,dfs.namenode.checkpoint.edits.dir,dfs.namenode.checkpoint.max-retries,dfs.namenode.checkpoint.max-retries = ANY => dfs.namenode.checkpoint.edits.dir = ANY,control
117,dfs.datanode.directoryscan.interval,dfs.blockreport.intervalMsec,dfs.datanode.directoryscan.interval > 0 => dfs.blockreport.intervalMsec > dfs.datanode.directoryscan.interval,control
118,dfs.nameservice.id,dfs.ha.namenodes.EXAMPLENAMESERVICE,dfs.nameservice.id = ANY => dfs.ha.namenodes.EXAMPLENAMESERVICE = ANY,control
119,dfs.ha.automatic-failover.enabled,dfs.namenode.rpc-address,dfs.ha.automatic-failover.enabled = true => dfs.namenode.rpc-address != null,control
120,dfs.nameservices,dfs.ha.zkfc.port,dfs.nameservices != null => dfs.ha.zkfc.port = ANY,control
121,dfs.datanode.fsdataset.factory,dfs.datanode.max.locked.memory,dfs.datanode.fsdataset.factory in {{org.apache.hadoop.hdfs.server.datanode.fsdataset.impl.MemoryFsDatasetFactory}} => dfs.datanode.max.locked.memory > 0,control
122,dfs.balancer.getBlocks.size,dfs.balancer.max-size-to-move,dfs.balancer.getBlocks.size > 0 => dfs.balancer.max-size-to-move > 0,control
123,dfs.webhdfs.use.ipc.callq,dfs.http.policy,dfs.http.policy = HTTPS_ONLY => dfs.webhdfs.use.ipc.callq = ANY,control
124,dfs.permissions.enabled,dfs.namenode.acls.enabled,dfs.permissions.enabled = true => dfs.namenode.acls.enabled = ANY,control
125,dfs.journalnode.https-address,dfs.http.policy,dfs.http.policy = HTTPS_ONLY => dfs.journalnode.https-address != null,control
126,dfs.namenode.checkpoint.max-retries,dfs.namenode.checkpoint.check.period,dfs.namenode.checkpoint.max-retries > 0 => dfs.namenode.checkpoint.check.period > 0,control
127,dfs.namenode.lifeline.rpc-address,dfs.namenode.lifeline.handler.ratio,dfs.namenode.lifeline.rpc-address != null => dfs.namenode.lifeline.handler.ratio != null,control
128,dfs.http.policy,dfs.https.server.keystore.resource,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.https.server.keystore.resource != ""null""",control
129,dfs.secondary.namenode.keytab.file,dfs.http.policy,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.secondary.namenode.keytab.file != null",control
130,dfs.client.failover.connection.retries.on.timeouts,dfs.client.failover.sleep.max.millis,dfs.client.failover.sleep.max.millis > 0 => dfs.client.failover.connection.retries.on.timeouts = ANY,control
131,dfs.namenode.replication.considerLoad,dfs.namenode.replication.considerLoad.factor,dfs.namenode.replication.considerLoad = true => dfs.namenode.replication.considerLoad.factor = 2.0,control
132,dfs.block.access.token.enable,dfs.block.access.token.lifetime,dfs.block.access.token.enable = true => dfs.block.access.token.lifetime != null,control
133,dfs.namenode.name.dir,dfs.namenode.edits.dir,dfs.namenode.edits.dir = ANY => dfs.namenode.name.dir = ANY,control
134,dfs.permissions.enabled,dfs.permissions.superusergroup,dfs.permissions.enabled = true => dfs.permissions.superusergroup != null,control
135,dfs.client.read.shortcircuit.streams.cache.expiry.ms,dfs.domain.socket.path,dfs.client.read.shortcircuit.streams.cache.expiry.ms != null => dfs.domain.socket.path != null,control
136,dfs.namenode.decommission.max.concurrent.tracked.nodes,dfs.namenode.handler.count,dfs.namenode.decommission.max.concurrent.tracked.nodes > 0 => dfs.namenode.handler.count > dfs.namenode.decommission.max.concurrent.tracked.nodes,control
137,dfs.cluster.administrators,dfs.permissions.superusergroup,dfs.cluster.administrators != null => dfs.permissions.superusergroup in {{ <Singlevalue> }},control
138,dfs.datanode.ipc.address,dfs.http.policy,dfs.http.policy = HTTPS => dfs.datanode.ipc.address = dfs.datanode.https.address,control
139,dfs.datanode.fsdataset.volume.choosing.policy,dfs.datanode.disk.check.timeout.ms,dfs.datanode.fsdataset.volume.choosing.policy != null => dfs.datanode.disk.check.timeout.ms > 0,control
140,dfs.webhdfs.acl.provider.permission.pattern,dfs.namenode.acls.enabled,dfs.namenode.acls.enabled = true => dfs.webhdfs.acl.provider.permission.pattern != null,control
141,dfs.block.replicator.classname,dfs.replication,dfs.block.replicator.classname != null => dfs.replication > 1,control
142,dfs.namenode.checkpoint.dir,dfs.namenode.checkpoint.txns,dfs.namenode.checkpoint.dir != null => dfs.namenode.checkpoint.txns > 0,control
143,dfs.encrypt.data.transfer.cipher.suites,dfs.encrypt.data.transfer,dfs.encrypt.data.transfer = true => dfs.encrypt.data.transfer.cipher.suites != null,control
144,dfs.namenode.lifeline.handler.count,dfs.namenode.handler.count,dfs.namenode.lifeline.handler.count > 0 => dfs.namenode.handler.count > dfs.namenode.lifeline.handler.count,control
145,dfs.webhdfs.acl.provider.permission.pattern,dfs.permissions.enabled,dfs.permissions.enabled = true => dfs.webhdfs.acl.provider.permission.pattern != null,control
146,dfs.client.retry.max.attempts,dfs.client.retry.policy.enabled,dfs.client.retry.policy.enabled = true => dfs.client.retry.max.attempts = ANY,control
147,dfs.journalnode.rpc-bind-host,dfs.journalnode.https-bind-host,dfs.journalnode.rpc-bind-host = ANY => dfs.journalnode.https-bind-host = ANY,control
148,dfs.namenode.safemode.replication.min,dfs.namenode.safemode.threshold-pct,dfs.namenode.safemode.threshold-pct = ANY => dfs.namenode.safemode.replication.min = ANY,control
149,dfs.journalnode.http-address,dfs.http.policy,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.journalnode.http-address = null",control
150,dfs.replication,dfs.datanode.max.transfer.threads,dfs.replication > 3 => dfs.datanode.max.transfer.threads > 4096,control
151,dfs.datanode.kerberos.principal,dfs.http.policy,dfs.http.policy = HTTPS => dfs.datanode.kerberos.principal != null,control
152,dfs.namenode.https-address,dfs.client.https.need-auth,dfs.client.https.need-auth = true => dfs.namenode.https-address != null,control
153,dfs.webhdfs.oauth2.client.id,dfs.webhdfs.oauth2.refresh.url,dfs.webhdfs.oauth2.refresh.url != null => dfs.webhdfs.oauth2.client.id != null,control
154,dfs.client.hedged.read.threadpool.size,dfs.client.hedged.read.pool.size,dfs.client.hedged.read.threadpool.size = X => dfs.client.hedged.read.pool.size = X,control
155,dfs.journalnode.rpc-bind-host,dfs.journalnode.rpc-address,dfs.journalnode.rpc-bind-host = ANY => dfs.journalnode.rpc-address = ANY,control
156,dfs.namenode.checkpoint.edits.dir,dfs.namenode.num.extra.edits.retained,dfs.namenode.num.extra.edits.retained = ANY => dfs.namenode.checkpoint.edits.dir = ANY,control
157,dfs.namenode.secondary.https-address,dfs.http.policy,"dfs.namenode.secondary.https-address != null => dfs.http.policy in {{HTTPS_ONLY, HTTP_AND_HTTPS}}",control
158,dfs.namenode.backup.http-address,dfs.ha.namenodes.[nameservice ID],"dfs.namenode.backup.http-address != null => dfs.ha.namenodes.[nameservice ID] in {{backup_namenode_id, other_namenode_ids}}",control
159,dfs.namenode.decommission.blocks.per.interval,dfs.namenode.decommission.max.concurrent.tracked.nodes,dfs.namenode.decommission.max.concurrent.tracked.nodes > 0 => dfs.namenode.decommission.blocks.per.interval > 0,control
160,dfs.datanode.hostname,dfs.client.use.datanode.hostname,dfs.datanode.hostname != null => dfs.client.use.datanode.hostname = true,control
161,dfs.http.port,dfs.http.policy,"dfs.http.policy = ""HTTP_ONLY"" => dfs.http.port != 0",control
162,dfs.namenode.name.dir,dfs.namenode.shared.edits.dir,dfs.namenode.shared.edits.dir = ANY => dfs.namenode.name.dir = ANY,control
163,dfs.datanode.handler.count,dfs.datanode.max.transfer.threads,dfs.datanode.handler.count > default => dfs.datanode.max.transfer.threads > default,control
164,dfs.storage.policy.enabled,dfs.replication,dfs.storage.policy.enabled = true => dfs.replication > 0,control
165,dfs.namenode.xattrs.enabled,dfs.namenode.fs-limits.max-xattr-size,dfs.namenode.xattrs.enabled = true => dfs.namenode.fs-limits.max-xattr-size != null,control
166,dfs.ha.tail-edits.period,dfs.ha.log-roll.period,dfs.ha.log-roll.period = ANY => dfs.ha.tail-edits.period = ANY,control
167,dfs.client.retry.max.attempts,dfs.client.retry.policy.spec,dfs.client.retry.policy.spec != null => dfs.client.retry.max.attempts = ANY,control
168,dfs.client.socketcache.capacity,dfs.client.parallel.threads,dfs.client.socketcache.capacity > {{ANY}} => dfs.client.parallel.threads > {{ANY}},control
169,dfs.datanode.keytab.file,dfs.data.transfer.protection,"dfs.data.transfer.protection = ""privacy"" => dfs.datanode.keytab.file != null",control
170,dfs.journalnode.keytab.file,dfs.https.enable,dfs.journalnode.keytab.file != null => dfs.https.enable = true,control
171,dfs.balancer.block-move.timeout,dfs.balancer.max-no-move-interval,dfs.balancer.max-no-move-interval > 0 => dfs.balancer.block-move.timeout = ANY,control
172,dfs.namenode.replication.pending.timeout-sec,dfs.namenode.replication.interval,dfs.namenode.replication.interval < dfs.namenode.replication.pending.timeout-sec => dfs.namenode.replication.pending.timeout-sec > dfs.namenode.replication.interval,control
173,dfs.web.authentication.simple.anonymous.allowed,dfs.web.authentication.kerberos.keytab,dfs.web.authentication.kerberos.keytab != null => dfs.web.authentication.simple.anonymous.allowed = false,control
174,dfs.namenode.read-lock-reporting-threshold-ms,dfs.namenode.write-lock-reporting-threshold-ms,dfs.namenode.read-lock-reporting-threshold-ms = ANY => dfs.namenode.write-lock-reporting-threshold-ms = ANY,control
175,dfs.web.authentication.simple.anonymous.allowed,dfs.web.authentication.kerberos.principal,dfs.web.authentication.kerberos.principal != null => dfs.web.authentication.simple.anonymous.allowed = false,control
176,dfs.block.misreplication.processing.limit,dfs.namenode.replication.work.multiplier.per.iteration,dfs.block.misreplication.processing.limit > 100 => dfs.namenode.replication.work.multiplier.per.iteration > 2,control
177,dfs.namenode.decommission.blocks.per.interval,dfs.namenode.decommission.interval,dfs.namenode.decommission.interval > 0 => dfs.namenode.decommission.blocks.per.interval > 0,control
178,dfs.namenode.file.close.num-committed-allowed,dfs.namenode.checkpoint.txns,dfs.namenode.file.close.num-committed-allowed > default => dfs.namenode.checkpoint.txns > default,control
179,dfs.journalnode.keytab.file,dfs.journalnode.kerberos.internal.spnego.principal,dfs.journalnode.keytab.file != null => dfs.journalnode.kerberos.internal.spnego.principal != null,control
180,dfs.namenode.checkpoint.edits.dir,dfs.namenode.checkpoint.period,dfs.namenode.checkpoint.edits.dir != null => dfs.namenode.checkpoint.period > 0,control
181,dfs.namenode.servicerpc-address,dfs.namenode.service.handler.count,dfs.namenode.servicerpc-address != null => dfs.namenode.service.handler.count = 10,control
182,dfs.mover.moverThreads,dfs.datanode.max.transfer.threads,dfs.mover.moverThreads > 10 => dfs.datanode.max.transfer.threads > dfs.mover.moverThreads * 2,control
183,dfs.namenode.handler.count,dfs.namenode.service.handler.count,dfs.namenode.handler.count > {{X}} => dfs.namenode.service.handler.count > {{X}},control
184,dfs.namenode.lock.detailed-metrics.enabled,dfs.namenode.lock.metrics.log.interval,dfs.namenode.lock.detailed-metrics.enabled = true => dfs.namenode.lock.metrics.log.interval > 0,control
185,dfs.ha.namenode.id,dfs.ha.automatic-failover.enabled,dfs.ha.automatic-failover.enabled = true => dfs.ha.namenode.id != null,control
186,dfs.client.mmap.enabled,dfs.datanode.max.locked.memory,dfs.client.mmap.enabled = true => dfs.datanode.max.locked.memory > 0,control
187,dfs.namenode.backup.dnrpc-address,dfs.namenode.backup.address,dfs.namenode.backup.address != null => dfs.namenode.backup.dnrpc-address = dfs.namenode.backup.address,control
188,dfs.balancer.keytab.enabled,dfs.balancer.keytab.file,dfs.balancer.keytab.enabled = true => dfs.balancer.keytab.file != null,control
189,dfs.client.mmap.cache.size,dfs.datanode.max.locked.memory,dfs.client.mmap.cache.size > default => dfs.datanode.max.locked.memory > default,control
190,dfs.namenode.delegation.token.always-use,dfs.block.access.token.enable,dfs.block.access.token.enable = true => dfs.namenode.delegation.token.always-use = true,control
191,dfs.use.dfs.network.topology,dfs.namenode.reject-unresolved-dn-topology-mapping,dfs.use.dfs.network.topology = true => dfs.namenode.reject-unresolved-dn-topology-mapping = true,control
192,dfs.nameservices,dfs.ha.namenodes.EXAMPLENAMESERVICE,dfs.nameservices != null => dfs.ha.namenodes.EXAMPLENAMESERVICE = ANY,control
193,dfs.encrypt.data.transfer.cipher.suites,dfs.data.transfer.protection,"dfs.data.transfer.protection = ""privacy"" => dfs.encrypt.data.transfer.cipher.suites != null",control
194,dfs.image.transfer.bandwidthPerSec,dfs.namenode.checkpoint.txns,dfs.image.transfer.bandwidthPerSec > 0 => dfs.namenode.checkpoint.txns > 0,control
195,dfs.datanode.ram.disk.replica.tracker,dfs.datanode.ram.disk.replica.buffer.size,dfs.datanode.ram.disk.replica.tracker = true => dfs.datanode.ram.disk.replica.buffer.size > 0,control
196,dfs.namenode.retrycache.expirytime.millis,dfs.namenode.enable.retrycache,dfs.namenode.enable.retrycache = true => dfs.namenode.retrycache.expirytime.millis > 0,control
197,dfs.image.compression.codec,dfs.image.compression.level,dfs.image.compression.codec = ANY => dfs.image.compression.level in [ 1..9 ],control
198,dfs.namenode.edits.dir,dfs.namenode.edits.dir.required,dfs.namenode.edits.dir.required = true => dfs.namenode.edits.dir != null,control
199,dfs.encrypt.data.transfer,dfs.data.transfer.protection,"dfs.data.transfer.protection != ""null"" => dfs.encrypt.data.transfer = ""true""",control
200,dfs.journalnode.rpc-address,dfs.ha.automatic-failover.enabled,dfs.ha.automatic-failover.enabled = true => dfs.journalnode.rpc-address != null,control
201,dfs.web.authentication.kerberos.principal,dfs.web.authentication.filter,"dfs.web.authentication.filter = ""org.apache.hadoop.security.authentication.server.KerberosAuthenticationFilter"" => dfs.web.authentication.kerberos.principal != null",control
202,dfs.webhdfs.rest-csrf.enabled,dfs.http.policy,dfs.http.policy = HTTPS_ONLY => dfs.webhdfs.rest-csrf.enabled = ANY,control
203,dfs.namenode.fs-limits.max-xattr-size,dfs.namenode.fs-limits.min-block-size,dfs.namenode.fs-limits.max-xattr-size != default => dfs.namenode.fs-limits.min-block-size != default,control
204,dfs.datanode.socket.reuse.keepalive,dfs.datanode.max.transfer.threads,dfs.datanode.socket.reuse.keepalive = true => dfs.datanode.max.transfer.threads > {{default}},control
205,dfs.stream-buffer-size,dfs.datanode.max.transfer.threads,dfs.stream-buffer-size > 131072 => dfs.datanode.max.transfer.threads > 4096,control
206,dfs.permissions.enabled,dfs.block.access.token.enable,dfs.permissions.enabled = true => dfs.block.access.token.enable = ANY,control
207,dfs.encrypt.data.transfer,dfs.trustedchannel.resolver.class,dfs.encrypt.data.transfer = true => dfs.trustedchannel.resolver.class != null,control
208,dfs.web.authentication.filter,dfs.web.authentication.kerberos.keytab,"dfs.web.authentication.filter = ""Kerberos"" => dfs.web.authentication.kerberos.keytab != null",control
209,dfs.ha.automatic-failover.enabled,dfs.client.failover.proxy.provider,dfs.ha.automatic-failover.enabled = true => dfs.client.failover.proxy.provider != null,control
210,dfs.nameservices,dfs.ha.automatic-failover.enabled,dfs.nameservices != null => dfs.ha.automatic-failover.enabled = ANY,control
211,dfs.http.policy,dfs.datanode.https.address,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.datanode.https.address != ""null""",control
212,dfs.namenode.avoid.write.stale.datanode,dfs.namenode.stale.datanode.interval,dfs.namenode.stale.datanode.interval > 0 => dfs.namenode.avoid.write.stale.datanode = true,control
213,dfs.client.read.short.circuit.replica.stale.threshold.ms,dfs.domain.socket.path,dfs.domain.socket.path != null => dfs.client.read.short.circuit.replica.stale.threshold.ms in [0..ANY],control
214,dfs.webhdfs.rest-csrf.enabled,dfs.webhdfs.enabled,dfs.webhdfs.enabled = true => dfs.webhdfs.rest-csrf.enabled = ANY,control
215,dfs.namenode.checkpoint.edits.dir,dfs.namenode.checkpoint.period,dfs.namenode.checkpoint.period = ANY => dfs.namenode.checkpoint.edits.dir = ANY,control
216,dfs.ha.automatic-failover.enabled,dfs.ha.fencing.methods,dfs.ha.automatic-failover.enabled = true => dfs.ha.fencing.methods != null,control
217,dfs.namenode.top.window.num.buckets,dfs.namenode.top.enabled,dfs.namenode.top.enabled = true => dfs.namenode.top.window.num.buckets != null,control
218,dfs.journalnode.kerberos.principal,dfs.journalnode.kerberos.internal.spnego.principal,dfs.journalnode.kerberos.principal != null => dfs.journalnode.kerberos.internal.spnego.principal != null,control
219,dfs.namenode.checkpoint.max-retries,dfs.namenode.checkpoint.check.period,dfs.namenode.checkpoint.check.period > 0 => dfs.namenode.checkpoint.max-retries = ANY,control
220,dfs.nameservices,dfs.ha.namenodes.[nameservice ID],dfs.nameservices != null => dfs.ha.namenodes.[nameservice ID] != null,control
221,dfs.namenode.write.stale.datanode.ratio,dfs.namenode.avoid.write.stale.datanode,dfs.namenode.write.stale.datanode.ratio > 0.5f => dfs.namenode.avoid.write.stale.datanode is valid and non-null,control
222,dfs.web.authentication.kerberos.keytab,dfs.client.https.need-auth,dfs.client.https.need-auth = true => dfs.web.authentication.kerberos.keytab != null,control
223,dfs.client.block.write.retries,dfs.client.block.write.replace-datanode-on-failure.best-effort,dfs.client.block.write.replace-datanode-on-failure.best-effort = true => dfs.client.block.write.retries > 0,control
224,dfs.namenode.rpc-address,dfs.namenode.rpc-bind-host,dfs.namenode.rpc-bind-host != null => dfs.namenode.rpc-address = dfs.namenode.rpc-bind-host:<port>,control
225,dfs.client.read.shortcircuit.skip.checksum,dfs.domain.socket.path,dfs.domain.socket.path != null => dfs.client.read.shortcircuit.skip.checksum = ANY,control
226,dfs.webhdfs.rest-csrf.enabled,dfs.webhdfs.rest-csrf.custom-header,dfs.webhdfs.rest-csrf.enabled = true => dfs.webhdfs.rest-csrf.custom-header != null,control
227,dfs.block.misreplication.processing.limit,dfs.namenode.replication.max-streams,dfs.block.misreplication.processing.limit > 100 => dfs.namenode.replication.max-streams > 50,control
228,dfs.http.policy,dfs.datanode.http.address,"dfs.http.policy = ""HTTP_ONLY"" => dfs.datanode.http.address != ""null""",control
229,dfs.namenode.replication.pending.timeout-sec,dfs.heartbeat.interval,dfs.heartbeat.interval < dfs.namenode.replication.pending.timeout-sec => dfs.namenode.replication.pending.timeout-sec > dfs.heartbeat.interval,control
230,dfs.namenode.edits.dir.minimum,dfs.namenode.edits.dir,dfs.namenode.edits.dir != null => dfs.namenode.edits.dir.minimum = ANY,control
231,dfs.namenode.replication.considerLoad,dfs.namenode.replication.min,dfs.namenode.replication.considerLoad = true => dfs.namenode.replication.min <= dfs.replication,control
232,dfs.namenode.stale.datanode.interval,dfs.heartbeat.interval,dfs.namenode.stale.datanode.interval > 0 => dfs.heartbeat.interval < dfs.namenode.stale.datanode.interval,control
233,dfs.namenode.avoid.write.stale.datanode,dfs.namenode.write.stale.datanode.ratio,dfs.namenode.write.stale.datanode.ratio > 0 => dfs.namenode.avoid.write.stale.datanode = true,control
234,dfs.web.authentication.filter,dfs.web.authentication.simple.anonymous.allowed,"dfs.web.authentication.filter = ""Simple"" => dfs.web.authentication.simple.anonymous.allowed = ANY",control
235,dfs.web.authentication.kerberos.keytab,hadoop.security.authentication,dfs.web.authentication.kerberos.keytab != null => hadoop.security.authentication = 'kerberos',control
236,dfs.client.max.block.acquire.failures,dfs.client.block.acquire.retries,dfs.client.max.block.acquire.failures > 0 => dfs.client.block.acquire.retries > 3,control
237,dfs.datanode.address,dfs.http.policy,dfs.http.policy = HTTPS_ONLY => dfs.datanode.https.address != null,control
238,dfs.journalnode.kerberos.principal,dfs.journalnode.keytab.file,dfs.journalnode.kerberos.principal != null => dfs.journalnode.keytab.file != null,control
239,dfs.client.write.byte-array-manager.count-reset-time-period-ms,dfs.client.write.packet.size,dfs.client.write.packet.size > default => dfs.client.write.byte-array-manager.count-reset-time-period-ms < [default..default/2],control
240,dfs.client.retry.policy.enabled,dfs.http.client.retry.policy.spec,dfs.client.retry.policy.enabled = true => dfs.http.client.retry.policy.spec != null,control
241,dfs.client.block.write.replace-datanode-on-failure.enable,dfs.client.block.write.replace-datanode-on-failure.min-replication,dfs.client.block.write.replace-datanode-on-failure.min-replication = ANY => dfs.client.block.write.replace-datanode-on-failure.enable = true,default
242,dfs.namenode.lifeline.rpc-address,dfs.namenode.rpc-bind-host,dfs.namenode.rpc-bind-host = ANY => dfs.namenode.lifeline.rpc-address = {dfs.namenode.rpc-bind-host:port},default
243,dfs.namenode.lifeline.rpc-address,dfs.namenode.rpc-address,dfs.namenode.rpc-address = ANY => dfs.namenode.lifeline.rpc-address = dfs.namenode.rpc-address,default
244,dfs.encrypt.data.transfer,dfs.encrypt.data.transfer.cipher.suites,"dfs.encrypt.data.transfer = ""true"" => dfs.encrypt.data.transfer.cipher.suites != ""null""",default
245,dfs.client.failover.max.attempts,dfs.http.client.failover.sleep.max.millis,dfs.http.client.failover.sleep.max.millis = dfs.client.failover.sleep.max.millis,default
246,dfs.encrypt.data.transfer.cipher.suites,dfs.encrypt.data.transfer.algorithm,dfs.encrypt.data.transfer.cipher.suites = null => dfs.encrypt.data.transfer.algorithm = ANY,default
247,dfs.namenode.name.dir,dfs.namenode.name.dir.restore,dfs.namenode.name.dir.restore = null => dfs.namenode.name.dir = ANY,default
248,dfs.client.failover.max.attempts,dfs.http.client.failover.sleep.base.millis,dfs.http.client.failover.sleep.base.millis = dfs.client.failover.sleep.base.millis,default
249,dfs.namenode.lifeline.rpc-address,dfs.namenode.lifeline.rpc-bind-host,dfs.namenode.lifeline.rpc-bind-host = ANY => dfs.namenode.lifeline.rpc-address = {dfs.namenode.lifeline.rpc-bind-host:port},default
250,dfs.datanode.du.reserved.calculator,dfs.datanode.du.reserved,dfs.datanode.du.reserved.calculator = org.apache.hadoop.hdfs.server.datanode.fsdataset.impl.ReservedSpaceCalculator$ReservedSpaceCalculatorAbsolute => dfs.datanode.du.reserved = ANY,default
251,dfs.client.socketcache.capacity,dfs.client.socketcache.expiryMsec,dfs.client.socketcache.expiryMsec = ANY => dfs.client.socketcache.capacity = ANY,default
252,dfs.namenode.handler.count,dfs.namenode.lifeline.handler.ratio,dfs.namenode.handler.count = ANY => dfs.namenode.lifeline.handler.ratio = (dfs.namenode.handler.count * 0.10),default
253,dfs.webhdfs.oauth2.enabled,dfs.webhdfs.oauth2.refresh.url,dfs.webhdfs.oauth2.enabled = true => dfs.webhdfs.oauth2.refresh.url != null,default
254,dfs.namenode.rpc-bind-host,dfs.namenode.rpc-address,dfs.namenode.rpc-bind-host = null => dfs.namenode.rpc-address = dfs.namenode.rpc-address,default
255,dfs.journalnode.kerberos.internal.spnego.principal,dfs.journalnode.keytab.file,dfs.journalnode.keytab.file = ANY => dfs.journalnode.kerberos.internal.spnego.principal = ANY,default
256,dfs.client.retry.policy.spec,dfs.http.client.retry.policy.spec,dfs.client.retry.policy.spec = ANY => dfs.http.client.retry.policy.spec = dfs.client.retry.policy.spec,default
257,dfs.client.block.write.replace-datanode-on-failure.enable,dfs.client.block.write.replace-datanode-on-failure.policy,dfs.client.block.write.replace-datanode-on-failure.policy = ANY => dfs.client.block.write.replace-datanode-on-failure.enable = true,default
258,dfs.namenode.rpc-address,dfs.namenode.servicerpc-bind-host,dfs.namenode.rpc-address = null => dfs.namenode.servicerpc-bind-host = dfs.namenode.rpc-address,default
259,dfs.http.client.retry.policy.spec,dfs.client.retry.policy.spec,"dfs.client.retry.policy.spec = null => dfs.http.client.retry.policy.spec = ""default""",default
260,dfs.journalnode.kerberos.principal,dfs.journalnode.kerberos.internal.spnego.principal,dfs.journalnode.kerberos.principal = ANY => dfs.journalnode.kerberos.internal.spnego.principal = dfs.journalnode.kerberos.principal,default
261,dfs.client.short.circuit.replica.stale.threshold.ms,dfs.client.read.short.circuit.replica.stale.threshold.ms,dfs.client.read.short.circuit.replica.stale.threshold.ms = null => dfs.client.short.circuit.replica.stale.threshold.ms = dfs.client.read.short.circuit.replica.stale.threshold.ms,default
262,dfs.namenode.backup.dnrpc-address,dfs.namenode.rpc-address,dfs.namenode.backup.dnrpc-address = null => dfs.namenode.backup.dnrpc-address = dfs.namenode.rpc-address,default
263,dfs.namenode.edits.journal-plugin.qjournal,dfs.namenode.edits.journal-plugin,"dfs.namenode.edits.journal-plugin = ""qjournal"" => dfs.namenode.edits.journal-plugin.qjournal = ""ANY""",default
264,dfs.datanode.du.reserved.calculator,dfs.datanode.du.reserved.pct,dfs.datanode.du.reserved.calculator = org.apache.hadoop.hdfs.server.datanode.fsdataset.impl.ReservedSpaceCalculator$ReservedSpaceCalculatorPercentage => dfs.datanode.du.reserved.pct = ANY,default
265,dfs.encrypt.data.transfer,dfs.encrypt.data.transfer.algorithm,"dfs.encrypt.data.transfer = ""true"" => dfs.encrypt.data.transfer.algorithm != ""null""",default
266,dfs.blocksize,dfs.client.read.prefetch.size,dfs.blocksize = ANY => dfs.client.read.prefetch.size = 10 * ${dfs.blocksize},default
267,dfs.http.client.retry.policy.enabled,dfs.http.client.retry.policy.spec,dfs.http.client.retry.policy.enabled = true => dfs.http.client.retry.policy.spec != null,default
268,dfs.client.block.write.replace-datanode-on-failure.enable,dfs.client.block.write.replace-datanode-on-failure.best-effort,dfs.client.block.write.replace-datanode-on-failure.best-effort = ANY => dfs.client.block.write.replace-datanode-on-failure.enable = true,default
269,dfs.namenode.replication.min,dfs.namenode.maintenance.replication.min,dfs.namenode.replication.min = ANY => dfs.namenode.maintenance.replication.min = dfs.namenode.replication.min,default
270,dfs.http.client.retry.max.attempts,dfs.client.retry.max.attempts,dfs.client.retry.max.attempts = null => dfs.http.client.retry.max.attempts = default,default
271,dfs.http.client.retry.policy.enabled,dfs.http.client.failover.sleep.base.millis,dfs.http.client.retry.policy.enabled = true => dfs.http.client.failover.sleep.base.millis > 0,default
272,dfs.client.failover.sleep.base.millis,dfs.http.client.failover.sleep.base.millis,dfs.http.client.failover.sleep.base.millis = dfs.client.failover.sleep.base.millis,default
273,dfs.https.server.keystore.resource,dfs.client.https.keystore.resource,dfs.client.https.keystore.resource = null => dfs.https.server.keystore.resource = ANY,default
274,dfs.block.access.key.update.interval,dfs.block.access.token.lifetime,dfs.block.access.key.update.interval = ANY => dfs.block.access.token.lifetime = dfs.block.access.key.update.interval,default
275,dfs.namenode.replication.min,dfs.namenode.safemode.replication.min,dfs.namenode.safemode.replication.min = null => dfs.namenode.safemode.replication.min = dfs.namenode.replication.min,default
276,dfs.namenode.replication.min,dfs.namenode.max-corrupt-file-blocks-returned,dfs.namenode.replication.min = ANY => dfs.namenode.max-corrupt-file-blocks-returned = dfs.namenode.replication.min,default
277,dfs.namenode.lifeline.handler.ratio,dfs.namenode.lifeline.handler.count,dfs.namenode.lifeline.handler.ratio != null => dfs.namenode.lifeline.handler.count = ANY,overwrite
278,dfs.qjournal.prepare-recovery.timeout.ms,dfs.qjournal.start-segment.timeout.ms,dfs.qjournal.start-segment.timeout.ms = dfs.qjournal.prepare-recovery.timeout.ms,value
279,dfs.http.client.failover.sleep.base.millis,dfs.http.client.failover.sleep.max.millis,dfs.http.client.failover.sleep.max.millis > dfs.http.client.failover.sleep.base.millis,value
280,dfs.datanode.max.transfer.threads,dfs.datanode.handler.count,dfs.datanode.handler.count = ANY => dfs.datanode.max.transfer.threads > dfs.datanode.handler.count,value
281,dfs.namenode.resource.checked.volumes,dfs.namenode.resource.checked.volumes.minimum,dfs.namenode.resource.checked.volumes >= dfs.namenode.resource.checked.volumes.minimum,value
282,dfs.permissions.enabled,fs.permissions.umask-mode,"dfs.permissions.enabled = true => fs.permissions.umask-mode in {{022, 002, 077}}",value
283,dfs.client.failover.sleep.base.millis,dfs.client.failover.sleep.max.millis,dfs.client.failover.sleep.base.millis < dfs.client.failover.sleep.max.millis,value
284,dfs.client.read.short.circuit.replica.stale.threshold.ms,dfs.client.read.short.circuit.replica.stale.threshold.ms,dfs.client.read.short.circuit.replica.stale.threshold.ms = dfs.client.read.short.circuit.replica.stale.threshold.ms,value
285,dfs.datanode.transfer.socket.send.buffer.size,dfs.client.socket.send.buffer.size,dfs.client.socket.send.buffer.size = dfs.datanode.transfer.socket.send.buffer.size,value
286,dfs.qjournal.get-journal-state.timeout.ms,dfs.qjournal.write-txns.timeout.ms,dfs.qjournal.write-txns.timeout.ms = dfs.qjournal.get-journal-state.timeout.ms,value
287,dfs.client.failover.proxy.provider,dfs.client.failover.max.attempts,dfs.client.failover.max.attempts > 0 => dfs.client.failover.proxy.provider = ANY,value
288,dfs.namenode.num.extra.edits.retained,dfs.namenode.max.extra.edits.segments.retained,dfs.namenode.max.extra.edits.segments.retained = ANY => dfs.namenode.num.extra.edits.retained = ANY,value
289,dfs.namenode.resource.checked.volumes,dfs.namenode.resource.du.reserved,dfs.namenode.resource.checked.volumes > 0 => dfs.namenode.resource.du.reserved > 0,value
290,dfs.datanode.max.transfer.threads,dfs.datanode.balance.bandwidthPerSec,dfs.datanode.balance.bandwidthPerSec = ANY => dfs.datanode.max.transfer.threads > (dfs.datanode.balance.bandwidthPerSec / 1048576),value
291,dfs.namenode.checkpoint.dir,dfs.namenode.checkpoint.period,dfs.namenode.checkpoint.period > 0 => dfs.namenode.checkpoint.dir != null,value
292,dfs.block.access.key.update.interval,dfs.block.access.token.lifetime,dfs.block.access.token.lifetime = X => dfs.block.access.key.update.interval < X,value
293,dfs.client.retry.window.base,dfs.client.retry.policy.spec,dfs.client.retry.window.base = <Expression> => dfs.client.retry.policy.spec = <Expression>,value
294,dfs.qjm.operations.timeout,dfs.qjournal.select-input-streams.timeout.ms,dfs.qjm.operations.timeout = dfs.qjournal.select-input-streams.timeout.ms,value
295,dfs.namenode.rpc-bind-host,dfs.namenode.http-bind-host,dfs.namenode.rpc-bind-host != null => dfs.namenode.http-bind-host = <Expression>,value
296,dfs.balancer.moverThreads,dfs.balancer.getBlocks.min-block-size,dfs.balancer.getBlocks.min-block-size = ANY => dfs.balancer.moverThreads = ANY,value
297,dfs.namenode.replication.max-streams,dfs.namenode.replication.max-streams-hard-limit,dfs.namenode.replication.max-streams < dfs.namenode.replication.max-streams-hard-limit,value
298,dfs.client.read.shortcircuit,dfs.client.read.shortcircuit.skip.checksum,"dfs.client.read.shortcircuit = true => dfs.client.read.shortcircuit.skip.checksum in {true, false}",value
299,dfs.namenode.rpc-address,dfs.http.policy,dfs.http.policy = HTTPS => dfs.namenode.rpc-address != null,value
300,dfs.data.transfer.protection,dfs.data.transfer.sasl.properties,"dfs.data.transfer.protection in {{integrity, privacy}} => dfs.data.transfer.sasl.properties in {{""QOP=auth-int"", ""QOP=auth-conf""}}",value
301,dfs.namenode.resource.du.reserved,dfs.datanode.du.reserved.pct,dfs.datanode.du.reserved.pct in [0..100] => dfs.namenode.resource.du.reserved = dfs.datanode.du.reserved * (dfs.datanode.du.reserved.pct / 100),value
302,dfs.replication,dfs.namenode.safemode.replication.min,dfs.replication > dfs.namenode.safemode.replication.min,value
303,dfs.image.transfer.bandwidthPerSec,dfs.datanode.balance.bandwidthPerSec,dfs.image.transfer.bandwidthPerSec > 0 => dfs.image.transfer.bandwidthPerSec < dfs.datanode.balance.bandwidthPerSec,value
304,dfs.namenode.top.num.users,dfs.namenode.top.windows.minutes,dfs.namenode.top.windows.minutes > 0 => dfs.namenode.top.num.users > 0,value
305,dfs.namenode.replication.min,dfs.namenode.maintenance.replication.min,dfs.namenode.replication.min < dfs.namenode.maintenance.replication.min,value
306,dfs.namenode.resource.checked.volumes.minimum,dfs.namenode.resource.du.reserved,dfs.namenode.resource.checked.volumes.minimum < dfs.namenode.resource.du.reserved => dfs.namenode.resource.du.reserved > dfs.namenode.resource.checked.volumes.minimum,value
307,dfs.namenode.safemode.min.datanodes,dfs.namenode.safemode.replication.min,dfs.namenode.safemode.replication.min > 0 => dfs.namenode.safemode.min.datanodes > 0,value
308,dfs.namenode.kerberos.principal.pattern,dfs.namenode.kerberos.principal,dfs.namenode.kerberos.principal = ANY => dfs.namenode.kerberos.principal.pattern = ANY,value
309,dfs.client.socketcache.capacity,dfs.blocksize,dfs.client.socketcache.capacity > {{ANY}} => dfs.blocksize > {{ANY}},value
310,dfs.http.client.failover.sleep.base.millis,dfs.client.failover.sleep.max.millis,dfs.client.failover.sleep.max.millis > dfs.client.failover.sleep.base.millis,value
311,dfs.namenode.service.handler.count,dfs.namenode.lifeline.handler.ratio,dfs.namenode.service.handler.count = dfs.namenode.handler.count * dfs.namenode.lifeline.handler.ratio,value
312,dfs.image.transfer.chunksize,dfs.image.transfer.bandwidthPerSec,dfs.image.transfer.bandwidthPerSec > 0 => dfs.image.transfer.chunksize = (dfs.image.transfer.bandwidthPerSec * dfs.image.transfer.timeout),value
313,dfs.client.read.shortcircuit.skip.checksum,dfs.client.read.shortcircuit.streams.cache.size,dfs.client.read.shortcircuit.streams.cache.size > 0 => dfs.client.read.shortcircuit.skip.checksum = ANY,value
314,dfs.client.block.write.replace-datanode-on-failure.min-replication,dfs.replication,dfs.client.block.write.replace-datanode-on-failure.min-replication < dfs.replication,value
315,dfs.https.server.keystore.resource,dfs.https.server.keystore.type,"dfs.https.server.keystore.resource != null => dfs.https.server.keystore.type in {{""JKS"", ""PKCS12""}}",value
316,dfs.client.block.write.replace-datanode-on-failure.min-replication,dfs.replication,dfs.replication > dfs.client.block.write.replace-datanode-on-failure.min-replication => dfs.client.block.write.replace-datanode-on-failure.min-replication < dfs.replication,value
317,dfs.datanode.ipc.address,dfs.datanode.https.address,dfs.datanode.ipc.address = dfs.datanode.https.address,value
318,dfs.namenode.stale.datanode.minimum.interval,dfs.namenode.stale.datanode.interval,dfs.namenode.stale.datanode.minimum.interval > 0 => dfs.namenode.stale.datanode.interval = (dfs.namenode.stale.datanode.minimum.interval * dfs.heartbeat.interval),value
319,dfs.client.failover.max.attempts,dfs.client.failover.connection.retries,dfs.client.failover.connection.retries < dfs.client.failover.max.attempts,value
320,dfs.balancer.moverThreads,dfs.balancer.max-size-to-move,dfs.balancer.max-size-to-move = ANY => dfs.balancer.moverThreads = ANY,value
321,dfs.ha.fencing.ssh.connect-timeout,ha.health-monitor.rpc-timeout.ms,ha.health-monitor.rpc-timeout.ms > dfs.ha.fencing.ssh.connect-timeout => dfs.ha.fencing.ssh.connect-timeout < ha.health-monitor.rpc-timeout.ms,value
322,dfs.namenode.maintenance.replication.min,dfs.namenode.safemode.replication.min,dfs.namenode.maintenance.replication.min = <Singlevalue> => dfs.namenode.safemode.replication.min = <Singlevalue>,value
323,dfs.journalnode.rpc-address,dfs.journalnode.http-address,dfs.journalnode.rpc-address != null => dfs.journalnode.http-address != null,value
324,dfs.namenode.kerberos.principal,dfs.web.authentication.kerberos.principal,dfs.namenode.kerberos.principal != null => dfs.web.authentication.kerberos.principal in { dfs.namenode.kerberos.principal },value
325,dfs.client.failover.random.order,dfs.client.failover.max.attempts,dfs.client.failover.max.attempts > 0 => dfs.client.failover.random.order = ANY,value
326,dfs.namenode.replication.pending.timeout-sec,dfs.replication,dfs.replication > dfs.namenode.replication.min => dfs.namenode.replication.pending.timeout-sec = ANY,value
327,dfs.namenode.max.full.block.report.leases,dfs.namenode.full.block.report.lease.length.ms,dfs.namenode.full.block.report.lease.length.ms > 0 => dfs.namenode.max.full.block.report.leases = ANY,value
328,dfs.encrypt.data.transfer.cipher.key.bitlength,dfs.encrypt.data.transfer.cipher.suites,dfs.encrypt.data.transfer.cipher.suites != null => dfs.encrypt.data.transfer.cipher.key.bitlength != null,value
329,dfs.qjournal.accept-recovery.timeout.ms,dfs.qjournal.finalize-segment.timeout.ms,dfs.qjournal.finalize-segment.timeout.ms = dfs.qjournal.accept-recovery.timeout.ms,value
330,dfs.client.hedged.read.threshold.millis,dfs.client.hedged.read.threadpool.size,dfs.client.hedged.read.threadpool.size > 0 => dfs.client.hedged.read.threshold.millis > 0,value
331,dfs.namenode.delegation.token.always-use,dfs.namenode.delegation.token.max-lifetime,"dfs.namenode.delegation.token.max-lifetime > 0 => dfs.namenode.delegation.token.always-use in {true, false}",value
332,dfs.client.retry.policy.enabled,dfs.client.retry.policy.spec,dfs.client.retry.policy.enabled = true => dfs.client.retry.policy.spec != null,value
333,dfs.client.failover.max.attempts,dfs.client.failover.sleep.max.millis,dfs.client.failover.sleep.max.millis > dfs.client.failover.sleep.base.millis,value
334,dfs.namenode.top.window.num.buckets,dfs.namenode.top.num.users,dfs.namenode.top.num.users > 0 => dfs.namenode.top.window.num.buckets > 0,value
335,dfs.client.failover.random.order,dfs.client.failover.sleep.base.millis,dfs.client.failover.sleep.base.millis > 0 => dfs.client.failover.random.order = ANY,value
336,dfs.replication.max,dfs.namenode.replication.min,dfs.replication.max > dfs.namenode.replication.min,value
337,dfs.image.transfer-bootstrap-standby.bandwidthPerSec,dfs.datanode.balance.bandwidthPerSec,dfs.datanode.balance.bandwidthPerSec = dfs.image.transfer-bootstrap-standby.bandwidthPerSec,value
338,dfs.client.failover.sleep.base.millis,dfs.client.failover.sleep.max.millis,dfs.client.failover.sleep.base.millis < dfs.client.failover.sleep.max.millis,value
339,dfs.namenode.num.extra.edits.retained,dfs.namenode.num.checkpoints.retained,dfs.namenode.num.checkpoints.retained = ANY => dfs.namenode.num.extra.edits.retained = ANY,value
340,dfs.qjm.operations.timeout,dfs.qjournal.accept-recovery.timeout.ms,dfs.qjm.operations.timeout = dfs.qjournal.accept-recovery.timeout.ms,value
341,dfs.namenode.handler.count,dfs.namenode.lifeline.handler.count,dfs.namenode.lifeline.handler.count = dfs.namenode.handler.count * dfs.namenode.lifeline.handler.ratio,value
342,dfs.namenode.servicerpc-bind-host,dfs.namenode.https-bind-host,dfs.namenode.https-bind-host = ANY => dfs.namenode.servicerpc-bind-host = ANY,value
343,dfs.webhdfs.use.ipc.callq,dfs.client.use.datanode.hostname,dfs.client.use.datanode.hostname = true => dfs.webhdfs.use.ipc.callq != true,value
344,dfs.journalnode.rpc-address,dfs.journalnode.https-address,dfs.journalnode.rpc-address != null => dfs.journalnode.https-address != null,value
345,dfs.client.retry.window.base,dfs.client.retry.times.get-last-block-length,dfs.client.retry.window.base = <Expression> => dfs.client.retry.times.get-last-block-length = <Expression>,value
346,dfs.http.client.retry.max.attempts,dfs.http.client.failover.max.attempts,dfs.http.client.failover.max.attempts > 0 => dfs.http.client.retry.max.attempts > dfs.http.client.failover.max.attempts,value
347,dfs.webhdfs.rest-csrf.custom-header,dfs.webhdfs.rest-csrf.methods-to-ignore,"dfs.webhdfs.rest-csrf.custom-header != null => dfs.webhdfs.rest-csrf.methods-to-ignore in {GET, POST, PUT, DELETE}",value
348,dfs.cachereport.intervalMsec,dfs.blockreport.incremental.intervalMsec,dfs.blockreport.incremental.intervalMsec = dfs.cachereport.intervalMsec,value
349,dfs.web.authentication.filter,dfs.http.policy,"dfs.web.authentication.filter != null => dfs.http.policy in {""HTTP_ONLY"", ""HTTPS_ONLY""}",value
350,dfs.datanode.du.reserved,dfs.namenode.resource.du.reserved,dfs.namenode.resource.du.reserved = dfs.datanode.du.reserved,value
351,dfs.namenode.delegation.token.max-lifetime,dfs.namenode.delegation.token.renew-interval,dfs.namenode.delegation.token.renew-interval < dfs.namenode.delegation.token.max-lifetime,value
352,dfs.http.client.retry.policy.spec,dfs.http.client.failover.max.attempts,"dfs.http.client.failover.max.attempts > 0 => dfs.http.client.retry.policy.spec = ""maxRetries="" + dfs.http.client.failover.max.attempts",value
353,dfs.journalnode.http-address,dfs.journalnode.http-bind-host,"dfs.journalnode.http-bind-host != null => dfs.journalnode.http-address = ""ANY""",value
354,dfs.journalnode.kerberos.principal,hadoop.security.auth_to_local,dfs.journalnode.kerberos.principal = <principal>@<REALM> => hadoop.security.auth_to_local contains 'RULE:[1:$1@$0](.*@<REALM>)s/@<REALM>//',value
355,dfs.balancer.getBlocks.min-block-size,dfs.namenode.fs-limits.min-block-size,dfs.namenode.fs-limits.min-block-size < dfs.balancer.getBlocks.min-block-size => dfs.balancer.getBlocks.min-block-size > dfs.namenode.fs-limits.min-block-size,value
356,dfs.namenode.https-address,dfs.namenode.https-bind-host,"dfs.namenode.https-bind-host != null => dfs.namenode.https-address = dfs.namenode.https-bind-host + "":50470""",value
357,dfs.namenode.kerberos.principal.pattern,dfs.web.authentication.kerberos.principal,dfs.web.authentication.kerberos.principal = ANY => dfs.namenode.kerberos.principal.pattern = ANY,value
358,dfs.balancer.movedWinWidth,dfs.balancer.dispatcherThreads,dfs.balancer.dispatcherThreads > 0 => dfs.balancer.movedWinWidth = ANY,value
359,dfs.namenode.safemode.threshold-pct,dfs.namenode.safemode.extension,dfs.namenode.safemode.threshold-pct = 0 => dfs.namenode.safemode.extension = 0,value
360,dfs.namenode.lifeline.handler.ratio,dfs.namenode.handler.count,dfs.namenode.lifeline.handler.ratio > 0 => dfs.namenode.handler.count = dfs.namenode.lifeline.handler.count / dfs.namenode.lifeline.handler.ratio,value
361,dfs.namenode.top.window.num.buckets,dfs.namenode.top.windows.minutes,dfs.namenode.top.windows.minutes > 0 => dfs.namenode.top.window.num.buckets > 0,value
362,dfs.balancer.kerberos.principal,dfs.http.policy,dfs.balancer.kerberos.principal != null => dfs.http.policy in {HTTPS_ONLY},value
363,dfs.datanode.du.reserved,dfs.datanode.du.reserved.pct,dfs.datanode.du.reserved.pct > 0 => dfs.datanode.du.reserved = dfs.datanode.du.reserved.pct * total_disk_space,value
364,dfs.journalnode.https-address,dfs.journalnode.https-bind-host,dfs.journalnode.https-bind-host != null => dfs.journalnode.https-address = dfs.journalnode.https-bind-host:<PortExpression>,value
365,dfs.namenode.delegation.key.update-interval,dfs.namenode.delegation.token.renew-interval,dfs.namenode.delegation.token.renew-interval < dfs.namenode.delegation.key.update-interval,value
366,dfs.http.client.retry.policy.spec,dfs.http.client.failover.sleep.max.millis,"dfs.http.client.failover.sleep.max.millis > 0 => dfs.http.client.retry.policy.spec = ""maxSleepTime="" + dfs.http.client.failover.sleep.max.millis",value
367,dfs.namenode.stale.datanode.interval,dfs.namenode.write.stale.datanode.ratio,dfs.namenode.write.stale.datanode.ratio > 0 => dfs.namenode.stale.datanode.interval > 0,value
368,dfs.namenode.service.handler.count,dfs.namenode.lifeline.handler.count,dfs.namenode.service.handler.count = dfs.namenode.lifeline.handler.count + dfs.namenode.handler.count,value
369,dfs.stream-buffer-size,dfs.client-write-packet-size,dfs.stream-buffer-size < dfs.client-write-packet-size => dfs.client-write-packet-size > dfs.stream-buffer-size,value
370,dfs.webhdfs.oauth2.access.token.provider,dfs.webhdfs.oauth2.client.id,dfs.webhdfs.oauth2.client.id != null => dfs.webhdfs.oauth2.access.token.provider != null,value
371,dfs.internal.nameservices,dfs.ha.namenode.id,dfs.internal.nameservices in {dfs.ha.namenode.id},value
372,dfs.datanode.drop.cache.behind.reads,dfs.datanode.drop.cache.behind.writes,dfs.datanode.drop.cache.behind.writes = dfs.datanode.drop.cache.behind.reads,value
373,dfs.balancer.moverThreads,dfs.datanode.balance.max.concurrent.moves,dfs.datanode.balance.max.concurrent.moves = ANY => dfs.balancer.moverThreads = ANY,value
374,dfs.client.write.byte-array-manager.count-reset-time-period-ms,dfs.client.write.byte-array-manager.count-threshold,dfs.client.write.byte-array-manager.count-threshold > 0 => dfs.client.write.byte-array-manager.count-reset-time-period-ms > 0,value
375,dfs.blockreport.intervalMsec,dfs.blockreport.initialDelay,dfs.blockreport.initialDelay > 0 => dfs.blockreport.intervalMsec > dfs.blockreport.initialDelay,value
376,dfs.client.use.legacy.blockreader.local,dfs.client.use.legacy.blockreader,dfs.client.use.legacy.blockreader = true => dfs.client.use.legacy.blockreader.local = false,value
377,dfs.datanode.drop.cache.behind.reads,dfs.client.cache.drop.behind.reads,dfs.client.cache.drop.behind.reads = dfs.datanode.drop.cache.behind.reads,value
378,dfs.namenode.rpc-bind-host,dfs.namenode.https-bind-host,dfs.namenode.rpc-bind-host != null => dfs.namenode.https-bind-host = <Expression>,value
379,dfs.namenode.replication.considerLoad,dfs.replication,dfs.namenode.replication.considerLoad = true => dfs.replication >= dfs.namenode.replication.min,value
380,dfs.replication.max,dfs.replication.min,dfs.replication.max > dfs.replication.min,value
381,dfs.namenode.checkpoint.dir,dfs.namenode.num.checkpoints.retained,dfs.namenode.num.checkpoints.retained > 0 => dfs.namenode.checkpoint.dir != null,value
382,dfs.namenode.edits.journal-plugin.qjournal,dfs.qjournal.start-segment.timeout.ms,"dfs.qjournal.start-segment.timeout.ms > 0 => dfs.namenode.edits.journal-plugin.qjournal = ""ANY""",value
383,dfs.client.retry.interval-ms.get-last-block-length,dfs.client.retry.max.attempts,dfs.client.retry.max.attempts > 0 => dfs.client.retry.interval-ms.get-last-block-length = ANY,value
384,dfs.balancer.moverThreads,dfs.balancer.getBlocks.size,dfs.balancer.getBlocks.size = ANY => dfs.balancer.moverThreads = ANY,value
385,dfs.client.failover.proxy.provider,dfs.client.failover.sleep.max.millis,dfs.client.failover.sleep.max.millis > 0 => dfs.client.failover.proxy.provider = ANY,value
386,dfs.balancer.address,dfs.balancer.dispatcherThreads,dfs.balancer.dispatcherThreads > 0 => dfs.balancer.address != null,value
387,dfs.namenode.fs-limits.max-xattrs-per-inode,dfs.namenode.fs-limits.max-xattr-size,dfs.namenode.fs-limits.max-xattr-size > 0 => dfs.namenode.fs-limits.max-xattrs-per-inode > 0,value
388,dfs.namenode.checkpoint.dir,dfs.namenode.checkpoint.txns,dfs.namenode.checkpoint.txns > 0 => dfs.namenode.checkpoint.dir != null,value
389,dfs.datanode.hostname,dfs.datanode.https.address,"dfs.datanode.hostname != null => dfs.datanode.https.address = {dfs.datanode.hostname + "":50475""}",value
390,dfs.namenode.handler.count,dfs.datanode.handler.count,dfs.datanode.handler.count = dfs.namenode.handler.count,value
391,dfs.client.use.datanode.hostname,dfs.datanode.use.datanode.hostname,dfs.datanode.use.datanode.hostname = true => dfs.client.use.datanode.hostname = true,value
392,dfs.namenode.stale.datanode.interval,dfs.namenode.heartbeat.recheck-interval,dfs.namenode.heartbeat.recheck-interval > 0 => dfs.namenode.stale.datanode.interval > dfs.namenode.heartbeat.recheck-interval,value
393,dfs.client.block.write.replace-datanode-on-failure.policy,dfs.client.block.write.replace-datanode-on-failure.best-effort,dfs.client.block.write.replace-datanode-on-failure.best-effort = true => dfs.client.block.write.replace-datanode-on-failure.policy = ANY,value
394,dfs.replication,dfs.replication.max,dfs.replication < dfs.replication.max,value
395,dfs.client.write.max-packets-in-flight,dfs.client.write.byte-array-manager.count-threshold,dfs.client.write.byte-array-manager.count-threshold > 0 => dfs.client.write.max-packets-in-flight < 1000,value
396,dfs.namenode.retrycache.expirytime.millis,dfs.client.failover.sleep.max.millis,dfs.client.failover.sleep.max.millis < dfs.namenode.retrycache.expirytime.millis,value
397,dfs.client.block.write.locateFollowingBlock.initial.delay.ms,dfs.client.block.write.locateFollowingBlock.retries,dfs.client.block.write.locateFollowingBlock.retries > 0 => dfs.client.block.write.locateFollowingBlock.initial.delay.ms = ANY,value
398,dfs.namenode.stale.datanode.minimum.interval,dfs.namenode.write.stale.datanode.ratio,dfs.namenode.write.stale.datanode.ratio > 0 => dfs.namenode.stale.datanode.minimum.interval > 0,value
399,dfs.namenode.secondary.https-address,dfs.namenode.https-bind-host,dfs.namenode.https-bind-host != null => dfs.namenode.secondary.https-address != null,value
400,dfs.namenode.delegation.key.update-interval,dfs.block.access.key.update.interval,dfs.block.access.key.update.interval = dfs.namenode.delegation.key.update-interval,value
401,dfs.image.transfer.timeout,dfs.image.transfer.bandwidthPerSec,dfs.image.transfer.bandwidthPerSec > 0 => dfs.image.transfer.timeout = ANY,value
402,dfs.block.access.key.update.interval,dfs.block.access.token.lifetime,dfs.block.access.token.lifetime > dfs.block.access.key.update.interval => dfs.block.access.key.update.interval < dfs.block.access.token.lifetime,value
403,dfs.http.client.retry.policy.spec,dfs.http.client.failover.sleep.base.millis,"dfs.http.client.failover.sleep.base.millis > 0 => dfs.http.client.retry.policy.spec = ""sleepTime="" + dfs.http.client.failover.sleep.base.millis",value
404,dfs.balancer.max-no-move-interval,dfs.balancer.max-size-to-move,dfs.balancer.max-size-to-move > 0 => dfs.balancer.max-no-move-interval > 0,value
405,dfs.namenode.rpc-bind-host,dfs.namenode.lifeline.rpc-bind-host,dfs.namenode.rpc-bind-host != null => dfs.namenode.lifeline.rpc-bind-host = <Expression>,value
406,dfs.client.block.write.replace-datanode-on-failure.policy,dfs.client.block.write.replace-datanode-on-failure.min-replication,dfs.client.block.write.replace-datanode-on-failure.min-replication < dfs.replication => dfs.client.block.write.replace-datanode-on-failure.policy = ANY,value
407,dfs.qjournal.prepare-recovery.timeout.ms,dfs.qjournal.select-input-streams.timeout.ms,dfs.qjournal.select-input-streams.timeout.ms = dfs.qjournal.prepare-recovery.timeout.ms,value
408,dfs.namenode.edits.dir.minimum,dfs.namenode.edits.dir,dfs.namenode.edits.dir.minimum = 1 => dfs.namenode.edits.dir in {valid_directories},value
409,dfs.namenode.safemode.min.datanodes,dfs.namenode.safemode.extension,dfs.namenode.safemode.extension > 0 => dfs.namenode.safemode.min.datanodes > 0,value
410,dfs.replication,dfs.namenode.replication.min,dfs.replication > dfs.namenode.replication.min,value
411,dfs.balancer.movedWinWidth,dfs.balancer.max-size-to-move,dfs.balancer.max-size-to-move > 0 => dfs.balancer.movedWinWidth = ANY,value
412,dfs.qjm.operations.timeout,dfs.qjournal.new-epoch.timeout.ms,dfs.qjm.operations.timeout = dfs.qjournal.new-epoch.timeout.ms,value
413,dfs.heartbeat.interval,dfs.namenode.heartbeat.recheck-interval,dfs.namenode.heartbeat.recheck-interval > dfs.heartbeat.interval,value
414,dfs.namenode.http-address,dfs.datanode.use.datanode.hostname,dfs.datanode.use.datanode.hostname = true => dfs.namenode.http-address != ANY,value
415,dfs.balancer.getBlocks.min-block-size,dfs.blocksize,dfs.blocksize > dfs.balancer.getBlocks.min-block-size => dfs.balancer.getBlocks.min-block-size < dfs.blocksize,value
416,dfs.replication,dfs.replication.max,dfs.replication < dfs.replication.max,value
417,dfs.internal.nameservices,dfs.ha.namenodes.EXAMPLENAMESERVICE,dfs.internal.nameservices in {dfs.ha.namenodes.EXAMPLENAMESERVICE},value
418,dfs.namenode.servicerpc-bind-host,dfs.namenode.http-bind-host,dfs.namenode.http-bind-host = ANY => dfs.namenode.servicerpc-bind-host = ANY,value
419,dfs.qjournal.get-journal-state.timeout.ms,dfs.qjournal.finalize-segment.timeout.ms,dfs.qjournal.finalize-segment.timeout.ms = dfs.qjournal.get-journal-state.timeout.ms,value
420,dfs.secondary.namenode.kerberos.internal.spnego.principal,dfs.namenode.kerberos.internal.spnego.principal,dfs.secondary.namenode.kerberos.internal.spnego.principal = dfs.namenode.kerberos.internal.spnego.principal,value
421,dfs.qjournal.start-segment.timeout.ms,dfs.qjournal.finalize-segment.timeout.ms,dfs.qjournal.finalize-segment.timeout.ms = dfs.qjournal.start-segment.timeout.ms,value
422,dfs.qjournal.get-journal-state.timeout.ms,dfs.qjournal.select-input-streams.timeout.ms,dfs.qjournal.select-input-streams.timeout.ms = dfs.qjournal.get-journal-state.timeout.ms,value
423,dfs.namenode.handler.count,dfs.namenode.service.handler.count,dfs.namenode.service.handler.count = dfs.namenode.handler.count,value
424,dfs.qjournal.accept-recovery.timeout.ms,dfs.qjournal.select-input-streams.timeout.ms,dfs.qjournal.select-input-streams.timeout.ms = dfs.qjournal.accept-recovery.timeout.ms,value
425,dfs.qjournal.get-journal-state.timeout.ms,dfs.qjournal.new-epoch.timeout.ms,dfs.qjournal.new-epoch.timeout.ms = dfs.qjournal.get-journal-state.timeout.ms,value
426,dfs.balancer.max-no-move-interval,dfs.balancer.dispatcherThreads,dfs.balancer.dispatcherThreads > 0 => dfs.balancer.max-no-move-interval > 0,value
427,dfs.namenode.max-num-blocks-to-log,dfs.namenode.max.op.size,dfs.namenode.max.op.size > dfs.namenode.max-num-blocks-to-log => dfs.namenode.max-num-blocks-to-log < dfs.namenode.max.op.size,value
428,dfs.balancer.dispatcherThreads,dfs.balancer.moverThreads,dfs.balancer.moverThreads = dfs.balancer.dispatcherThreads,value
429,dfs.namenode.edits.dir,dfs.namenode.checkpoint.edits.dir,dfs.namenode.checkpoint.edits.dir = ANY => dfs.namenode.edits.dir = ANY,value
430,dfs.client.slow.io.warning.threshold.ms,dfs.datanode.slow.io.warning.threshold.ms,dfs.datanode.slow.io.warning.threshold.ms = dfs.client.slow.io.warning.threshold.ms,value
431,dfs.webhdfs.rest-csrf.enabled,dfs.webhdfs.rest-csrf.methods-to-ignore,"dfs.webhdfs.rest-csrf.enabled = true => dfs.webhdfs.rest-csrf.methods-to-ignore in {GET, HEAD, OPTIONS}",value
432,dfs.namenode.http-address,dfs.client.use.datanode.hostname,dfs.client.use.datanode.hostname = true => dfs.namenode.http-address != ANY,value
433,dfs.webhdfs.netty.low.watermark,dfs.webhdfs.netty.high.watermark,dfs.webhdfs.netty.high.watermark > dfs.webhdfs.netty.low.watermark,value
434,dfs.qjournal.accept-recovery.timeout.ms,dfs.qjournal.write-txns.timeout.ms,dfs.qjournal.write-txns.timeout.ms = dfs.qjournal.accept-recovery.timeout.ms,value
435,dfs.encrypt.data.transfer.algorithm,dfs.encrypt.data.transfer.cipher.key.bitlength,"dfs.encrypt.data.transfer.algorithm = ""AES/CTR/NoPadding"" => dfs.encrypt.data.transfer.cipher.key.bitlength in {128, 192, 256}",value
436,dfs.balancer.moverThreads,dfs.balancer.block-move.timeout,dfs.balancer.block-move.timeout = ANY => dfs.balancer.moverThreads = ANY,value
437,dfs.namenode.rpc-address,dfs.client.use.datanode.hostname,dfs.client.use.datanode.hostname = true => dfs.namenode.rpc-address != null,value
438,dfs.client.failover.max.attempts,dfs.client.failover.connection.retries.on.timeouts,dfs.client.failover.connection.retries.on.timeouts < dfs.client.failover.max.attempts,value
439,dfs.http.client.failover.max.attempts,dfs.http.client.failover.sleep.max.millis,dfs.http.client.failover.sleep.max.millis > dfs.http.client.failover.sleep.base.millis,value
440,dfs.namenode.replication.max-streams,dfs.replication,dfs.replication > 1 => dfs.namenode.replication.max-streams > dfs.replication,value
441,dfs.block.invalidate.limit,dfs.block.misreplication.processing.limit,dfs.block.misreplication.processing.limit > 0 => dfs.block.invalidate.limit < dfs.block.misreplication.processing.limit,value
442,dfs.namenode.edekcacheloader.initial.delay.ms,dfs.namenode.edekcacheloader.interval.ms,dfs.namenode.edekcacheloader.interval.ms > 0 => dfs.namenode.edekcacheloader.initial.delay.ms < dfs.namenode.edekcacheloader.interval.ms,value
443,dfs.namenode.backup.http-address,dfs.namenode.https-address,dfs.namenode.https-address != null => dfs.namenode.backup.http-address in {ANY},value
444,dfs.ha.tail-edits.period,dfs.ha.tail-edits.rolledits.timeout,dfs.ha.tail-edits.rolledits.timeout > 0 => dfs.ha.tail-edits.period > 0,value
445,dfs.client.block.write.retries,dfs.client.retry.max.attempts,dfs.client.retry.max.attempts > 0 => dfs.client.block.write.retries > 0,value
446,dfs.qjm.operations.timeout,dfs.qjournal.start-segment.timeout.ms,dfs.qjm.operations.timeout = dfs.qjournal.start-segment.timeout.ms,value
447,dfs.datanode.transfer.socket.send.buffer.size,dfs.datanode.transfer.socket.recv.buffer.size,dfs.datanode.transfer.socket.recv.buffer.size = dfs.datanode.transfer.socket.send.buffer.size,value
448,dfs.mover.max-no-move-interval,dfs.mover.max-no-move-interval,dfs.mover.max-no-move-interval = dfs.balancer.max-no-move-interval,value
449,dfs.blocksize,dfs.namenode.fs-limits.min-block-size,dfs.namenode.fs-limits.min-block-size < dfs.blocksize,value
450,dfs.namenode.edits.dir,dfs.namenode.shared.edits.dir,dfs.namenode.shared.edits.dir = ANY => dfs.namenode.edits.dir = ANY,value
451,dfs.namenode.delegation.token.always-use,dfs.namenode.delegation.key.update-interval,"dfs.namenode.delegation.key.update-interval > 0 => dfs.namenode.delegation.token.always-use in {true, false}",value
452,dfs.https.port,dfs.https.server.keystore.resource,dfs.https.port != null => dfs.https.server.keystore.resource != null,value
453,dfs.client.read.shortcircuit,dfs.client.use.legacy.blockreader.local,"dfs.client.read.shortcircuit = true => dfs.client.use.legacy.blockreader.local in {true, false}",value
454,dfs.journalnode.http-address,dfs.journalnode.https-address,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.journalnode.http-address != dfs.journalnode.https-address",value
455,dfs.qjournal.get-journal-state.timeout.ms,dfs.qjournal.prepare-recovery.timeout.ms,dfs.qjournal.prepare-recovery.timeout.ms = dfs.qjournal.get-journal-state.timeout.ms,value
456,dfs.client.read.shortcircuit.buffer.size,dfs.client.read.shortcircuit.streams.cache.size,dfs.client.read.shortcircuit.streams.cache.size > 256 => dfs.client.read.shortcircuit.buffer.size < 1048576,value
457,dfs.data.transfer.protection,dfs.data.transfer.saslproperties.resolver.class,dfs.data.transfer.protection != null => dfs.data.transfer.saslproperties.resolver.class = ANY,value
458,dfs.namenode.rpc-bind-host,dfs.journalnode.rpc-bind-host,dfs.namenode.rpc-bind-host != null => dfs.journalnode.rpc-bind-host = <Expression>,value
459,dfs.ha.fencing.methods,dfs.namenode.handler.count,"dfs.namenode.handler.count > 10 => dfs.ha.fencing.methods in {""shell(/path/to/script)"", ""sshfence""}",value
460,dfs.namenode.decommission.interval,dfs.namenode.decommission.blocks.per.interval,dfs.namenode.decommission.interval > 0 => dfs.namenode.decommission.blocks.per.interval > 0,value
461,dfs.qjournal.accept-recovery.timeout.ms,dfs.qjournal.new-epoch.timeout.ms,dfs.qjournal.new-epoch.timeout.ms = dfs.qjournal.accept-recovery.timeout.ms,value
462,dfs.client.read.shortcircuit.buffer.size,dfs.client.read.short.circuit.replica.stale.threshold.ms,dfs.client.read.short.circuit.replica.stale.threshold.ms < 60000 => dfs.client.read.shortcircuit.buffer.size < 1048576,value
463,dfs.client.block.write.retries,dfs.client.block.write.replace-datanode-on-failure.min-replication,dfs.client.block.write.replace-datanode-on-failure.min-replication > 1 => dfs.client.block.write.retries > 0,value
464,dfs.cachereport.intervalMsec,dfs.blockreport.intervalMsec,dfs.blockreport.intervalMsec = dfs.cachereport.intervalMsec,value
465,dfs.client.failover.random.order,dfs.client.failover.sleep.max.millis,dfs.client.failover.sleep.max.millis > 0 => dfs.client.failover.random.order = ANY,value
466,dfs.client.failover.proxy.provider,dfs.client.failover.random.order,dfs.client.failover.random.order = true => dfs.client.failover.proxy.provider = ANY,value
467,dfs.datanode.available-space-volume-choosing-policy.balanced-space-preference-fraction,dfs.datanode.available-space-volume-choosing-policy.balanced-space-threshold,dfs.datanode.available-space-volume-choosing-policy.balanced-space-threshold > 0 => dfs.datanode.available-space-volume-choosing-policy.balanced-space-preference-fraction = (0..1),value
468,dfs.datanode.du.reserved.calculator,dfs.datanode.du.reserved,dfs.datanode.du.reserved.calculator = ANY => dfs.datanode.du.reserved = ANY,value
469,dfs.qjournal.prepare-recovery.timeout.ms,dfs.qjournal.new-epoch.timeout.ms,dfs.qjournal.new-epoch.timeout.ms = dfs.qjournal.prepare-recovery.timeout.ms,value
470,dfs.client.domain.socket.data.traffic,dfs.client.read.shortcircuit.streams.cache.size,dfs.client.read.shortcircuit.streams.cache.size > 0 => dfs.client.domain.socket.data.traffic = true,value
471,dfs.client.failover.sleep.base.millis,dfs.http.client.failover.sleep.max.millis,dfs.client.failover.sleep.base.millis < dfs.http.client.failover.sleep.max.millis,value
472,dfs.client.write.byte-array-manager.enabled,dfs.client.write.byte-array-manager.count-threshold,dfs.client.write.byte-array-manager.enabled = true => dfs.client.write.byte-array-manager.count-threshold > 0,value
473,dfs.http.client.retry.policy.spec,dfs.http.client.retry.max.attempts,"dfs.http.client.retry.max.attempts > 0 => dfs.http.client.retry.policy.spec = ""maxRetries="" + dfs.http.client.retry.max.attempts",value
474,dfs.qjm.operations.timeout,dfs.qjournal.prepare-recovery.timeout.ms,dfs.qjm.operations.timeout = dfs.qjournal.prepare-recovery.timeout.ms,value
475,dfs.blocksize,dfs.client.read.shortcircuit.buffer.size,dfs.blocksize > 0 => dfs.client.read.shortcircuit.buffer.size = 1048576,value
476,dfs.namenode.avoid.read.stale.datanode,dfs.namenode.avoid.write.stale.datanode,dfs.namenode.avoid.write.stale.datanode = true => dfs.namenode.avoid.read.stale.datanode = true,value
477,dfs.namenode.backup.http-address,dfs.namenode.http-address,dfs.namenode.http-address != null => dfs.namenode.backup.http-address in {ANY},value
478,dfs.client.cache.drop.behind.writes,dfs.datanode.drop.cache.behind.reads,dfs.client.cache.drop.behind.writes = true => dfs.datanode.drop.cache.behind.reads = true,value
479,dfs.qjournal.accept-recovery.timeout.ms,dfs.qjournal.prepare-recovery.timeout.ms,dfs.qjournal.prepare-recovery.timeout.ms = dfs.qjournal.accept-recovery.timeout.ms,value
480,dfs.webhdfs.oauth2.access.token.provider,dfs.webhdfs.oauth2.refresh.url,dfs.webhdfs.oauth2.refresh.url != null => dfs.webhdfs.oauth2.access.token.provider != null,value
481,dfs.datanode.hostname,dfs.datanode.ipc.address,"dfs.datanode.hostname != null => dfs.datanode.ipc.address = {dfs.datanode.hostname + "":50020""}",value
482,dfs.heartbeat.interval,dfs.namenode.stale.datanode.minimum.interval,dfs.heartbeat.interval > 0 => dfs.namenode.stale.datanode.minimum.interval = 3,value
483,dfs.client.retry.max.attempts,dfs.client.failover.max.attempts,dfs.client.failover.max.attempts > 0 => dfs.client.retry.max.attempts = (dfs.client.failover.max.attempts + 1),value
484,dfs.image.transfer-bootstrap-standby.bandwidthPerSec,dfs.image.transfer.bandwidthPerSec,dfs.image.transfer.bandwidthPerSec = dfs.image.transfer-bootstrap-standby.bandwidthPerSec,value
485,dfs.bytes-per-checksum,dfs.stream-buffer-size,dfs.bytes-per-checksum < dfs.stream-buffer-size,value
486,dfs.client.write.byte-array-manager.count-limit,dfs.client.write.byte-array-manager.count-reset-time-period-ms,dfs.client.write.byte-array-manager.count-reset-time-period-ms > 0 => dfs.client.write.byte-array-manager.count-limit = ANY,value
487,dfs.balancer.keytab.file,dfs.http.policy,dfs.http.policy = HTTPS => dfs.balancer.keytab.file != null,value
488,dfs.datanode.hostname,dfs.datanode.address,"dfs.datanode.hostname != null => dfs.datanode.address = {dfs.datanode.hostname + "":50010""}",value
489,dfs.namenode.servicerpc-address,dfs.namenode.rpc-address,dfs.namenode.rpc-address != null => dfs.namenode.servicerpc-address != dfs.namenode.rpc-address,value
490,dfs.namenode.replication.min,dfs.namenode.safemode.replication.min,dfs.namenode.replication.min < dfs.namenode.safemode.replication.min,value
491,dfs.balancer.dispatcherThreads,dfs.datanode.balance.max.concurrent.moves,dfs.datanode.balance.max.concurrent.moves = dfs.balancer.dispatcherThreads,value
492,dfs.datanode.https.address,datanode.https.port,"datanode.https.port = <Number> => dfs.datanode.https.address = <Expression> + "":"" + datanode.https.port",value
493,dfs.namenode.retrycache.expirytime.millis,dfs.client.failover.sleep.base.millis,dfs.client.failover.sleep.base.millis < dfs.namenode.retrycache.expirytime.millis,value
494,dfs.qjournal.prepare-recovery.timeout.ms,dfs.qjournal.write-txns.timeout.ms,dfs.qjournal.write-txns.timeout.ms = dfs.qjournal.prepare-recovery.timeout.ms,value
495,dfs.blockreport.intervalMsec,dfs.blockreport.incremental.intervalMsec,dfs.blockreport.incremental.intervalMsec > 0 => dfs.blockreport.intervalMsec > dfs.blockreport.incremental.intervalMsec,value
496,dfs.datanode.ipc.address,dfs.datanode.http.address,dfs.datanode.ipc.address = dfs.datanode.http.address,value
497,dfs.data.transfer.protection,dfs.encrypt.data.transfer.cipher.key.bitlength,dfs.encrypt.data.transfer = true => dfs.encrypt.data.transfer.cipher.key.bitlength = ANY,value
498,dfs.balancer.block-move.timeout,dfs.balancer.max-size-to-move,dfs.balancer.max-size-to-move > 0 => dfs.balancer.block-move.timeout = ANY,value
499,dfs.datanode.address,dfs.datanode.ipc.address,dfs.datanode.address = ANY => dfs.datanode.ipc.address = ANY,value
500,dfs.client.block.write.retries,dfs.client.block.write.locateFollowingBlock.retries,dfs.client.block.write.locateFollowingBlock.retries > 0 => dfs.client.block.write.retries > 0,value
501,dfs.webhdfs.rest-csrf.enabled,dfs.webhdfs.rest-csrf.custom-header,dfs.webhdfs.rest-csrf.enabled = true => dfs.webhdfs.rest-csrf.custom-header != null,value
502,dfs.client.cache.drop.behind.reads,dfs.client.cache.drop.behind.writes,dfs.client.cache.drop.behind.writes = dfs.client.cache.drop.behind.reads,value
503,dfs.webhdfs.rest-csrf.enabled,dfs.webhdfs.rest-csrf.browser-useragents-regex,dfs.webhdfs.rest-csrf.enabled = true => dfs.webhdfs.rest-csrf.browser-useragents-regex != null,value
504,dfs.namenode.replication.pending.timeout-sec,dfs.namenode.replication.min,dfs.namenode.replication.min < dfs.replication => dfs.namenode.replication.pending.timeout-sec = ANY,value
505,dfs.namenode.rpc-bind-host,dfs.namenode.servicerpc-bind-host,dfs.namenode.rpc-bind-host != null => dfs.namenode.servicerpc-bind-host = <Expression>,value
506,dfs.qjournal.start-segment.timeout.ms,dfs.qjournal.new-epoch.timeout.ms,dfs.qjournal.new-epoch.timeout.ms = dfs.qjournal.start-segment.timeout.ms,value
507,dfs.replication,dfs.namenode.maintenance.replication.min,dfs.replication > dfs.namenode.maintenance.replication.min,value
508,dfs.qjournal.prepare-recovery.timeout.ms,dfs.qjournal.finalize-segment.timeout.ms,dfs.qjournal.finalize-segment.timeout.ms = dfs.qjournal.prepare-recovery.timeout.ms,value
509,dfs.client.retry.times.get-last-block-length,dfs.client.retry.max.attempts,dfs.client.retry.max.attempts = ANY => dfs.client.retry.times.get-last-block-length = ANY,value
510,dfs.http.port,datanode.https.port,dfs.http.port != datanode.https.port,value
511,dfs.datanode.fsdataset.volume.choosing.policy,dfs.datanode.available-space-volume-choosing-policy.balanced-space-threshold,"dfs.datanode.fsdataset.volume.choosing.policy = ""AvailableSpaceVolumeChoosingPolicy"" => dfs.datanode.available-space-volume-choosing-policy.balanced-space-threshold > 0",value
512,dfs.namenode.retrycache.heap.percent,dfs.namenode.retrycache.expirytime.millis,dfs.namenode.retrycache.expirytime.millis > 0 => dfs.namenode.retrycache.heap.percent > 0,value
513,dfs.client.failover.proxy.provider,dfs.client.failover.sleep.base.millis,dfs.client.failover.sleep.base.millis > 0 => dfs.client.failover.proxy.provider = ANY,value
514,dfs.datanode.hostname,dfs.datanode.http.address,"dfs.datanode.hostname != null => dfs.datanode.http.address = {dfs.datanode.hostname + "":50075""}",value
515,dfs.balancer.address,dfs.balancer.moverThreads,dfs.balancer.moverThreads > 0 => dfs.balancer.address != null,value
516,dfs.namenode.secondary.https-address,dfs.namenode.https-address,dfs.namenode.https-address != null => dfs.namenode.secondary.https-address != null,value
517,dfs.namenode.edits.journal-plugin.qjournal,dfs.qjournal.select-input-streams.timeout.ms,"dfs.qjournal.select-input-streams.timeout.ms > 0 => dfs.namenode.edits.journal-plugin.qjournal = ""ANY""",value
518,dfs.namenode.decommission.blocks.per.interval,dfs.namenode.decommission.max.concurrent.tracked.nodes,dfs.namenode.decommission.max.concurrent.tracked.nodes > 0 => dfs.namenode.decommission.blocks.per.interval > 0,value
519,dfs.bytes-per-checksum,dfs.blocksize,dfs.bytes-per-checksum < dfs.blocksize,value
520,dfs.client.write.byte-array-manager.count-limit,dfs.client.write.byte-array-manager.count-threshold,dfs.client.write.byte-array-manager.count-threshold > 0 => dfs.client.write.byte-array-manager.count-limit > dfs.client.write.byte-array-manager.count-threshold,value
521,dfs.datanode.address,dfs.datanode.https.address,dfs.datanode.address = ANY => dfs.datanode.https.address = ANY,value
522,dfs.balancer.getBlocks.size,dfs.balancer.getBlocks.min-block-size,dfs.balancer.getBlocks.min-block-size < dfs.balancer.getBlocks.size,value
523,dfs.block.invalidate.limit,dfs.namenode.replication.work.multiplier.per.iteration,dfs.namenode.replication.work.multiplier.per.iteration > 0 => dfs.block.invalidate.limit = dfs.namenode.replication.work.multiplier.per.iteration * ANY,value
524,dfs.datanode.https.address,dfs.https.port,"dfs.https.port = <PortNumber> => dfs.datanode.https.address in {{ ""ANY:.."" + <PortNumber> + ""..ANY"" }}",value
525,dfs.namenode.safemode.threshold-pct,dfs.namenode.safemode.min.datanodes,dfs.namenode.safemode.threshold-pct > 0 => dfs.namenode.safemode.min.datanodes > 0,value
526,dfs.replication.max,dfs.namenode.safemode.replication.min,dfs.replication.max > dfs.namenode.safemode.replication.min => dfs.namenode.safemode.replication.min = [1 .. dfs.replication.max],value
527,dfs.client.retry.window.base,dfs.client.failover.sleep.base.millis,dfs.client.retry.window.base = <Expression> => dfs.client.failover.sleep.base.millis = <Expression>,value
528,dfs.qjm.operations.timeout,dfs.qjournal.finalize-segment.timeout.ms,dfs.qjm.operations.timeout = dfs.qjournal.finalize-segment.timeout.ms,value
529,dfs.client.write.max-packets-in-flight,dfs.client.block.write.replace-datanode-on-failure.min-replication,dfs.client.block.write.replace-datanode-on-failure.min-replication > 1 => dfs.client.write.max-packets-in-flight < 100,value
530,dfs.balancer.movedWinWidth,dfs.balancer.moverThreads,dfs.balancer.moverThreads > 0 => dfs.balancer.movedWinWidth = ANY,value
531,dfs.balancer.moverThreads,dfs.balancer.max-no-move-interval,dfs.balancer.max-no-move-interval = ANY => dfs.balancer.moverThreads = ANY,value
532,dfs.http.client.failover.max.attempts,dfs.http.client.failover.sleep.base.millis,dfs.http.client.failover.sleep.base.millis < dfs.http.client.failover.max.attempts,value
533,dfs.webhdfs.use.ipc.callq,dfs.datanode.use.datanode.hostname,dfs.datanode.use.datanode.hostname = true => dfs.webhdfs.use.ipc.callq != true,value
534,dfs.client.read.shortcircuit,dfs.client.read.shortcircuit.buffer.size,dfs.client.read.shortcircuit = true => dfs.client.read.shortcircuit.buffer.size > 0,value
535,dfs.client.retry.policy.spec,dfs.client.socket-timeout,dfs.client.socket-timeout = <Number> => dfs.client.retry.policy.spec = <Expression>,value
536,dfs.webhdfs.socket.read-timeout,dfs.webhdfs.socket.connect-timeout,dfs.webhdfs.socket.connect-timeout = dfs.webhdfs.socket.read-timeout,value
537,dfs.balancer.max-no-move-interval,dfs.mover.max-no-move-interval,dfs.mover.max-no-move-interval > 0 => dfs.balancer.max-no-move-interval > 0,value
538,dfs.qjournal.start-segment.timeout.ms,dfs.qjournal.write-txns.timeout.ms,dfs.qjournal.write-txns.timeout.ms = dfs.qjournal.start-segment.timeout.ms,value
539,dfs.webhdfs.acl.provider.permission.pattern,dfs.webhdfs.user.provider.user.pattern,dfs.webhdfs.user.provider.user.pattern = ANY => dfs.webhdfs.acl.provider.permission.pattern = ANY,value
540,dfs.client.block.write.replace-datanode-on-failure.min-replication,dfs.namenode.replication.min,dfs.namenode.replication.min > dfs.client.block.write.replace-datanode-on-failure.min-replication => dfs.client.block.write.replace-datanode-on-failure.min-replication < dfs.namenode.replication.min,value
541,dfs.http.client.failover.sleep.base.millis,dfs.http.client.failover.sleep.max.millis,dfs.http.client.failover.sleep.base.millis < dfs.http.client.failover.sleep.max.millis,value
542,dfs.https.port,dfs.namenode.https-address,"dfs.namenode.https-address = ""ANY"" => dfs.https.port = <Singlevalue>",value
543,dfs.balancer.max-no-move-interval,dfs.balancer.movedWinWidth,dfs.balancer.movedWinWidth > 0 => dfs.balancer.max-no-move-interval > 0,value
544,dfs.bytes-per-checksum,dfs.client-write-packet-size,dfs.bytes-per-checksum < dfs.client-write-packet-size,value
545,dfs.checksum.type,dfs.bytes-per-checksum,dfs.bytes-per-checksum = dfs.checksum.type => dfs.bytes-per-checksum = ANY,value
546,dfs.blockreport.intervalMsec,dfs.heartbeat.interval,dfs.heartbeat.interval > 0 => dfs.blockreport.intervalMsec = dfs.heartbeat.interval * 3,value
547,dfs.client.retry.window.base,dfs.client.retry.max.attempts,dfs.client.retry.window.base = <Expression> => dfs.client.retry.max.attempts = <Expression>,value
548,dfs.datanode.address,dfs.datanode.http.address,dfs.datanode.address = ANY => dfs.datanode.http.address = ANY,value
549,dfs.namenode.max-num-blocks-to-log,dfs.namenode.replication.max-streams-hard-limit,dfs.namenode.replication.max-streams-hard-limit > dfs.namenode.max-num-blocks-to-log => dfs.namenode.max-num-blocks-to-log < dfs.namenode.replication.max-streams-hard-limit,value
550,dfs.webhdfs.rest-csrf.custom-header,dfs.webhdfs.rest-csrf.browser-useragents-regex,dfs.webhdfs.rest-csrf.custom-header != null => dfs.webhdfs.rest-csrf.browser-useragents-regex = ANY,value
551,dfs.namenode.lifeline.handler.ratio,dfs.namenode.lifeline.handler.count,dfs.namenode.lifeline.handler.ratio > 0 => dfs.namenode.lifeline.handler.count = dfs.namenode.handler.count * dfs.namenode.lifeline.handler.ratio,value
552,dfs.namenode.lease-recheck-interval-ms,dfs.namenode.heartbeat.recheck-interval,dfs.namenode.heartbeat.recheck-interval > 0 => dfs.namenode.lease-recheck-interval-ms = dfs.namenode.heartbeat.recheck-interval * 1000,value
553,dfs.http.client.failover.sleep.max.millis,dfs.client.failover.sleep.base.millis,dfs.client.failover.sleep.base.millis < dfs.http.client.failover.sleep.max.millis,value
554,dfs.namenode.max-num-blocks-to-log,dfs.namenode.replication.max-streams,dfs.namenode.replication.max-streams > dfs.namenode.max-num-blocks-to-log => dfs.namenode.max-num-blocks-to-log < dfs.namenode.replication.max-streams,value
555,dfs.webhdfs.oauth2.enabled,dfs.http.policy,dfs.http.policy = HTTPS_ONLY => dfs.webhdfs.oauth2.enabled = true,value
556,dfs.qjournal.accept-recovery.timeout.ms,dfs.qjournal.start-segment.timeout.ms,dfs.qjournal.start-segment.timeout.ms = dfs.qjournal.accept-recovery.timeout.ms,value
557,dfs.namenode.kerberos.internal.spnego.principal,dfs.web.authentication.kerberos.principal,dfs.web.authentication.kerberos.principal = dfs.namenode.kerberos.internal.spnego.principal,value
558,dfs.replication.max,dfs.namenode.replication.min,dfs.replication.max > dfs.namenode.replication.min => dfs.namenode.replication.min = [1 .. dfs.replication.max],value
559,dfs.mover.movedWinWidth,dfs.balancer.movedWinWidth,dfs.balancer.movedWinWidth = dfs.mover.movedWinWidth,value
560,dfs.replication,dfs.namenode.maintenance.replication.min,dfs.replication > dfs.namenode.maintenance.replication.min,value
561,dfs.datanode.drop.cache.behind.writes,dfs.client.cache.drop.behind.writes,dfs.client.cache.drop.behind.writes = ANY => dfs.datanode.drop.cache.behind.writes = ANY,value
562,dfs.namenode.secondary.http-address,dfs.namenode.secondary.https-address,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.namenode.secondary.https-address != null",value
563,dfs.web.authentication.simple.anonymous.allowed,dfs.permissions.enabled,dfs.permissions.enabled = true => dfs.web.authentication.simple.anonymous.allowed = false,value
564,dfs.qjournal.start-segment.timeout.ms,dfs.qjournal.select-input-streams.timeout.ms,dfs.qjournal.select-input-streams.timeout.ms = dfs.qjournal.start-segment.timeout.ms,value
565,dfs.namenode.decommission.interval,dfs.namenode.decommission.max.concurrent.tracked.nodes,dfs.namenode.decommission.interval > 0 => dfs.namenode.decommission.max.concurrent.tracked.nodes > 0,value
566,dfs.client.domain.socket.data.traffic,dfs.client.read.shortcircuit.skip.checksum,dfs.client.read.shortcircuit.skip.checksum = true => dfs.client.domain.socket.data.traffic = true,value
567,dfs.blockreport.intervalMsec,dfs.blockreport.split.threshold,dfs.blockreport.split.threshold > 0 => dfs.blockreport.intervalMsec < dfs.blockreport.split.threshold * 1000,value
568,dfs.namenode.edits.asynclogging,dfs.namenode.edits.toleration.length,dfs.namenode.edits.asynclogging = true => dfs.namenode.edits.toleration.length > [1024..65536],value
569,dfs.nameservice.id,dfs.internal.nameservices,dfs.nameservice.id in {dfs.internal.nameservices} => dfs.nameservice.id = ANY,value
570,dfs.http.port,dfs.https.port,dfs.http.port != dfs.https.port,value
571,dfs.encrypt.data.transfer.algorithm,dfs.encrypt.data.transfer.cipher.suites,"dfs.encrypt.data.transfer.algorithm = ""AES/CTR/NoPadding"" => dfs.encrypt.data.transfer.cipher.suites in {""AES/CTR/NoPadding""}",value
572,dfs.namenode.http-bind-host,dfs.namenode.https-bind-host,dfs.namenode.http-bind-host != null => dfs.namenode.https-bind-host = <Expression>,value
573,dfs.client.retry.window.base,dfs.client.retry.interval-ms.get-last-block-length,dfs.client.retry.window.base = <Expression> => dfs.client.retry.interval-ms.get-last-block-length = <Expression>,value
574,dfs.journalnode.kerberos.principal,dfs.journalnode.kerberos.realm,dfs.journalnode.kerberos.principal = <principal>@<realm> => dfs.journalnode.kerberos.realm = <realm>,value
575,dfs.client.failover.max.attempts,dfs.client.failover.sleep.base.millis,dfs.client.failover.sleep.base.millis < dfs.client.failover.max.attempts * 1000,value
576,dfs.domain.socket.path,hbase.dfs.client.read.shortcircuit.buffer.size,dfs.client.read.shortcircuit = true => dfs.domain.socket.path != null,value
577,dfs.replication.max,dfs.namenode.maintenance.replication.min,dfs.replication.max > dfs.namenode.maintenance.replication.min => dfs.namenode.maintenance.replication.min = [1 .. dfs.replication.max],value
