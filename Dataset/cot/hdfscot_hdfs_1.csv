id,Parameter1,Parameter2,bnf,type
764,dfs.namenode.lease-recheck-interval-ms,dfs.namenode.lease-period,dfs.namenode.lease-recheck-interval-ms < dfs.namenode.lease-period,behavior
1044,dfs.web.authentication.filter,hadoop.http.authentication.type,"<Variable> = ""dfs.web.authentication.filter"" => <Variable> = ""hadoop.http.authentication.type""",behavior
327,dfs.namenode.delegation.key.update-interval,dfs.namenode.delegation.token.max-lifetime,dfs.namenode.delegation.key.update-interval < dfs.namenode.delegation.token.max-lifetime => dfs.namenode.delegation.token.max-lifetime > dfs.namenode.delegation.key.update-interval,behavior
311,dfs.hosts,dfs.hosts.exclude,dfs.hosts != null => dfs.hosts.exclude != null,behavior
951,dfs.ha.standby.checkpoints,dfs.ha.tail-edits.period,dfs.ha.standby.checkpoints = true => dfs.ha.tail-edits.period > 0,behavior
735,dfs.client.read.shortcircuit,dfs.client.read.shortcircuit.skip.checksum,"dfs.client.read.shortcircuit = true => dfs.client.read.shortcircuit.skip.checksum in {true, false}",behavior
860,dfs.client.block.write.locateFollowingBlock.retries,dfs.client.socket-timeout,dfs.client.block.write.locateFollowingBlock.retries > 3 => dfs.client.socket-timeout > 60000,behavior
427,dfs.namenode.safemode.replication.min,dfs.namenode.safemode.threshold-pct,dfs.namenode.safemode.replication.min = ANY => dfs.namenode.safemode.threshold-pct = ANY,behavior
864,dfs.client.failover.random.order,dfs.client.retry.policy.enabled,dfs.client.failover.random.order = true => dfs.client.retry.policy.enabled = true,behavior
896,dfs.client.socket-timeout,dfs.datanode.socket.write.timeout,dfs.client.socket-timeout > 0 => dfs.datanode.socket.write.timeout = dfs.client.socket-timeout + 1000,behavior
842,dfs.client.https.need-auth,dfs.https.server.keystore.resource,"dfs.https.server.keystore.resource != ""null"" => dfs.client.https.need-auth = ""true""",behavior
370,dfs.datanode.dns.interface,dfs.datanode.dns.nameserver,dfs.datanode.dns.interface != null => dfs.datanode.dns.nameserver != null,behavior
571,dfs.client.failover.connection.retries,dfs.client.failover.sleep.max.millis,dfs.client.failover.connection.retries > 0 => dfs.client.failover.sleep.max.millis > dfs.client.failover.sleep.base.millis,behavior
551,dfs.datanode.scan.period.hours,dfs.datanode.directoryscan.interval,dfs.datanode.scan.period.hours > 0 => dfs.datanode.directoryscan.interval = [1..24],behavior
430,dfs.client.block.write.retries,dfs.client.socket-timeout,dfs.client.block.write.retries > 1 => dfs.client.socket-timeout > 60000,behavior
881,dfs.client.replica.accessor.builder.classes,dfs.client.replica.selector.class,dfs.client.replica.accessor.builder.classes != null => dfs.client.replica.selector.class != null,behavior
980,dfs.namenode.audit.log.async,dfs.namenode.audit.log.maxretainminutes,dfs.namenode.audit.log.async = true => dfs.namenode.audit.log.maxretainminutes > 0,behavior
495,dfs.stream-buffer-size,dfs.datanode.hdfs-blocks-metadata.enabled,dfs.stream-buffer-size > 65536 => dfs.datanode.hdfs-blocks-metadata.enabled = true,behavior
912,dfs.client.write.byte-array-manager.count-reset-time-period-ms,dfs.client.write.byte-array-manager.enabled,dfs.client.write.byte-array-manager.enabled = true => dfs.client.write.byte-array-manager.count-reset-time-period-ms > 0,behavior
722,dfs.namenode.path.based.cache.refresh.interval.ms,dfs.namenode.path.based.cache.retry.interval.ms,dfs.namenode.path.based.cache.refresh.interval.ms < dfs.namenode.path.based.cache.retry.interval.ms => dfs.namenode.path.based.cache.retry.interval.ms = dfs.namenode.path.based.cache.refresh.interval.ms * 0.5,behavior
616,dfs.datanode.kerberos.principal,hadoop.security.authentication,dfs.datanode.kerberos.principal != null => hadoop.security.authentication = 'kerberos',behavior
898,dfs.client.socketcache.capacity,dfs.client.socket-timeout,dfs.client.socketcache.capacity > {{ANY}} => dfs.client.socket-timeout > {{ANY}},behavior
622,dfs.journalnode.kerberos.principal,dfs.namenode.kerberos.principal,dfs.journalnode.kerberos.principal != null => dfs.namenode.kerberos.principal != null,behavior
820,dfs.http.client.failover.max.attempts,dfs.http.client.failover.sleep.max.millis,dfs.http.client.failover.max.attempts > 1 => dfs.http.client.failover.sleep.max.millis > dfs.http.client.failover.sleep.base.millis,behavior
487,dfs.namenode.accesstime.precision,dfs.namenode.checkpoint.period,dfs.namenode.accesstime.precision < 3600 => dfs.namenode.checkpoint.period < 3600,behavior
1025,dfs.qjournal.start-segment.timeout.ms,ipc.client.connect.timeout,dfs.qjournal.start-segment.timeout.ms > 0 => ipc.client.connect.timeout > dfs.qjournal.start-segment.timeout.ms,behavior
565,dfs.client.failover.max.attempts,dfs.client.failover.sleep.base.millis,dfs.client.failover.max.attempts > 5 => dfs.client.failover.sleep.base.millis < 1000,behavior
331,dfs.namenode.lifeline.rpc-bind-host,dfs.namenode.rpc-bind-host,dfs.namenode.lifeline.rpc-bind-host != null => dfs.namenode.rpc-bind-host != null,behavior
488,dfs.datanode.plugins,dfs.datanode.shared.file.descriptor.paths,dfs.datanode.plugins != null => dfs.datanode.shared.file.descriptor.paths != null,behavior
829,dfs.namenode.hosts.provider.classname,dfs.ha.automatic-failover.enabled,dfs.namenode.hosts.provider.classname != default => dfs.ha.automatic-failover.enabled = true,behavior
399,dfs.namenode.edits.journal-plugin.qjournal,dfs.ha.tail-edits.period,dfs.namenode.edits.journal-plugin.qjournal != null => dfs.ha.tail-edits.period > 0,behavior
846,dfs.balancer.block-move.timeout,dfs.balancer.movedWinWidth,dfs.balancer.block-move.timeout > 600000 => dfs.balancer.movedWinWidth > 5400000,behavior
282,dfs.namenode.edits.dir.required,dfs.namenode.shared.edits.dir,dfs.namenode.edits.dir.required != null => dfs.namenode.shared.edits.dir != null,behavior
440,dfs.blockreport.intervalMsec,dfs.namenode.replication.interval,dfs.blockreport.intervalMsec > 60000 => dfs.namenode.replication.interval > 300,behavior
686,dfs.namenode.audit.loggers,dfs.namenode.audit.log.maxfilesize,"dfs.namenode.audit.loggers = ""ANY"" => dfs.namenode.audit.log.maxfilesize = ""ANY""",behavior
710,dfs.client.short.circuit.replica.stale.threshold.ms,dfs.client.read.shortcircuit,dfs.client.read.shortcircuit = true => dfs.client.short.circuit.replica.stale.threshold.ms > 0,behavior
1016,dfs.qjournal.new-epoch.timeout.ms,dfs.ha.tail-edits.period,dfs.qjournal.new-epoch.timeout.ms < 60000 => dfs.ha.tail-edits.period < 60,behavior
960,dfs.journalnode.edits.dir,dfs.ha.tail-edits.period,dfs.journalnode.edits.dir != null => dfs.ha.tail-edits.period in {{30..60}},behavior
573,dfs.client.failover.connection.retries.on.timeouts,dfs.client.failover.sleep.max.millis,dfs.client.failover.connection.retries.on.timeouts > 0 => dfs.client.failover.sleep.max.millis > dfs.client.failover.sleep.base.millis,behavior
369,dfs.namenode.https-address,dfs.https.need.client.auth,dfs.namenode.https-address != null => dfs.https.need.client.auth = ANY,behavior
392,dfs.namenode.fs-limits.max-blocks-per-file,dfs.blocksize,dfs.namenode.fs-limits.max-blocks-per-file > 1 => dfs.blocksize < (file_size / dfs.namenode.fs-limits.max-blocks-per-file),behavior
1039,dfs.secondary.namenode.keytab.file,hadoop.security.auth_to_local,dfs.secondary.namenode.keytab.file != null => hadoop.security.auth_to_local != null,behavior
405,dfs.cluster.administrators,dfs.permissions.enabled,dfs.cluster.administrators != null => dfs.permissions.enabled = true,behavior
859,dfs.client.block.write.locateFollowingBlock.retries,dfs.client.block.write.retries,dfs.client.block.write.locateFollowingBlock.retries > 0 => dfs.client.block.write.retries > 0,behavior
494,dfs.namenode.block-placement-policy.default.prefer-local-node,dfs.blocksize,dfs.namenode.block-placement-policy.default.prefer-local-node = true => dfs.blocksize > 0,behavior
1009,dfs.qjournal.accept-recovery.timeout.ms,dfs.ha.tail-edits.period,dfs.qjournal.accept-recovery.timeout.ms < dfs.ha.tail-edits.period,behavior
398,dfs.namenode.edits.dir.required,dfs.namenode.name.dir,dfs.namenode.edits.dir.required = true => dfs.namenode.name.dir != null,behavior
1022,dfs.qjournal.queued-edits.limit.mb,ipc.client.connect.timeout,dfs.qjournal.queued-edits.limit.mb > 100 => ipc.client.connect.timeout > 60000,behavior
956,dfs.https.port,dfs.https.need.client.auth,"dfs.https.port != null => dfs.https.need.client.auth = {true, false}",behavior
914,dfs.client.write.byte-array-manager.count-threshold,dfs.client.write.byte-array-manager.limit-per-thread,dfs.client.write.byte-array-manager.count-threshold > 0 => dfs.client.write.byte-array-manager.limit-per-thread > 0,behavior
468,dfs.datanode.balance.bandwidthPerSec,dfs.datanode.balance.max.concurrent.moves,dfs.datanode.balance.bandwidthPerSec > 0 => dfs.datanode.balance.max.concurrent.moves > 0,behavior
394,dfs.namenode.top.window.num.buckets,dfs.namenode.top.num.users,dfs.namenode.top.window.num.buckets > 0 => dfs.namenode.top.num.users > 0,behavior
925,dfs.data.transfer.client.tcpnodelay,dfs.data.transfer.socket.receive.buffer.size,dfs.data.transfer.client.tcpnodelay = true => dfs.data.transfer.socket.receive.buffer.size > 0,behavior
633,dfs.web.authentication.kerberos.principal,dfs.web.authentication.kerberos.keytab,dfs.web.authentication.kerberos.principal != null => dfs.web.authentication.kerberos.keytab != null,behavior
718,dfs.namenode.list.cache.directives.num.responses,dfs.namenode.list.cache.directives.expiry.time.millis,dfs.namenode.list.cache.directives.expiry.time.millis < 60000 => dfs.namenode.list.cache.directives.num.responses in {{100..500}},behavior
779,dfs.datanode.cache.revocation.timeout.ms,dfs.datanode.max.locked.memory,dfs.datanode.cache.revocation.timeout.ms > 0 => dfs.datanode.max.locked.memory > 0,behavior
1428,dfs.journalnode.kerberos.principal,dfs.encrypt.data.transfer,dfs.journalnode.kerberos.principal != null => dfs.encrypt.data.transfer = true,behavior
644,dfs.webhdfs.enabled,dfs.https.enable,dfs.webhdfs.enabled = true AND dfs.http.policy = HTTPS_ONLY => dfs.https.enable = true,control
286,dfs.block.access.token.enable,dfs.block.access.token.lifetime,dfs.block.access.token.enable = true => dfs.block.access.token.lifetime != null,control
386,dfs.namenode.fs-limits.max-component-length,dfs.namenode.fs-limits.max-directory-items,dfs.namenode.fs-limits.max-component-length > 255 => dfs.namenode.fs-limits.max-directory-items > 1000,control
839,dfs.http.policy,dfs.webhdfs.enabled,"dfs.http.policy = ""HTTP_ONLY"" => dfs.webhdfs.enabled = ""true""",control
702,dfs.client.mmap.enabled,dfs.datanode.max.locked.memory,dfs.client.mmap.enabled = true => dfs.datanode.max.locked.memory > 0,control
271,dfs.namenode.replication.considerLoad,dfs.namenode.replication.considerLoad.factor,dfs.namenode.replication.considerLoad = true => dfs.namenode.replication.considerLoad.factor = 2.0,control
375,dfs.namenode.backup.http-address,dfs.ha.namenodes.[nameservice ID],"dfs.namenode.backup.http-address != null => dfs.ha.namenodes.[nameservice ID] in {{backup_namenode_id, other_namenode_ids}}",control
584,dfs.ha.namenodes.EXAMPLENAMESERVICE,dfs.namenode.http-address.EXAMPLENAMESERVICE.[namenode_id],"dfs.ha.namenodes.EXAMPLENAMESERVICE = {{ namenode1,namenode2 }} => dfs.namenode.http-address.EXAMPLENAMESERVICE.namenode1 = ANY && dfs.namenode.http-address.EXAMPLENAMESERVICE.namenode2 = ANY",control
862,dfs.client.failover.proxy.provider,dfs.nameservices,dfs.nameservices != null => dfs.client.failover.proxy.provider != null,control
558,dfs.datanode.drop.cache.behind.reads,dfs.datanode.max.locked.memory,dfs.datanode.drop.cache.behind.reads = true => dfs.datanode.max.locked.memory > [default..ANY],control
1076,dfs.ha.namenode.id,dfs.ha.automatic-failover.enabled,dfs.ha.automatic-failover.enabled = true => dfs.ha.namenode.id != null,control
393,dfs.namenode.top.enabled,dfs.namenode.top.num.users,top.enabled = true => dfs.namenode.top.num.users != null,control
902,dfs.client.socketcache.expiryMsec,dfs.client.socketcache.capacity,dfs.client.socketcache.expiryMsec > 0 => dfs.client.socketcache.capacity > 0,control
873,dfs.client.read.prefetch.size,dfs.datanode.max.locked.memory,dfs.client.read.prefetch.size > default => dfs.datanode.max.locked.memory > default,control
1076,dfs.webhdfs.use.ipc.callq,dfs.webhdfs.ipc.server.handler.count,dfs.webhdfs.use.ipc.callq = true => dfs.webhdfs.ipc.server.handler.count > 1,control
949,dfs.ha.fencing.methods,dfs.nameservices,dfs.ha.fencing.methods != null => dfs.nameservices != null,control
1411,dfs.ha.fencing.methods,dfs.ha.zkfc.port,dfs.ha.fencing.methods = ANY => dfs.ha.zkfc.port = 8019,control
1190,dfs.journalnode.rpc-bind-host,dfs.journalnode.http-bind-host,dfs.journalnode.rpc-bind-host = ANY => dfs.journalnode.http-bind-host = ANY,control
1088,dfs.ha.automatic-failover.enabled,dfs.namenode.rpc-address,dfs.ha.automatic-failover.enabled = true => dfs.namenode.rpc-address != null,control
1089,dfs.ha.automatic-failover.enabled,dfs.namenode.shared.edits.dir,dfs.ha.automatic-failover.enabled = true => dfs.namenode.shared.edits.dir != null,control
842,dfs.balancer.getBlocks.min-block-size,dfs.replication,dfs.balancer.getBlocks.min-block-size != default => dfs.replication != default,control
363,dfs.encrypt.data.transfer,dfs.encrypt.data.transfer.cipher.key.bitlength,"dfs.encrypt.data.transfer = true => dfs.encrypt.data.transfer.cipher.key.bitlength in {128, 192, 256}",control
1446,dfs.namenode.edits.dir.minimum,dfs.namenode.edits.dir,dfs.namenode.edits.dir != null => dfs.namenode.edits.dir.minimum = ANY,control
1230,dfs.client.read.shortcircuit,dfs.datanode.shared.file.descriptor.paths,dfs.client.read.shortcircuit = true => dfs.datanode.shared.file.descriptor.paths != null,control
1060,dfs.nameservices,dfs.ha.fencing.methods,dfs.nameservices != null => dfs.ha.fencing.methods = ANY,control
1191,dfs.journalnode.rpc-bind-host,dfs.journalnode.https-bind-host,dfs.journalnode.rpc-bind-host = ANY => dfs.journalnode.https-bind-host = ANY,control
283,dfs.permissions.enabled,dfs.permissions.superusergroup,dfs.permissions.enabled = true => dfs.permissions.superusergroup != null,control
298,dfs.client.block.write.replace-datanode-on-failure.policy,dfs.client.block.write.replace-datanode-on-failure.min-replication,dfs.client.block.write.replace-datanode-on-failure.policy != null => dfs.client.block.write.replace-datanode-on-failure.min-replication = 0,control
509,dfs.namenode.checkpoint.edits.dir,dfs.namenode.checkpoint.txns,dfs.namenode.checkpoint.edits.dir != null => dfs.namenode.checkpoint.txns > 0,control
1111,dfs.journalnode.kerberos.principal,dfs.journalnode.keytab.file,dfs.journalnode.kerberos.principal != null => dfs.journalnode.keytab.file != null,control
503,dfs.client.write.exclude.nodes.cache.expiry.interval.millis,dfs.client.write.exclude.nodes.cache.enable,dfs.client.write.exclude.nodes.cache.expiry.interval.millis > 0 => dfs.client.write.exclude.nodes.cache.enable = true,control
757,dfs.client.slow.io.warning.threshold.ms,dfs.client.slow.io.log.enabled,dfs.client.slow.io.warning.threshold.ms > 0 => dfs.client.slow.io.log.enabled = true,control
955,dfs.https.port,dfs.http.port,dfs.https.port != null => dfs.http.port != null,control
828,dfs.http.policy,dfs.datanode.https.address,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.datanode.https.address != ""null""",control
858,dfs.namenode.https-address,dfs.client.https.need-auth,dfs.client.https.need-auth = true => dfs.namenode.https-address != null,control
952,dfs.ha.standby.checkpoints,dfs.namenode.num.checkpoints.retained,dfs.ha.standby.checkpoints = true => dfs.namenode.num.checkpoints.retained > 1,control
1065,dfs.nameservice.id,dfs.ha.namenode.id,dfs.nameservice.id = ANY => dfs.ha.namenode.id = ANY,control
976,dfs.namenode.resource.checked.volumes,dfs.namenode.resource.check.interval,dfs.namenode.resource.checked.volumes > 0 => dfs.namenode.resource.check.interval > 0,control
480,dfs.namenode.decommission.interval,dfs.namenode.decommission.max.concurrent.tracked.nodes,dfs.namenode.decommission.interval < 60 => dfs.namenode.decommission.max.concurrent.tracked.nodes < 100,control
1165,dfs.encrypt.data.transfer,dfs.data.transfer.protection,"dfs.data.transfer.protection != ""null"" => dfs.encrypt.data.transfer = ""true""",control
800,dfs.ha.zkfc.nn.http.timeout.ms,dfs.ha.fencing.ssh.connect-timeout,dfs.ha.zkfc.nn.http.timeout.ms > 5000 => dfs.ha.fencing.ssh.connect-timeout > dfs.ha.zkfc.nn.http.timeout.ms,control
1447,dfs.namenode.edits.dir.minimum,dfs.namenode.edits.dir.required,dfs.namenode.edits.dir.required = true => dfs.namenode.edits.dir.minimum = ANY,control
496,dfs.stream-buffer-size,dfs.datanode.max.transfer.threads,dfs.stream-buffer-size > 131072 => dfs.datanode.max.transfer.threads > 4096,control
1217,dfs.client.short.circuit.replica.stale.threshold.ms,dfs.namenode.avoid.read.stale.datanode,dfs.namenode.avoid.read.stale.datanode = true => dfs.client.short.circuit.replica.stale.threshold.ms > 0,control
1196,dfs.journalnode.http-bind-host,dfs.journalnode.https-bind-host,dfs.http.policy = HTTPS_ONLY => dfs.journalnode.http-bind-host = null,control
481,dfs.namenode.decommission.blocks.per.interval,dfs.namenode.decommission.interval,dfs.namenode.decommission.interval > 0 => dfs.namenode.decommission.blocks.per.interval > 0,control
635,dfs.web.authentication.kerberos.keytab,hadoop.security.authentication,dfs.web.authentication.kerberos.keytab != null => hadoop.security.authentication = 'kerberos',control
763,dfs.namenode.fs-limits.max-xattr-size,dfs.namenode.fs-limits.min-block-size,dfs.namenode.fs-limits.max-xattr-size != default => dfs.namenode.fs-limits.min-block-size != default,control
1175,dfs.encrypt.data.transfer.cipher.suites,dfs.data.transfer.protection,"dfs.data.transfer.protection = ""privacy"" => dfs.encrypt.data.transfer.cipher.suites != null",control
1220,dfs.webhdfs.acl.provider.permission.pattern,dfs.permissions.enabled,dfs.permissions.enabled = true => dfs.webhdfs.acl.provider.permission.pattern != null,control
1136,dfs.namenode.avoid.write.stale.datanode,dfs.namenode.stale.datanode.interval,dfs.namenode.stale.datanode.interval > 0 => dfs.namenode.avoid.write.stale.datanode = true,control
1557,dfs.webhdfs.use.ipc.callq,dfs.webhdfs.enabled,dfs.webhdfs.enabled = true => dfs.webhdfs.use.ipc.callq = ANY,control
997,dfs.namenode.checkpoint.edits.dir,dfs.namenode.checkpoint.txns,dfs.namenode.checkpoint.txns = ANY => dfs.namenode.checkpoint.edits.dir = ANY,control
1215,dfs.client.short.circuit.replica.stale.threshold.ms,dfs.namenode.stale.datanode.interval,dfs.namenode.stale.datanode.interval > 0 => dfs.client.short.circuit.replica.stale.threshold.ms < dfs.namenode.stale.datanode.interval,control
984,dfs.namenode.decommission.interval,dfs.namenode.heartbeat.recheck-interval,dfs.namenode.decommission.interval > 0 => dfs.namenode.heartbeat.recheck-interval > 0,control
448,dfs.datanode.directoryscan.interval,dfs.blockreport.intervalMsec,dfs.datanode.directoryscan.interval > 0 => dfs.blockreport.intervalMsec > dfs.datanode.directoryscan.interval,control
1243,dfs.client.domain.socket.data.traffic,dfs.domain.socket.path,dfs.domain.socket.path != null => dfs.client.domain.socket.data.traffic = true,control
1064,dfs.nameservice.id,dfs.ha.namenodes.EXAMPLENAMESERVICE,dfs.nameservice.id = ANY => dfs.ha.namenodes.EXAMPLENAMESERVICE = ANY,control
1104,dfs.datanode.kerberos.principal,dfs.http.policy,dfs.http.policy = HTTPS => dfs.datanode.kerberos.principal != null,control
704,dfs.client.mmap.enabled,dfs.namenode.max.full.block.report.threads,dfs.client.mmap.enabled = true => dfs.namenode.max.full.block.report.threads < (system_memory * 0.1 / thread_stack_size),control
520,dfs.namenode.checkpoint.max-retries,dfs.namenode.checkpoint.check.period,dfs.namenode.checkpoint.max-retries > 0 => dfs.namenode.checkpoint.check.period > 0,control
1268,dfs.webhdfs.rest-csrf.enabled,dfs.http.policy,dfs.http.policy = HTTPS_ONLY => dfs.webhdfs.rest-csrf.enabled = ANY,control
400,dfs.namenode.edits.journal-plugin.qjournal,dfs.namenode.shared.edits.dir,dfs.namenode.edits.journal-plugin.qjournal != null => dfs.namenode.shared.edits.dir in {{ qjournal://node1:port1;node2:port2;node3:port3/journalId }},control
798,dfs.client.block.write.locateFollowingBlock.initial.delay.ms,dfs.blocksize,dfs.blocksize > 134217728 => dfs.client.block.write.locateFollowingBlock.initial.delay.ms > 1000,control
365,dfs.encrypt.data.transfer,dfs.trustedchannel.resolver.class,dfs.encrypt.data.transfer = true => dfs.trustedchannel.resolver.class != null,control
351,dfs.namenode.write.stale.datanode.ratio,dfs.namenode.avoid.write.stale.datanode,dfs.namenode.write.stale.datanode.ratio > 0.5f => dfs.namenode.avoid.write.stale.datanode is valid and non-null,control
1134,dfs.namenode.avoid.read.stale.datanode,dfs.namenode.write.stale.datanode.ratio,dfs.namenode.write.stale.datanode.ratio > 0 => dfs.namenode.avoid.read.stale.datanode = true,control
813,dfs.datanode.ipc.address,dfs.http.policy,dfs.http.policy = HTTPS => dfs.datanode.ipc.address = dfs.datanode.https.address,control
1014,dfs.qjournal.get-journal-state.timeout.ms,ipc.server.read.threadpool.size,dfs.qjournal.get-journal-state.timeout.ms < 30000 => ipc.server.read.threadpool.size > 10,control
1232,dfs.client.read.shortcircuit,dfs.block.local-path-access.user,dfs.client.read.shortcircuit = true => dfs.block.local-path-access.user != null,control
1563,dfs.use.dfs.network.topology,dfs.namenode.reject-unresolved-dn-topology-mapping,dfs.use.dfs.network.topology = true => dfs.namenode.reject-unresolved-dn-topology-mapping = true,control
1533,dfs.balancer.keytab.enabled,dfs.balancer.kerberos.principal,dfs.balancer.keytab.enabled = true => dfs.balancer.kerberos.principal != null,control
1021,dfs.qjournal.queued-edits.limit.mb,dfs.namenode.num.extra.edits.retained,dfs.qjournal.queued-edits.limit.mb > 100 => dfs.namenode.num.extra.edits.retained > 1000,control
995,dfs.namenode.name.cache.threshold,dfs.namenode.max.objects,dfs.namenode.name.cache.threshold > 0 => dfs.namenode.max.objects > dfs.namenode.name.cache.threshold,control
791,dfs.webhdfs.ugi.expire.after.access,hadoop.security.authentication,hadoop.security.authentication = 'kerberos' => dfs.webhdfs.ugi.expire.after.access != null,control
315,dfs.namenode.block-placement-policy.default.prefer-local-node,dfs.namenode.plugins,dfs.namenode.block-placement-policy.default.prefer-local-node = true => dfs.namenode.plugins != null,control
945,dfs.datanode.sync.behind.writes.in.background,dfs.datanode.max.transfer.threads,dfs.datanode.sync.behind.writes.in.background = true => dfs.datanode.max.transfer.threads > 4096,control
775,dfs.namenode.rpc-address,dfs.namenode.rpc-bind-host,dfs.namenode.rpc-bind-host != null => dfs.namenode.rpc-address = dfs.namenode.rpc-bind-host:<port>,control
625,dfs.journalnode.keytab.file,dfs.https.enable,dfs.journalnode.keytab.file != null => dfs.https.enable = true,control
1109,dfs.datanode.keytab.file,dfs.data.transfer.protection,"dfs.data.transfer.protection = ""privacy"" => dfs.datanode.keytab.file != null",control
1085,dfs.ha.automatic-failover.enabled,dfs.client.failover.proxy.provider,dfs.ha.automatic-failover.enabled = true => dfs.client.failover.proxy.provider != null,control
845,dfs.balancer.getBlocks.size,dfs.balancer.max-size-to-move,dfs.balancer.getBlocks.size > 0 => dfs.balancer.max-size-to-move > 0,control
621,dfs.journalnode.kerberos.principal,hadoop.security.authentication,dfs.journalnode.kerberos.principal != null => hadoop.security.authentication = 'kerberos',control
303,dfs.namenode.servicerpc-address,dfs.namenode.service.handler.count,dfs.namenode.servicerpc-address != null => dfs.namenode.service.handler.count = 10,control
508,dfs.namenode.checkpoint.edits.dir,dfs.namenode.checkpoint.period,dfs.namenode.checkpoint.edits.dir != null => dfs.namenode.checkpoint.period > 0,control
863,dfs.client.failover.proxy.provider,dfs.ha.namenodes.[nameservice ID],dfs.client.failover.proxy.provider != null => dfs.ha.namenodes.[nameservice ID] != null,control
1330,dfs.balancer.block-move.timeout,dfs.balancer.dispatcherThreads,dfs.balancer.dispatcherThreads > 0 => dfs.balancer.block-move.timeout = ANY,control
1412,dfs.ha.fencing.methods,dfs.ha.standby.checkpoints,dfs.ha.fencing.methods = ANY => dfs.ha.standby.checkpoints = true,control
1500,dfs.web.authentication.filter,dfs.web.authentication.simple.anonymous.allowed,"dfs.web.authentication.filter = ""Simple"" => dfs.web.authentication.simple.anonymous.allowed = ANY",control
839,dfs.balancer.max-size-to-move,dfs.datanode.balance.bandwidthPerSec,dfs.balancer.max-size-to-move > ANY => dfs.datanode.balance.bandwidthPerSec > ANY,control
1195,dfs.journalnode.http-bind-host,dfs.http.policy,dfs.http.policy = HTTPS_ONLY => dfs.journalnode.http-bind-host = null,control
416,dfs.replication,dfs.namenode.replication.min,dfs.replication >= dfs.namenode.replication.min,control
578,dfs.nameservices,dfs.namenode.rpc-address.[nameservice ID].[namenode ID],dfs.nameservices != null => dfs.namenode.rpc-address.[nameservice ID].[namenode ID] != null,control
1127,dfs.web.authentication.kerberos.principal,dfs.web.authentication.filter,"dfs.web.authentication.filter = ""org.apache.hadoop.security.authentication.server.KerberosAuthenticationFilter"" => dfs.web.authentication.kerberos.principal != null",control
431,dfs.client.block.write.retries,dfs.replication.max,dfs.client.block.write.retries > 1 => dfs.replication.max > dfs.client.block.write.retries,control
606,dfs.client.local.interfaces,dfs.datanode.max.transfer.threads,dfs.client.local.interfaces != null => dfs.datanode.max.transfer.threads > 0,control
851,dfs.block.misreplication.processing.limit,dfs.namenode.replication.work.multiplier.per.iteration,dfs.block.misreplication.processing.limit > 100 => dfs.namenode.replication.work.multiplier.per.iteration > 2,control
904,dfs.client.hedged.read.threadpool.size,dfs.client.hedged.read.pool.size,dfs.client.hedged.read.threadpool.size = X => dfs.client.hedged.read.pool.size = X,control
424,dfs.namenode.maintenance.replication.min,dfs.replication.max,dfs.namenode.maintenance.replication.min > 1 => dfs.replication.max >= dfs.namenode.maintenance.replication.min,control
699,dfs.client.server-defaults.validity.period.ms,dfs.heartbeat.interval,dfs.client.server-defaults.validity.period.ms < dfs.heartbeat.interval * 2 => dfs.heartbeat.interval = dfs.client.server-defaults.validity.period.ms / 2,control
1366,dfs.client.retry.interval-ms.get-last-block-length,dfs.client.retry.policy.enabled,dfs.client.retry.policy.enabled = true => dfs.client.retry.interval-ms.get-last-block-length = ANY,control
517,dfs.namenode.checkpoint.check.period,dfs.namenode.checkpoint.txns,dfs.namenode.checkpoint.check.period > 0 => dfs.namenode.checkpoint.txns > 0,control
335,dfs.namenode.secondary.http-address,dfs.namenode.secondary.checkpoint.period,dfs.namenode.secondary.http-address in {{active_hosts}} => dfs.namenode.secondary.checkpoint.period > 0,control
959,dfs.journalnode.edits.dir,dfs.journalnode.kerberos.internal.spnego.principal,dfs.journalnode.edits.dir != null => dfs.journalnode.kerberos.internal.spnego.principal != null,control
713,dfs.namenode.path.based.cache.block.map.allocation.percent,dfs.namenode.path.based.cache.refresh.interval.ms,dfs.namenode.path.based.cache.block.map.allocation.percent > 0 => dfs.namenode.path.based.cache.refresh.interval.ms > 0,control
1457,dfs.namenode.replication.pending.timeout-sec,dfs.heartbeat.interval,dfs.heartbeat.interval < dfs.namenode.replication.pending.timeout-sec => dfs.namenode.replication.pending.timeout-sec > dfs.heartbeat.interval,control
1328,dfs.balancer.block-move.timeout,dfs.balancer.max-no-move-interval,dfs.balancer.max-no-move-interval > 0 => dfs.balancer.block-move.timeout = ANY,control
1106,dfs.datanode.kerberos.principal,dfs.encrypt.data.transfer,dfs.encrypt.data.transfer = true => dfs.datanode.kerberos.principal != null,control
1003,dfs.namenode.stale.datanode.minimum.interval,dfs.namenode.replication.interval,dfs.namenode.stale.datanode.minimum.interval > Y => dfs.namenode.replication.interval > Y,control
505,dfs.namenode.checkpoint.dir,dfs.namenode.checkpoint.period,dfs.namenode.checkpoint.dir != null => dfs.namenode.checkpoint.period > 0,control
825,dfs.http.policy,dfs.client.https.need-auth,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.client.https.need-auth = ""true""",control
470,dfs.hosts,dfs.namenode.handler.count,"<Dependency> ::= <Variable> in {{host1, host2, ...}} => <ConstraintItem> > 30",control
1192,dfs.journalnode.http-address,dfs.http.policy,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.journalnode.http-address = null",control
457,dfs.namenode.handler.count,dfs.namenode.service.handler.count,dfs.namenode.handler.count > {{X}} => dfs.namenode.service.handler.count > {{X}},control
1003,dfs.namenode.checkpoint.check.period,dfs.namenode.checkpoint.period,dfs.namenode.checkpoint.period > 0 => dfs.namenode.checkpoint.check.period = (dfs.namenode.checkpoint.period / 2),control
443,dfs.blockreport.split.threshold,dfs.blockreport.initialDelay,dfs.blockreport.split.threshold > 1000 => dfs.blockreport.initialDelay < 30,control
1256,dfs.namenode.top.window.num.buckets,dfs.namenode.top.enabled,dfs.namenode.top.enabled = true => dfs.namenode.top.window.num.buckets != null,control
1130,dfs.web.authentication.kerberos.keytab,dfs.client.https.need-auth,dfs.client.https.need-auth = true => dfs.web.authentication.kerberos.keytab != null,control
832,dfs.balancer.dispatcherThreads,dfs.balancer.movedThreads,dfs.balancer.dispatcherThreads > 1 => dfs.balancer.movedThreads > 1,control
1090,dfs.ha.automatic-failover.enabled,dfs.journalnode.edits.dir,dfs.ha.automatic-failover.enabled = true => dfs.journalnode.edits.dir != null,control
998,dfs.namenode.checkpoint.edits.dir,dfs.namenode.checkpoint.check.period,dfs.namenode.checkpoint.check.period = ANY => dfs.namenode.checkpoint.edits.dir = ANY,control
876,dfs.namenode.name.dir,dfs.namenode.edits.dir,dfs.namenode.edits.dir = ANY => dfs.namenode.name.dir = ANY,control
406,dfs.client.retry.policy.enabled,dfs.http.client.retry.policy.spec,dfs.client.retry.policy.enabled = true => dfs.http.client.retry.policy.spec != null,control
975,dfs.mover.retry.max.attempts,dfs.datanode.max.transfer.threads,dfs.mover.retry.max.attempts > 5 => dfs.datanode.max.transfer.threads > 4096,control
331,dfs.datanode.sync.behind.writes,dfs.datanode.sync.behind.writes.in.background,dfs.datanode.sync.behind.writes = true => dfs.datanode.sync.behind.writes.in.background is valid and non-null,control
769,dfs.namenode.lock.detailed-metrics.enabled,dfs.namenode.lock.metrics.log.interval,dfs.namenode.lock.detailed-metrics.enabled = true => dfs.namenode.lock.metrics.log.interval > 0,control
1123,dfs.secondary.namenode.kerberos.internal.spnego.principal,dfs.http.policy,dfs.http.policy = HTTPS => dfs.secondary.namenode.kerberos.internal.spnego.principal != null,control
973,dfs.mover.moverThreads,dfs.datanode.max.transfer.threads,dfs.mover.moverThreads > 10 => dfs.datanode.max.transfer.threads > dfs.mover.moverThreads * 2,control
1162,dfs.webhdfs.enabled,dfs.web.authentication.kerberos.principal,dfs.web.authentication.kerberos.principal = null => dfs.webhdfs.enabled = false,control
813,dfs.webhdfs.rest-csrf.methods-to-ignore,dfs.webhdfs.rest-csrf.enabled,dfs.webhdfs.rest-csrf.enabled = true => dfs.webhdfs.rest-csrf.methods-to-ignore != null,control
640,dfs.namenode.stale.datanode.interval,dfs.heartbeat.interval,dfs.namenode.stale.datanode.interval > 0 => dfs.heartbeat.interval < dfs.namenode.stale.datanode.interval,control
684,dfs.journalnode.https-bind-host,dfs.http.policy,"dfs.journalnode.https-bind-host != null => dfs.http.policy in {{HTTPS_ONLY, HTTP_AND_HTTPS}}",control
1421,dfs.https.port,dfs.http.policy,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.https.port != null",control
923,dfs.namenode.safemode.replication.min,dfs.namenode.safemode.threshold-pct,dfs.namenode.safemode.threshold-pct = ANY => dfs.namenode.safemode.replication.min = ANY,control
706,dfs.client.mmap.cache.size,dfs.datanode.max.locked.memory,dfs.client.mmap.cache.size > default => dfs.datanode.max.locked.memory > default,control
1004,dfs.namenode.checkpoint.check.period,dfs.namenode.checkpoint.txns,dfs.namenode.checkpoint.txns > 0 => dfs.namenode.checkpoint.check.period = (dfs.namenode.checkpoint.txns / 1000),control
981,dfs.namenode.datanode.registration.ip-hostname-check,dfs.datanode.use.datanode.hostname,dfs.datanode.use.datanode.hostname = true => dfs.namenode.datanode.registration.ip-hostname-check = true,control
996,dfs.namenode.checkpoint.edits.dir,dfs.namenode.checkpoint.period,dfs.namenode.checkpoint.period = ANY => dfs.namenode.checkpoint.edits.dir = ANY,control
785,dfs.storage.policy.enabled,dfs.replication,dfs.storage.policy.enabled = true => dfs.replication > 0,control
1244,dfs.client.domain.socket.data.traffic,dfs.client.use.legacy.blockreader.local,dfs.client.use.legacy.blockreader.local = false => dfs.client.domain.socket.data.traffic = true,control
447,dfs.datanode.directoryscan.interval,dfs.datanode.directoryscan.throttle.limit.ms.per.sec,dfs.datanode.directoryscan.interval > 0 => dfs.datanode.directoryscan.throttle.limit.ms.per.sec > 0,control
765,dfs.namenode.lease-recheck-interval-ms,dfs.namenode.lease-check-interval-ms,dfs.namenode.lease-recheck-interval-ms = dfs.namenode.lease-check-interval-ms,control
800,dfs.namenode.secondary.https-address,dfs.http.policy,dfs.http.policy = HTTPS_ONLY => dfs.namenode.secondary.https-address != null,control
1038,dfs.secondary.namenode.keytab.file,hadoop.security.authentication,"dfs.secondary.namenode.keytab.file != null => hadoop.security.authentication = ""kerberos""",control
482,dfs.namenode.decommission.blocks.per.interval,dfs.namenode.decommission.max.concurrent.tracked.nodes,dfs.namenode.decommission.max.concurrent.tracked.nodes > 0 => dfs.namenode.decommission.blocks.per.interval > 0,control
893,dfs.permissions.enabled,dfs.cluster.administrators,dfs.permissions.enabled = true => dfs.cluster.administrators != null,control
401,dfs.webhdfs.rest-csrf.enabled,dfs.webhdfs.rest-csrf.custom-header,dfs.webhdfs.rest-csrf.enabled = true => dfs.webhdfs.rest-csrf.custom-header != null,control
1497,dfs.secondary.namenode.keytab.file,dfs.http.policy,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.secondary.namenode.keytab.file != null",control
826,dfs.http.policy,dfs.https.server.keystore.resource,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.https.server.keystore.resource != ""null""",control
540,dfs.image.transfer.bandwidthPerSec,dfs.namenode.checkpoint.period,dfs.image.transfer.bandwidthPerSec > 0 => dfs.namenode.checkpoint.period > 0,control
1157,dfs.webhdfs.enabled,dfs.client.https.need-auth,dfs.client.https.need-auth = true => dfs.webhdfs.enabled = false,control
452,dfs.datanode.directoryscan.throttle.limit.ms.per.sec,dfs.datanode.max.transfer.threads,dfs.datanode.directoryscan.throttle.limit.ms.per.sec < 500 => dfs.datanode.max.transfer.threads in {{4096..8192}},control
1137,dfs.namenode.avoid.write.stale.datanode,dfs.namenode.write.stale.datanode.ratio,dfs.namenode.write.stale.datanode.ratio > 0 => dfs.namenode.avoid.write.stale.datanode = true,control
834,dfs.balancer.movedWinWidth,dfs.balancer.max-size-to-move,dfs.balancer.movedWinWidth > 0 => dfs.balancer.max-size-to-move > 0,control
653,dfs.encrypt.data.transfer.cipher.key.bitlength,dfs.encrypt.data.transfer,"dfs.encrypt.data.transfer = true => dfs.encrypt.data.transfer.cipher.key.bitlength in {{128, 192, 256}}",control
853,dfs.block.replicator.classname,dfs.replication,dfs.block.replicator.classname != null => dfs.replication > 1,control
332,dfs.namenode.lifeline.rpc-bind-host,dfs.ha.automatic-failover.enabled,dfs.namenode.lifeline.rpc-bind-host != null AND dfs.ha.automatic-failover.enabled = true => dfs.namenode.lifeline.rpc-bind-host != null,control
360,dfs.https.server.keystore.resource,dfs.https.server.ssl.enabled.protocols,"dfs.https.server.keystore.resource != null => dfs.https.server.ssl.enabled.protocols in {{""TLSv1.2"", ""TLSv1.3""}}",control
876,dfs.client.read.short.circuit.replica.stale.threshold.ms,dfs.domain.socket.path,dfs.domain.socket.path != null => dfs.client.read.short.circuit.replica.stale.threshold.ms in [0..ANY],control
1390,dfs.client.write.byte-array-manager.count-reset-time-period-ms,dfs.client.write.byte-array-manager.enabled,dfs.client.write.byte-array-manager.enabled = true => dfs.client.write.byte-array-manager.count-reset-time-period-ms > 0,control
651,dfs.encrypt.data.transfer.cipher.suites,dfs.encrypt.data.transfer,dfs.encrypt.data.transfer = true => dfs.encrypt.data.transfer.cipher.suites != null,control
834,dfs.http.policy,dfs.web.authentication.kerberos.keytab,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.web.authentication.kerberos.keytab != ""null""",control
917,dfs.client.write.byte-array-manager.enabled,dfs.client.write.max-packet-size,dfs.client.write.byte-array-manager.enabled = true => dfs.client.write.max-packet-size > dfs.client.write.packet.size,control
1511,dfs.webhdfs.oauth2.client.id,dfs.webhdfs.oauth2.enabled,dfs.webhdfs.oauth2.enabled = true => dfs.webhdfs.oauth2.client.id != null,control
953,dfs.http.port,dfs.datanode.http.port,dfs.http.port != dfs.datanode.http.port,control
832,dfs.http.policy,dfs.data.transfer.protection,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.data.transfer.protection = ""privacy""",control
433,dfs.client.block.write.replace-datanode-on-failure.enable,dfs.replication,dfs.client.block.write.replace-datanode-on-failure.enable = true => dfs.replication > 1,control
818,dfs.namenode.http-address,dfs.namenode.https-address,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.namenode.http-address = null",control
1061,dfs.nameservices,dfs.ha.standby.checkpoints,dfs.nameservices != null => dfs.ha.standby.checkpoints = ANY,control
1082,dfs.datanode.disk.check.timeout,dfs.datanode.max.transfer.threads,dfs.datanode.disk.check.timeout > default => dfs.datanode.max.transfer.threads > default,control
1035,dfs.secondary.namenode.kerberos.principal,hadoop.security.authentication,"dfs.secondary.namenode.kerberos.principal != null => hadoop.security.authentication = ""kerberos""",control
368,dfs.namenode.https-address,dfs.http.policy,"dfs.namenode.https-address != null => dfs.http.policy = ""HTTPS_ONLY""",control
1361,dfs.client.read.shortcircuit.buffer.size,dfs.domain.socket.path,dfs.domain.socket.path != null => dfs.client.read.shortcircuit.buffer.size > 0,control
268,dfs.http.policy,dfs.client.https.need-auth,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.client.https.need-auth != null",control
1532,dfs.balancer.keytab.enabled,dfs.balancer.keytab.file,dfs.balancer.keytab.enabled = true => dfs.balancer.keytab.file != null,control
342,dfs.datanode.handler.count,dfs.datanode.max.transfer.threads,dfs.datanode.handler.count > default => dfs.datanode.max.transfer.threads > default,control
913,dfs.client.write.byte-array-manager.count-reset-time-period-ms,dfs.client.write.packet.size,dfs.client.write.packet.size > default => dfs.client.write.byte-array-manager.count-reset-time-period-ms < [default..default/2],control
459,dfs.namenode.lifeline.handler.count,dfs.namenode.handler.count,dfs.namenode.lifeline.handler.count > 0 => dfs.namenode.handler.count > dfs.namenode.lifeline.handler.count,control
1159,dfs.webhdfs.enabled,dfs.client.https.keystore.resource,dfs.client.https.keystore.resource = null => dfs.webhdfs.enabled = false,control
941,dfs.datanode.socket.reuse.keepalive,dfs.datanode.max.transfer.threads,dfs.datanode.socket.reuse.keepalive = true => dfs.datanode.max.transfer.threads > {{default}},control
909,dfs.replication,dfs.namenode.replication.considerLoad.factor,dfs.namenode.replication.considerLoad = true => dfs.replication = dfs.replication * dfs.namenode.replication.considerLoad.factor,control
999,dfs.namenode.checkpoint.edits.dir,dfs.namenode.checkpoint.max-retries,dfs.namenode.checkpoint.max-retries = ANY => dfs.namenode.checkpoint.edits.dir = ANY,control
760,dfs.namenode.fs-limits.max-xattrs-per-inode,dfs.namenode.fs-limits.max-xattrs,dfs.namenode.fs-limits.max-xattrs-per-inode > 0 => dfs.namenode.fs-limits.max-xattrs > dfs.namenode.fs-limits.max-xattrs-per-inode,control
720,dfs.namenode.list.cache.pools.num.responses,dfs.namenode.cache.pools.max,dfs.namenode.list.cache.pools.num.responses > 0 => dfs.namenode.cache.pools.max >= dfs.namenode.list.cache.pools.num.responses,control
896,dfs.permissions.superusergroup,dfs.cluster.administrators,dfs.permissions.superusergroup = ANY => dfs.cluster.administrators = ANY,control
536,dfs.image.compression.codec,dfs.image.compression.level,dfs.image.compression.codec = ANY => dfs.image.compression.level in [ 1..9 ],control
380,dfs.datanode.du.reserved,dfs.datanode.du.reserved.percentage,dfs.datanode.du.reserved > 0 => dfs.datanode.du.reserved.percentage < 100,control
1448,dfs.namenode.edits.dir.minimum,dfs.namenode.edits.journal-plugin.qjournal,dfs.namenode.edits.journal-plugin.qjournal != null => dfs.namenode.edits.dir.minimum = ANY,control
1011,dfs.qjournal.finalize-segment.timeout.ms,dfs.qjournal.max-txns-per-segment,dfs.qjournal.finalize-segment.timeout.ms > 60000 => dfs.qjournal.max-txns-per-segment < 1000,control
610,dfs.namenode.kerberos.principal,hadoop.security.authentication,dfs.namenode.kerberos.principal != null => hadoop.security.authentication = 'kerberos',control
404,dfs.permissions.enabled,dfs.permissions.superusergroup,dfs.permissions.enabled = true => dfs.permissions.superusergroup != null,control
1133,dfs.namenode.avoid.read.stale.datanode,dfs.namenode.stale.datanode.interval,dfs.namenode.stale.datanode.interval > 0 => dfs.namenode.avoid.read.stale.datanode = true,control
577,dfs.nameservices,dfs.ha.namenodes.[nameservice ID],dfs.nameservices != null => dfs.ha.namenodes.[nameservice ID] != null,control
390,dfs.namenode.fs-limits.min-block-size,dfs.blocksize,dfs.namenode.fs-limits.min-block-size < dfs.blocksize,control
336,dfs.nameservices,dfs.nameservice.id,dfs.nameservices = null => dfs.nameservice.id = ANY,default
1286,dfs.http.client.retry.policy.enabled,dfs.http.client.failover.max.attempts,dfs.http.client.retry.policy.enabled = true => dfs.http.client.failover.max.attempts > 0,default
1287,dfs.http.client.retry.policy.enabled,dfs.http.client.retry.max.attempts,dfs.http.client.retry.policy.enabled = true => dfs.http.client.retry.max.attempts > 0,default
1384,dfs.client.socketcache.capacity,dfs.client.socketcache.expiryMsec,dfs.client.socketcache.expiryMsec = ANY => dfs.client.socketcache.capacity = ANY,default
1517,dfs.webhdfs.oauth2.enabled,dfs.webhdfs.oauth2.refresh.url,dfs.webhdfs.oauth2.enabled = true => dfs.webhdfs.oauth2.refresh.url != null,default
931,dfs.client.block.write.replace-datanode-on-failure.enable,dfs.client.block.write.replace-datanode-on-failure.policy,dfs.client.block.write.replace-datanode-on-failure.policy = ANY => dfs.client.block.write.replace-datanode-on-failure.enable = true,default
335,dfs.nameservices,dfs.internal.nameservices,dfs.nameservices = ANY => dfs.internal.nameservices = dfs.nameservices,default
1124,dfs.web.authentication.kerberos.principal,dfs.web.authentication.kerberos.keytab,dfs.web.authentication.kerberos.keytab = null => dfs.web.authentication.kerberos.principal != null,default
1040,dfs.client.failover.max.attempts,dfs.http.client.failover.sleep.max.millis,dfs.http.client.failover.sleep.max.millis = dfs.client.failover.sleep.max.millis,default
1301,dfs.http.client.retry.max.attempts,dfs.client.retry.max.attempts,dfs.client.retry.max.attempts = null => dfs.http.client.retry.max.attempts = default,default
320,dfs.namenode.checkpoint.dir,dfs.namenode.checkpoint.edits.dir,dfs.namenode.checkpoint.dir = ANY => dfs.namenode.checkpoint.edits.dir = dfs.namenode.checkpoint.dir,default
878,dfs.namenode.name.dir,dfs.namenode.name.dir.restore,dfs.namenode.name.dir.restore = null => dfs.namenode.name.dir = ANY,default
1167,dfs.encrypt.data.transfer,dfs.encrypt.data.transfer.cipher.suites,"dfs.encrypt.data.transfer = ""true"" => dfs.encrypt.data.transfer.cipher.suites != ""null""",default
277,dfs.datanode.du.reserved.pct,dfs.datanode.du.reserved.pct.ram_disk,dfs.datanode.du.reserved.pct.ram_disk = null => dfs.datanode.du.reserved.pct = dfs.datanode.du.reserved.pct.ram_disk,default
413,dfs.blocksize,dfs.client.read.prefetch.size,dfs.blocksize = ANY => dfs.client.read.prefetch.size = 10 * ${dfs.blocksize},default
275,dfs.datanode.du.reserved.calculator,dfs.datanode.du.reserved.pct,dfs.datanode.du.reserved.calculator = org.apache.hadoop.hdfs.server.datanode.fsdataset.impl.ReservedSpaceCalculator$ReservedSpaceCalculatorPercentage => dfs.datanode.du.reserved.pct = ANY,default
785,dfs.namenode.servicerpc-address,dfs.namenode.servicerpc-bind-host,dfs.namenode.servicerpc-bind-host = null => dfs.namenode.servicerpc-address = ANY,default
1288,dfs.http.client.retry.policy.enabled,dfs.http.client.failover.sleep.base.millis,dfs.http.client.retry.policy.enabled = true => dfs.http.client.failover.sleep.base.millis > 0,default
1119,dfs.journalnode.kerberos.internal.spnego.principal,dfs.journalnode.keytab.file,dfs.journalnode.keytab.file = ANY => dfs.journalnode.kerberos.internal.spnego.principal = ANY,default
1018,dfs.image.compress,dfs.image.compression.codec,dfs.image.compress = true => dfs.image.compression.codec != null,default
258,dfs.namenode.rpc-address,dfs.namenode.servicerpc-address,dfs.namenode.servicerpc-address = null => dfs.namenode.servicerpc-address = dfs.namenode.rpc-address,default
991,dfs.namenode.checkpoint.dir,dfs.namenode.checkpoint.edits.dir,dfs.namenode.checkpoint.edits.dir = null => dfs.namenode.checkpoint.dir = ANY,default
1216,dfs.client.short.circuit.replica.stale.threshold.ms,dfs.client.read.short.circuit.replica.stale.threshold.ms,dfs.client.read.short.circuit.replica.stale.threshold.ms = null => dfs.client.short.circuit.replica.stale.threshold.ms = dfs.client.read.short.circuit.replica.stale.threshold.ms,default
1441,dfs.namenode.backup.dnrpc-address,dfs.namenode.rpc-address,dfs.namenode.backup.dnrpc-address = null => dfs.namenode.backup.dnrpc-address = dfs.namenode.rpc-address,default
1295,dfs.http.client.retry.policy.spec,dfs.client.retry.policy.spec,"dfs.client.retry.policy.spec = null => dfs.http.client.retry.policy.spec = ""default""",default
259,dfs.namenode.rpc-bind-host,dfs.namenode.rpc-address,dfs.namenode.rpc-bind-host = null => dfs.namenode.rpc-address = dfs.namenode.rpc-address,default
339,dfs.journalnode.kerberos.principal,dfs.journalnode.kerberos.internal.spnego.principal,dfs.journalnode.kerberos.principal = ANY => dfs.journalnode.kerberos.internal.spnego.principal = dfs.journalnode.kerberos.principal,default
1168,dfs.encrypt.data.transfer,dfs.encrypt.data.transfer.cipher.key.bitlength,"dfs.encrypt.data.transfer = ""true"" => dfs.encrypt.data.transfer.cipher.key.bitlength != ""null""",default
1285,dfs.http.client.retry.policy.enabled,dfs.http.client.retry.policy.spec,dfs.http.client.retry.policy.enabled = true => dfs.http.client.retry.policy.spec != null,default
887,dfs.namenode.edits.journal-plugin.qjournal,dfs.namenode.edits.journal-plugin,"dfs.namenode.edits.journal-plugin = ""qjournal"" => dfs.namenode.edits.journal-plugin.qjournal = ""ANY""",default
1289,dfs.http.client.retry.policy.enabled,dfs.http.client.failover.sleep.max.millis,dfs.http.client.retry.policy.enabled = true => dfs.http.client.failover.sleep.max.millis > dfs.http.client.failover.sleep.base.millis,default
262,dfs.namenode.rpc-address,dfs.namenode.servicerpc-bind-host,dfs.namenode.rpc-address = null => dfs.namenode.servicerpc-bind-host = dfs.namenode.rpc-address,default
288,dfs.block.access.key.update.interval,dfs.block.access.token.lifetime,dfs.block.access.key.update.interval = ANY => dfs.block.access.token.lifetime = dfs.block.access.key.update.interval,default
358,dfs.encrypt.data.transfer,dfs.data.transfer.protection,dfs.encrypt.data.transfer = true => dfs.data.transfer.protection = ANY,overwrite
1381,dfs.client.retry.window.base,dfs.client.retry.interval-ms.get-last-block-length,dfs.client.retry.window.base = <Expression> => dfs.client.retry.interval-ms.get-last-block-length = <Expression>,value
974,dfs.namenode.resource.checked.volumes,dfs.namenode.resource.checked.volumes.minimum,dfs.namenode.resource.checked.volumes >= dfs.namenode.resource.checked.volumes.minimum,value
930,dfs.client.block.write.retries,dfs.client.block.write.locateFollowingBlock.retries,dfs.client.block.write.locateFollowingBlock.retries > 0 => dfs.client.block.write.retries > 0,value
872,dfs.datanode.du.reserved,dfs.datanode.du.reserved.pct,dfs.datanode.du.reserved.pct > 0 => dfs.datanode.du.reserved = dfs.datanode.du.reserved.pct * total_disk_space,value
623,dfs.journalnode.kerberos.principal,hadoop.security.auth_to_local,dfs.journalnode.kerberos.principal = <principal>@<REALM> => hadoop.security.auth_to_local contains 'RULE:[1:$1@$0](.*@<REALM>)s/@<REALM>//',value
782,dfs.namenode.rpc-bind-host,dfs.namenode.http-bind-host,dfs.namenode.rpc-bind-host != null => dfs.namenode.http-bind-host = <Expression>,value
1388,dfs.client.write.byte-array-manager.count-limit,dfs.client.write.byte-array-manager.count-threshold,dfs.client.write.byte-array-manager.count-threshold > 0 => dfs.client.write.byte-array-manager.count-limit > dfs.client.write.byte-array-manager.count-threshold,value
1028,dfs.datanode.max.transfer.threads,dfs.datanode.handler.count,dfs.datanode.handler.count = ANY => dfs.datanode.max.transfer.threads > dfs.datanode.handler.count,value
1470,dfs.qjournal.accept-recovery.timeout.ms,dfs.qjournal.start-segment.timeout.ms,dfs.qjournal.start-segment.timeout.ms = dfs.qjournal.accept-recovery.timeout.ms,value
1091,dfs.client.use.datanode.hostname,dfs.datanode.use.datanode.hostname,dfs.datanode.use.datanode.hostname = true => dfs.client.use.datanode.hostname = true,value
1271,dfs.webhdfs.rest-csrf.enabled,dfs.webhdfs.rest-csrf.browser-useragents-regex,dfs.webhdfs.rest-csrf.enabled = true => dfs.webhdfs.rest-csrf.browser-useragents-regex != null,value
1014,dfs.namenode.delegation.token.max-lifetime,dfs.namenode.delegation.token.renew-interval,dfs.namenode.delegation.token.renew-interval < dfs.namenode.delegation.token.max-lifetime,value
1219,dfs.cachereport.intervalMsec,dfs.blockreport.incremental.intervalMsec,dfs.blockreport.incremental.intervalMsec = dfs.cachereport.intervalMsec,value
1473,dfs.qjournal.get-journal-state.timeout.ms,dfs.qjournal.start-segment.timeout.ms,dfs.qjournal.start-segment.timeout.ms = dfs.qjournal.get-journal-state.timeout.ms,value
1379,dfs.client.retry.window.base,dfs.client.retry.max.attempts,dfs.client.retry.window.base = <Expression> => dfs.client.retry.max.attempts = <Expression>,value
1117,dfs.namenode.kerberos.internal.spnego.principal,dfs.web.authentication.kerberos.principal,dfs.web.authentication.kerberos.principal = dfs.namenode.kerberos.internal.spnego.principal,value
1270,dfs.webhdfs.rest-csrf.enabled,dfs.webhdfs.rest-csrf.methods-to-ignore,"dfs.webhdfs.rest-csrf.enabled = true => dfs.webhdfs.rest-csrf.methods-to-ignore in {GET, HEAD, OPTIONS}",value
1170,dfs.encrypt.data.transfer.algorithm,dfs.encrypt.data.transfer.cipher.suites,"dfs.encrypt.data.transfer.algorithm = ""AES/CTR/NoPadding"" => dfs.encrypt.data.transfer.cipher.suites in {""AES/CTR/NoPadding""}",value
291,dfs.replication,dfs.namenode.maintenance.replication.min,dfs.replication > dfs.namenode.maintenance.replication.min,value
986,dfs.namenode.decommission.blocks.per.interval,dfs.namenode.decommission.max.concurrent.tracked.nodes,dfs.namenode.decommission.max.concurrent.tracked.nodes > 0 => dfs.namenode.decommission.blocks.per.interval > 0,value
1037,dfs.client.failover.max.attempts,dfs.client.failover.connection.retries.on.timeouts,dfs.client.failover.connection.retries.on.timeouts < dfs.client.failover.max.attempts,value
1294,dfs.http.client.retry.policy.spec,dfs.http.client.failover.sleep.max.millis,"dfs.http.client.failover.sleep.max.millis > 0 => dfs.http.client.retry.policy.spec = ""maxSleepTime="" + dfs.http.client.failover.sleep.max.millis",value
1343,dfs.checksum.type,dfs.bytes-per-checksum,dfs.bytes-per-checksum = dfs.checksum.type => dfs.bytes-per-checksum = ANY,value
1316,dfs.balancer.movedWinWidth,dfs.balancer.moverThreads,dfs.balancer.moverThreads > 0 => dfs.balancer.movedWinWidth = ANY,value
1564,dfs.qjm.operations.timeout,dfs.qjournal.write-txns.timeout.ms,dfs.qjm.operations.timeout = dfs.qjournal.write-txns.timeout.ms,value
1480,dfs.qjournal.prepare-recovery.timeout.ms,dfs.qjournal.start-segment.timeout.ms,dfs.qjournal.start-segment.timeout.ms = dfs.qjournal.prepare-recovery.timeout.ms,value
1460,dfs.namenode.replication.pending.timeout-sec,dfs.replication,dfs.replication > dfs.namenode.replication.min => dfs.namenode.replication.pending.timeout-sec = ANY,value
1569,dfs.qjm.operations.timeout,dfs.qjournal.new-epoch.timeout.ms,dfs.qjm.operations.timeout = dfs.qjournal.new-epoch.timeout.ms,value
1035,dfs.client.failover.max.attempts,dfs.client.failover.sleep.max.millis,dfs.client.failover.sleep.max.millis > dfs.client.failover.sleep.base.millis,value
783,dfs.namenode.rpc-bind-host,dfs.namenode.https-bind-host,dfs.namenode.rpc-bind-host != null => dfs.namenode.https-bind-host = <Expression>,value
958,dfs.namenode.service.handler.count,dfs.namenode.lifeline.handler.ratio,dfs.namenode.service.handler.count = dfs.namenode.handler.count * dfs.namenode.lifeline.handler.ratio,value
1322,dfs.balancer.moverThreads,dfs.balancer.block-move.timeout,dfs.balancer.block-move.timeout = ANY => dfs.balancer.moverThreads = ANY,value
1264,dfs.datanode.transfer.socket.send.buffer.size,dfs.datanode.transfer.socket.recv.buffer.size,dfs.datanode.transfer.socket.recv.buffer.size = dfs.datanode.transfer.socket.send.buffer.size,value
804,dfs.datanode.address,dfs.datanode.http.address,dfs.datanode.address = ANY => dfs.datanode.http.address = ANY,value
1207,dfs.client.cache.drop.behind.writes,dfs.datanode.drop.cache.behind.reads,dfs.client.cache.drop.behind.writes = true => dfs.datanode.drop.cache.behind.reads = true,value
1218,dfs.cachereport.intervalMsec,dfs.blockreport.intervalMsec,dfs.blockreport.intervalMsec = dfs.cachereport.intervalMsec,value
1354,dfs.client.failover.random.order,dfs.client.failover.sleep.base.millis,dfs.client.failover.sleep.base.millis > 0 => dfs.client.failover.random.order = ANY,value
1398,dfs.client.write.max-packets-in-flight,dfs.client.block.write.replace-datanode-on-failure.min-replication,dfs.client.block.write.replace-datanode-on-failure.min-replication > 1 => dfs.client.write.max-packets-in-flight < 100,value
1336,dfs.balancer.max-no-move-interval,dfs.mover.max-no-move-interval,dfs.mover.max-no-move-interval > 0 => dfs.balancer.max-no-move-interval > 0,value
906,dfs.replication,dfs.namenode.maintenance.replication.min,dfs.replication > dfs.namenode.maintenance.replication.min,value
437,dfs.client.block.write.replace-datanode-on-failure.min-replication,dfs.replication,dfs.client.block.write.replace-datanode-on-failure.min-replication < dfs.replication,value
797,dfs.namenode.secondary.http-address,dfs.namenode.secondary.https-address,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.namenode.secondary.https-address != null",value
1338,dfs.block.invalidate.limit,dfs.block.misreplication.processing.limit,dfs.block.misreplication.processing.limit > 0 => dfs.block.invalidate.limit < dfs.block.misreplication.processing.limit,value
954,dfs.namenode.handler.count,dfs.datanode.handler.count,dfs.datanode.handler.count = dfs.namenode.handler.count,value
1012,dfs.namenode.delegation.key.update-interval,dfs.namenode.delegation.token.max-lifetime,dfs.namenode.delegation.token.max-lifetime > dfs.namenode.delegation.key.update-interval,value
1479,dfs.qjournal.prepare-recovery.timeout.ms,dfs.qjournal.select-input-streams.timeout.ms,dfs.qjournal.select-input-streams.timeout.ms = dfs.qjournal.prepare-recovery.timeout.ms,value
802,dfs.namenode.secondary.https-address,dfs.namenode.https-address,dfs.namenode.https-address != null => dfs.namenode.secondary.https-address != null,value
819,dfs.namenode.http-address,dfs.client.use.datanode.hostname,dfs.client.use.datanode.hostname = true => dfs.namenode.http-address != ANY,value
1225,dfs.client.read.shortcircuit,dfs.client.read.shortcircuit.skip.checksum,"dfs.client.read.shortcircuit = true => dfs.client.read.shortcircuit.skip.checksum in {true, false}",value
929,dfs.client.block.write.retries,dfs.client.retry.max.attempts,dfs.client.retry.max.attempts > 0 => dfs.client.block.write.retries > 0,value
784,dfs.namenode.rpc-bind-host,dfs.journalnode.rpc-bind-host,dfs.namenode.rpc-bind-host != null => dfs.journalnode.rpc-bind-host = <Expression>,value
951,dfs.heartbeat.interval,dfs.datanode.lifeline.interval.seconds,dfs.datanode.lifeline.interval.seconds = dfs.heartbeat.interval * 3,value
1298,dfs.http.client.failover.max.attempts,dfs.http.client.failover.sleep.max.millis,dfs.http.client.failover.sleep.max.millis > dfs.http.client.failover.sleep.base.millis,value
302,dfs.heartbeat.interval,dfs.namenode.stale.datanode.minimum.interval,dfs.heartbeat.interval > 0 => dfs.namenode.stale.datanode.minimum.interval = 3,value
1353,dfs.client.failover.random.order,dfs.client.failover.max.attempts,dfs.client.failover.max.attempts > 0 => dfs.client.failover.random.order = ANY,value
1029,dfs.datanode.max.transfer.threads,dfs.datanode.balance.bandwidthPerSec,dfs.datanode.balance.bandwidthPerSec = ANY => dfs.datanode.max.transfer.threads > (dfs.datanode.balance.bandwidthPerSec / 1048576),value
1453,dfs.namenode.replication.max-streams,dfs.namenode.replication.max-streams-hard-limit,dfs.namenode.replication.max-streams < dfs.namenode.replication.max-streams-hard-limit,value
1538,dfs.balancer.address,dfs.balancer.dispatcherThreads,dfs.balancer.dispatcherThreads > 0 => dfs.balancer.address != null,value
811,dfs.datanode.ipc.address,dfs.datanode.http.address,dfs.datanode.ipc.address = dfs.datanode.http.address,value
1402,dfs.datanode.fsdataset.volume.choosing.policy,dfs.datanode.available-space-volume-choosing-policy.balanced-space-preference-fraction,"dfs.datanode.fsdataset.volume.choosing.policy = ""AvailableSpaceVolumeChoosingPolicy"" => dfs.datanode.available-space-volume-choosing-policy.balanced-space-preference-fraction in [0.0..1.0]",value
964,dfs.namenode.safemode.threshold-pct,dfs.namenode.safemode.min.datanodes,dfs.namenode.safemode.threshold-pct > 0 => dfs.namenode.safemode.min.datanodes > 0,value
1205,dfs.datanode.available-space-volume-choosing-policy.balanced-space-preference-fraction,dfs.datanode.available-space-volume-choosing-policy.balanced-space-threshold,dfs.datanode.available-space-volume-choosing-policy.balanced-space-threshold > 0 => dfs.datanode.available-space-volume-choosing-policy.balanced-space-preference-fraction = (0..1),value
1435,dfs.mover.movedWinWidth,dfs.balancer.movedWinWidth,dfs.balancer.movedWinWidth = dfs.mover.movedWinWidth,value
1443,dfs.namenode.delegation.token.always-use,dfs.namenode.delegation.key.update-interval,"dfs.namenode.delegation.key.update-interval > 0 => dfs.namenode.delegation.token.always-use in {true, false}",value
966,dfs.journalnode.kerberos.principal,dfs.journalnode.kerberos.realm,dfs.journalnode.kerberos.principal = <principal>@<realm> => dfs.journalnode.kerberos.realm = <realm>,value
871,dfs.datanode.du.reserved,dfs.namenode.resource.du.reserved,dfs.namenode.resource.du.reserved = dfs.datanode.du.reserved,value
1273,dfs.webhdfs.rest-csrf.custom-header,dfs.webhdfs.rest-csrf.methods-to-ignore,"dfs.webhdfs.rest-csrf.custom-header != null => dfs.webhdfs.rest-csrf.methods-to-ignore in {GET, POST, PUT, DELETE}",value
1485,dfs.qjournal.prepare-recovery.timeout.ms,dfs.qjournal.new-epoch.timeout.ms,dfs.qjournal.new-epoch.timeout.ms = dfs.qjournal.prepare-recovery.timeout.ms,value
1422,dfs.https.port,dfs.namenode.https-address,"dfs.namenode.https-address = ""ANY"" => dfs.https.port = <Singlevalue>",value
1369,dfs.client.retry.max.attempts,dfs.client.failover.max.attempts,dfs.client.failover.max.attempts > 0 => dfs.client.retry.max.attempts = (dfs.client.failover.max.attempts + 1),value
1570,dfs.qjm.operations.timeout,dfs.qjournal.get-journal-state.timeout.ms,dfs.qjm.operations.timeout = dfs.qjournal.get-journal-state.timeout.ms,value
1222,dfs.webhdfs.acl.provider.permission.pattern,dfs.webhdfs.user.provider.user.pattern,dfs.webhdfs.user.provider.user.pattern = ANY => dfs.webhdfs.acl.provider.permission.pattern = ANY,value
990,dfs.bytes-per-checksum,dfs.client-write-packet-size,dfs.bytes-per-checksum < dfs.client-write-packet-size,value
994,dfs.namenode.checkpoint.dir,dfs.namenode.num.checkpoints.retained,dfs.namenode.num.checkpoints.retained > 0 => dfs.namenode.checkpoint.dir != null,value
1237,dfs.client.read.shortcircuit.skip.checksum,dfs.client.read.shortcircuit.streams.cache.expiry.ms,dfs.client.read.shortcircuit.streams.cache.expiry.ms > 0 => dfs.client.read.shortcircuit.skip.checksum = ANY,value
1178,dfs.encrypt.data.transfer.cipher.key.bitlength,dfs.encrypt.data.transfer.cipher.suites,dfs.encrypt.data.transfer.cipher.suites != null => dfs.encrypt.data.transfer.cipher.key.bitlength != null,value
1317,dfs.balancer.movedWinWidth,dfs.balancer.dispatcherThreads,dfs.balancer.dispatcherThreads > 0 => dfs.balancer.movedWinWidth = ANY,value
961,dfs.namenode.lifeline.handler.ratio,dfs.namenode.handler.count,dfs.namenode.lifeline.handler.ratio > 0 => dfs.namenode.handler.count = dfs.namenode.lifeline.handler.count / dfs.namenode.lifeline.handler.ratio,value
1465,dfs.qjournal.accept-recovery.timeout.ms,dfs.qjournal.finalize-segment.timeout.ms,dfs.qjournal.finalize-segment.timeout.ms = dfs.qjournal.accept-recovery.timeout.ms,value
905,dfs.replication,dfs.namenode.replication.min,dfs.replication > dfs.namenode.replication.min,value
1364,dfs.client.retry.interval-ms.get-last-block-length,dfs.client.retry.max.attempts,dfs.client.retry.max.attempts > 0 => dfs.client.retry.interval-ms.get-last-block-length = ANY,value
911,dfs.replication.max,dfs.namenode.replication.min,dfs.replication.max > dfs.namenode.replication.min => dfs.namenode.replication.min = [1 .. dfs.replication.max],value
1357,dfs.client.read.short.circuit.replica.stale.threshold.ms,dfs.client.read.short.circuit.replica.stale.threshold.ms,dfs.client.read.short.circuit.replica.stale.threshold.ms = dfs.client.read.short.circuit.replica.stale.threshold.ms,value
1231,dfs.client.read.shortcircuit,dfs.client.use.legacy.blockreader.local,"dfs.client.read.shortcircuit = true => dfs.client.use.legacy.blockreader.local in {true, false}",value
989,dfs.bytes-per-checksum,dfs.blocksize,dfs.bytes-per-checksum < dfs.blocksize,value
776,dfs.namenode.rpc-address,dfs.http.policy,dfs.http.policy = HTTPS => dfs.namenode.rpc-address != null,value
993,dfs.namenode.checkpoint.dir,dfs.namenode.checkpoint.txns,dfs.namenode.checkpoint.txns > 0 => dfs.namenode.checkpoint.dir != null,value
1327,dfs.balancer.getBlocks.size,dfs.balancer.getBlocks.min-block-size,dfs.balancer.getBlocks.min-block-size < dfs.balancer.getBlocks.size,value
1444,dfs.namenode.delegation.token.always-use,dfs.namenode.delegation.token.max-lifetime,"dfs.namenode.delegation.token.max-lifetime > 0 => dfs.namenode.delegation.token.always-use in {true, false}",value
657,dfs.data.transfer.protection,dfs.data.transfer.sasl.properties,"dfs.data.transfer.protection in {{integrity, privacy}} => dfs.data.transfer.sasl.properties in {{""QOP=auth-int"", ""QOP=auth-conf""}}",value
1400,dfs.client.write.max-packets-in-flight,dfs.client.write.byte-array-manager.count-threshold,dfs.client.write.byte-array-manager.count-threshold > 0 => dfs.client.write.max-packets-in-flight < 1000,value
960,dfs.namenode.lifeline.handler.ratio,dfs.namenode.lifeline.handler.count,dfs.namenode.lifeline.handler.ratio > 0 => dfs.namenode.lifeline.handler.count = dfs.namenode.handler.count * dfs.namenode.lifeline.handler.ratio,value
1472,dfs.qjournal.get-journal-state.timeout.ms,dfs.qjournal.select-input-streams.timeout.ms,dfs.qjournal.select-input-streams.timeout.ms = dfs.qjournal.get-journal-state.timeout.ms,value
1510,dfs.webhdfs.oauth2.access.token.provider,dfs.webhdfs.oauth2.refresh.url,dfs.webhdfs.oauth2.refresh.url != null => dfs.webhdfs.oauth2.access.token.provider != null,value
1450,dfs.namenode.max-num-blocks-to-log,dfs.namenode.max.op.size,dfs.namenode.max.op.size > dfs.namenode.max-num-blocks-to-log => dfs.namenode.max-num-blocks-to-log < dfs.namenode.max.op.size,value
916,dfs.namenode.replication.min,dfs.namenode.safemode.replication.min,dfs.namenode.replication.min < dfs.namenode.safemode.replication.min,value
1363,dfs.client.read.shortcircuit.buffer.size,dfs.client.read.shortcircuit.streams.cache.size,dfs.client.read.shortcircuit.streams.cache.size > 256 => dfs.client.read.shortcircuit.buffer.size < 1048576,value
777,dfs.namenode.rpc-address,dfs.client.use.datanode.hostname,dfs.client.use.datanode.hostname = true => dfs.namenode.rpc-address != null,value
1349,dfs.client.failover.proxy.provider,dfs.client.failover.sleep.base.millis,dfs.client.failover.sleep.base.millis > 0 => dfs.client.failover.proxy.provider = ANY,value
1314,dfs.balancer.dispatcherThreads,dfs.datanode.balance.max.concurrent.moves,dfs.datanode.balance.max.concurrent.moves = dfs.balancer.dispatcherThreads,value
889,dfs.namenode.edits.journal-plugin.qjournal,dfs.qjournal.write-txns.timeout.ms,"dfs.qjournal.write-txns.timeout.ms > 0 => dfs.namenode.edits.journal-plugin.qjournal = ""ANY""",value
780,dfs.namenode.rpc-bind-host,dfs.namenode.servicerpc-bind-host,dfs.namenode.rpc-bind-host != null => dfs.namenode.servicerpc-bind-host = <Expression>,value
883,dfs.namenode.edits.dir,dfs.namenode.shared.edits.dir,dfs.namenode.shared.edits.dir = ANY => dfs.namenode.edits.dir = ANY,value
948,dfs.blockreport.intervalMsec,dfs.blockreport.incremental.intervalMsec,dfs.blockreport.incremental.intervalMsec > 0 => dfs.blockreport.intervalMsec > dfs.blockreport.incremental.intervalMsec,value
1404,dfs.datanode.hostname,dfs.datanode.http.address,"dfs.datanode.hostname != null => dfs.datanode.http.address = {dfs.datanode.hostname + "":50075""}",value
1466,dfs.qjournal.accept-recovery.timeout.ms,dfs.qjournal.get-journal-state.timeout.ms,dfs.qjournal.get-journal-state.timeout.ms = dfs.qjournal.accept-recovery.timeout.ms,value
820,dfs.namenode.http-address,dfs.datanode.use.datanode.hostname,dfs.datanode.use.datanode.hostname = true => dfs.namenode.http-address != ANY,value
1420,dfs.http.port,datanode.https.port,dfs.http.port != datanode.https.port,value
361,dfs.https.server.keystore.resource,dfs.https.server.keystore.type,"dfs.https.server.keystore.resource != null => dfs.https.server.keystore.type in {{""JKS"", ""PKCS12""}}",value
1183,dfs.data.transfer.protection,dfs.data.transfer.saslproperties.resolver.class,dfs.data.transfer.protection != null => dfs.data.transfer.saslproperties.resolver.class = ANY,value
1121,dfs.secondary.namenode.kerberos.internal.spnego.principal,dfs.namenode.kerberos.internal.spnego.principal,dfs.secondary.namenode.kerberos.internal.spnego.principal = dfs.namenode.kerberos.internal.spnego.principal,value
1486,dfs.qjournal.start-segment.timeout.ms,dfs.qjournal.select-input-streams.timeout.ms,dfs.qjournal.select-input-streams.timeout.ms = dfs.qjournal.start-segment.timeout.ms,value
812,dfs.datanode.ipc.address,dfs.datanode.https.address,dfs.datanode.ipc.address = dfs.datanode.https.address,value
1405,dfs.datanode.hostname,dfs.datanode.https.address,"dfs.datanode.hostname != null => dfs.datanode.https.address = {dfs.datanode.hostname + "":50475""}",value
280,dfs.namenode.edits.dir.minimum,dfs.namenode.edits.dir,dfs.namenode.edits.dir.minimum = 1 => dfs.namenode.edits.dir in {valid_directories},value
870,dfs.datanode.du.reserved.calculator,dfs.datanode.du.reserved.pct,dfs.datanode.du.reserved.calculator = ANY => dfs.datanode.du.reserved.pct = ANY,value
943,dfs.client.block.write.replace-datanode-on-failure.min-replication,dfs.replication,dfs.replication > dfs.client.block.write.replace-datanode-on-failure.min-replication => dfs.client.block.write.replace-datanode-on-failure.min-replication < dfs.replication,value
1211,dfs.namenode.retrycache.expirytime.millis,dfs.client.failover.sleep.base.millis,dfs.client.failover.sleep.base.millis < dfs.namenode.retrycache.expirytime.millis,value
1245,dfs.client.domain.socket.data.traffic,dfs.client.read.shortcircuit.skip.checksum,dfs.client.read.shortcircuit.skip.checksum = true => dfs.client.domain.socket.data.traffic = true,value
2471,dfs.domain.socket.path,hbase.dfs.client.read.shortcircuit.buffer.size,dfs.client.read.shortcircuit = true => dfs.domain.socket.path != null,value
1116,dfs.namenode.kerberos.internal.spnego.principal,dfs.namenode.kerberos.principal,dfs.namenode.kerberos.principal = dfs.namenode.kerberos.internal.spnego.principal,value
992,dfs.namenode.checkpoint.dir,dfs.namenode.checkpoint.period,dfs.namenode.checkpoint.period > 0 => dfs.namenode.checkpoint.dir != null,value
955,dfs.namenode.handler.count,dfs.namenode.service.handler.count,dfs.namenode.service.handler.count = dfs.namenode.handler.count,value
1247,dfs.client.slow.io.warning.threshold.ms,dfs.datanode.slow.io.warning.threshold.ms,dfs.datanode.slow.io.warning.threshold.ms = dfs.client.slow.io.warning.threshold.ms,value
1389,dfs.client.write.byte-array-manager.count-limit,dfs.client.write.byte-array-manager.count-reset-time-period-ms,dfs.client.write.byte-array-manager.count-reset-time-period-ms > 0 => dfs.client.write.byte-array-manager.count-limit = ANY,value
1283,dfs.xframe.enabled,dfs.xframe.value,"dfs.xframe.enabled = ""true"" => dfs.xframe.value != ""null""",value
1320,dfs.balancer.moverThreads,dfs.balancer.getBlocks.min-block-size,dfs.balancer.getBlocks.min-block-size = ANY => dfs.balancer.moverThreads = ANY,value
1067,dfs.nameservice.id,dfs.internal.nameservices,dfs.nameservice.id in {dfs.internal.nameservices} => dfs.nameservice.id = ANY,value
1319,dfs.balancer.moverThreads,dfs.balancer.max-size-to-move,dfs.balancer.max-size-to-move = ANY => dfs.balancer.moverThreads = ANY,value
857,dfs.namenode.https-address,dfs.namenode.https-bind-host,"dfs.namenode.https-bind-host != null => dfs.namenode.https-address = dfs.namenode.https-bind-host + "":50470""",value
1378,dfs.client.retry.window.base,dfs.client.failover.sleep.base.millis,dfs.client.retry.window.base = <Expression> => dfs.client.failover.sleep.base.millis = <Expression>,value
904,dfs.replication,dfs.replication.max,dfs.replication < dfs.replication.max,value
1227,dfs.client.read.shortcircuit,dfs.client.read.shortcircuit.streams.cache.expiry.ms,dfs.client.read.shortcircuit = true => dfs.client.read.shortcircuit.streams.cache.expiry.ms > 0,value
1419,dfs.http.port,dfs.https.port,dfs.http.port != dfs.https.port,value
316,dfs.bytes-per-checksum,dfs.stream-buffer-size,dfs.bytes-per-checksum < dfs.stream-buffer-size,value
1171,dfs.encrypt.data.transfer.algorithm,dfs.encrypt.data.transfer.cipher.key.bitlength,"dfs.encrypt.data.transfer.algorithm = ""AES/CTR/NoPadding"" => dfs.encrypt.data.transfer.cipher.key.bitlength in {128, 192, 256}",value
1257,dfs.namenode.top.window.num.buckets,dfs.namenode.top.num.users,dfs.namenode.top.num.users > 0 => dfs.namenode.top.window.num.buckets > 0,value
1254,dfs.namenode.lease-recheck-interval-ms,dfs.namenode.heartbeat.recheck-interval,dfs.namenode.heartbeat.recheck-interval > 0 => dfs.namenode.lease-recheck-interval-ms = dfs.namenode.heartbeat.recheck-interval * 1000,value
1023,dfs.image.transfer-bootstrap-standby.bandwidthPerSec,dfs.datanode.balance.bandwidthPerSec,dfs.datanode.balance.bandwidthPerSec = dfs.image.transfer-bootstrap-standby.bandwidthPerSec,value
913,dfs.replication.max,dfs.namenode.safemode.replication.min,dfs.replication.max > dfs.namenode.safemode.replication.min => dfs.namenode.safemode.replication.min = [1 .. dfs.replication.max],value
959,dfs.namenode.service.handler.count,dfs.namenode.lifeline.handler.count,dfs.namenode.service.handler.count = dfs.namenode.lifeline.handler.count + dfs.namenode.handler.count,value
945,dfs.blockreport.intervalMsec,dfs.heartbeat.interval,dfs.heartbeat.interval > 0 => dfs.blockreport.intervalMsec = dfs.heartbeat.interval * 3,value
1490,dfs.qjournal.start-segment.timeout.ms,dfs.qjournal.finalize-segment.timeout.ms,dfs.qjournal.finalize-segment.timeout.ms = dfs.qjournal.start-segment.timeout.ms,value
1539,dfs.balancer.address,dfs.balancer.moverThreads,dfs.balancer.moverThreads > 0 => dfs.balancer.address != null,value
333,dfs.client.failover.sleep.base.millis,dfs.client.failover.sleep.max.millis,dfs.client.failover.sleep.base.millis < dfs.client.failover.sleep.max.millis,value
1070,dfs.internal.nameservices,dfs.ha.namenodes.EXAMPLENAMESERVICE,dfs.internal.nameservices in {dfs.ha.namenodes.EXAMPLENAMESERVICE},value
1413,dfs.ha.fencing.methods,dfs.namenode.handler.count,"dfs.namenode.handler.count > 10 => dfs.ha.fencing.methods in {""shell(/path/to/script)"", ""sshfence""}",value
1331,dfs.balancer.block-move.timeout,dfs.balancer.max-size-to-move,dfs.balancer.max-size-to-move > 0 => dfs.balancer.block-move.timeout = ANY,value
790,dfs.namenode.servicerpc-bind-host,dfs.namenode.https-bind-host,dfs.namenode.https-bind-host = ANY => dfs.namenode.servicerpc-bind-host = ANY,value
1467,dfs.qjournal.accept-recovery.timeout.ms,dfs.qjournal.new-epoch.timeout.ms,dfs.qjournal.new-epoch.timeout.ms = dfs.qjournal.accept-recovery.timeout.ms,value
1382,dfs.client.retry.window.base,dfs.client.retry.times.get-last-block-length,dfs.client.retry.window.base = <Expression> => dfs.client.retry.times.get-last-block-length = <Expression>,value
1139,dfs.namenode.stale.datanode.interval,dfs.namenode.heartbeat.recheck-interval,dfs.namenode.heartbeat.recheck-interval > 0 => dfs.namenode.stale.datanode.interval > dfs.namenode.heartbeat.recheck-interval,value
1501,dfs.web.authentication.filter,dfs.http.policy,"dfs.web.authentication.filter != null => dfs.http.policy in {""HTTP_ONLY"", ""HTTPS_ONLY""}",value
1321,dfs.balancer.moverThreads,dfs.balancer.getBlocks.size,dfs.balancer.getBlocks.size = ANY => dfs.balancer.moverThreads = ANY,value
1401,dfs.datanode.fsdataset.volume.choosing.policy,dfs.datanode.available-space-volume-choosing-policy.balanced-space-threshold,"dfs.datanode.fsdataset.volume.choosing.policy = ""AvailableSpaceVolumeChoosingPolicy"" => dfs.datanode.available-space-volume-choosing-policy.balanced-space-threshold > 0",value
410,dfs.http.client.failover.sleep.base.millis,dfs.http.client.failover.sleep.max.millis,dfs.http.client.failover.sleep.base.millis < dfs.http.client.failover.sleep.max.millis,value
1439,dfs.namenode.available-space-block-placement-policy.balanced-space-preference-fraction,dfs.datanode.available-space-volume-choosing-policy.balanced-space-preference-fraction,dfs.datanode.available-space-volume-choosing-policy.balanced-space-preference-fraction = dfs.namenode.available-space-block-placement-policy.balanced-space-preference-fraction,value
1362,dfs.client.read.shortcircuit.buffer.size,dfs.client.read.short.circuit.replica.stale.threshold.ms,dfs.client.read.short.circuit.replica.stale.threshold.ms < 60000 => dfs.client.read.shortcircuit.buffer.size < 1048576,value
1475,dfs.qjournal.get-journal-state.timeout.ms,dfs.qjournal.prepare-recovery.timeout.ms,dfs.qjournal.prepare-recovery.timeout.ms = dfs.qjournal.get-journal-state.timeout.ms,value
944,dfs.client.block.write.replace-datanode-on-failure.min-replication,dfs.namenode.replication.min,dfs.namenode.replication.min > dfs.client.block.write.replace-datanode-on-failure.min-replication => dfs.client.block.write.replace-datanode-on-failure.min-replication < dfs.namenode.replication.min,value
1483,dfs.qjournal.prepare-recovery.timeout.ms,dfs.qjournal.finalize-segment.timeout.ms,dfs.qjournal.finalize-segment.timeout.ms = dfs.qjournal.prepare-recovery.timeout.ms,value
1567,dfs.qjm.operations.timeout,dfs.qjournal.accept-recovery.timeout.ms,dfs.qjm.operations.timeout = dfs.qjournal.accept-recovery.timeout.ms,value
803,dfs.namenode.secondary.https-address,dfs.namenode.https-bind-host,dfs.namenode.https-bind-host != null => dfs.namenode.secondary.https-address != null,value
1438,dfs.mover.max-no-move-interval,dfs.mover.max-no-move-interval,dfs.mover.max-no-move-interval = dfs.balancer.max-no-move-interval,value
1507,dfs.webhdfs.netty.low.watermark,dfs.webhdfs.netty.high.watermark,dfs.webhdfs.netty.high.watermark > dfs.webhdfs.netty.low.watermark,value
1182,dfs.data.transfer.protection,dfs.encrypt.data.transfer.cipher.key.bitlength,dfs.encrypt.data.transfer = true => dfs.encrypt.data.transfer.cipher.key.bitlength = ANY,value
290,dfs.replication,dfs.namenode.replication.min,dfs.replication > dfs.namenode.replication.min,value
1334,dfs.balancer.max-no-move-interval,dfs.balancer.movedWinWidth,dfs.balancer.movedWinWidth > 0 => dfs.balancer.max-no-move-interval > 0,value
806,dfs.datanode.address,dfs.datanode.ipc.address,dfs.datanode.address = ANY => dfs.datanode.ipc.address = ANY,value
1011,dfs.namenode.delegation.key.update-interval,dfs.block.access.key.update.interval,dfs.block.access.key.update.interval = dfs.namenode.delegation.key.update-interval,value
1030,dfs.datanode.drop.cache.behind.reads,dfs.client.cache.drop.behind.reads,dfs.client.cache.drop.behind.reads = dfs.datanode.drop.cache.behind.reads,value
1315,dfs.balancer.movedWinWidth,dfs.balancer.max-size-to-move,dfs.balancer.max-size-to-move > 0 => dfs.balancer.movedWinWidth = ANY,value
888,dfs.namenode.edits.journal-plugin.qjournal,dfs.qjournal.start-segment.timeout.ms,"dfs.qjournal.start-segment.timeout.ms > 0 => dfs.namenode.edits.journal-plugin.qjournal = ""ANY""",value
805,dfs.datanode.address,dfs.datanode.https.address,dfs.datanode.address = ANY => dfs.datanode.https.address = ANY,value
957,dfs.https.port,dfs.https.server.keystore.resource,dfs.https.port != null => dfs.https.server.keystore.resource != null,value
1209,dfs.client.cache.drop.behind.reads,dfs.client.cache.drop.behind.writes,dfs.client.cache.drop.behind.writes = dfs.client.cache.drop.behind.reads,value
865,dfs.namenode.replication.considerLoad,dfs.namenode.replication.considerLoad.factor,dfs.namenode.replication.considerLoad = true => dfs.namenode.replication.considerLoad.factor > 0,value
419,dfs.replication.max,dfs.replication.min,dfs.replication.max > dfs.replication.min,value
869,dfs.datanode.du.reserved.calculator,dfs.datanode.du.reserved,dfs.datanode.du.reserved.calculator = ANY => dfs.datanode.du.reserved = ANY,value
1142,dfs.namenode.stale.datanode.interval,dfs.namenode.write.stale.datanode.ratio,dfs.namenode.write.stale.datanode.ratio > 0 => dfs.namenode.stale.datanode.interval > 0,value
901,dfs.block.access.key.update.interval,dfs.block.access.token.lifetime,dfs.block.access.token.lifetime > dfs.block.access.key.update.interval => dfs.block.access.key.update.interval < dfs.block.access.token.lifetime,value
1565,dfs.qjm.operations.timeout,dfs.qjournal.start-segment.timeout.ms,dfs.qjm.operations.timeout = dfs.qjournal.start-segment.timeout.ms,value
1375,dfs.client.retry.policy.spec,dfs.client.socket-timeout,dfs.client.socket-timeout = <Number> => dfs.client.retry.policy.spec = <Expression>,value
1306,dfs.http.client.failover.sleep.max.millis,dfs.client.failover.sleep.base.millis,dfs.client.failover.sleep.base.millis < dfs.http.client.failover.sleep.max.millis,value
912,dfs.replication.max,dfs.namenode.maintenance.replication.min,dfs.replication.max > dfs.namenode.maintenance.replication.min => dfs.namenode.maintenance.replication.min = [1 .. dfs.replication.max],value
975,dfs.namenode.resource.checked.volumes,dfs.namenode.resource.du.reserved,dfs.namenode.resource.checked.volumes > 0 => dfs.namenode.resource.du.reserved > 0,value
1024,dfs.image.transfer-bootstrap-standby.bandwidthPerSec,dfs.image.transfer.bandwidthPerSec,dfs.image.transfer.bandwidthPerSec = dfs.image.transfer-bootstrap-standby.bandwidthPerSec,value
319,dfs.stream-buffer-size,dfs.client-write-packet-size,dfs.stream-buffer-size < dfs.client-write-packet-size => dfs.client-write-packet-size > dfs.stream-buffer-size,value
1269,dfs.webhdfs.rest-csrf.enabled,dfs.webhdfs.rest-csrf.custom-header,dfs.webhdfs.rest-csrf.enabled = true => dfs.webhdfs.rest-csrf.custom-header != null,value
864,dfs.namenode.backup.http-address,dfs.namenode.https-address,dfs.namenode.https-address != null => dfs.namenode.backup.http-address in {ANY},value
1469,dfs.qjournal.accept-recovery.timeout.ms,dfs.qjournal.select-input-streams.timeout.ms,dfs.qjournal.select-input-streams.timeout.ms = dfs.qjournal.accept-recovery.timeout.ms,value
1233,dfs.client.read.shortcircuit,dfs.client.domain.socket.data.traffic,"dfs.client.read.shortcircuit = true => dfs.client.domain.socket.data.traffic in {true, false}",value
890,dfs.namenode.edits.journal-plugin.qjournal,dfs.qjournal.select-input-streams.timeout.ms,"dfs.qjournal.select-input-streams.timeout.ms > 0 => dfs.namenode.edits.journal-plugin.qjournal = ""ANY""",value
1348,dfs.client.failover.proxy.provider,dfs.client.failover.max.attempts,dfs.client.failover.max.attempts > 0 => dfs.client.failover.proxy.provider = ANY,value
924,dfs.blocksize,dfs.namenode.fs-limits.min-block-size,dfs.namenode.fs-limits.min-block-size < dfs.blocksize,value
852,dfs.datanode.https.address,dfs.https.port,"dfs.https.port = <Number> => dfs.datanode.https.address = <Expression> + "":"" + dfs.https.port",value
1518,dfs.webhdfs.oauth2.enabled,dfs.http.policy,dfs.http.policy = HTTPS_ONLY => dfs.webhdfs.oauth2.enabled = true,value
1546,dfs.balancer.kerberos.principal,dfs.http.policy,dfs.balancer.kerberos.principal != null => dfs.http.policy in {HTTPS_ONLY},value
1263,dfs.datanode.transfer.socket.send.buffer.size,dfs.client.socket.send.buffer.size,dfs.client.socket.send.buffer.size = dfs.datanode.transfer.socket.send.buffer.size,value
1304,dfs.http.client.failover.sleep.base.millis,dfs.http.client.failover.sleep.max.millis,dfs.http.client.failover.sleep.max.millis > dfs.http.client.failover.sleep.base.millis,value
415,dfs.blocksize,dfs.client.read.shortcircuit.buffer.size,dfs.blocksize > 0 => dfs.client.read.shortcircuit.buffer.size = 1048576,value
1323,dfs.balancer.moverThreads,dfs.balancer.max-no-move-interval,dfs.balancer.max-no-move-interval = ANY => dfs.balancer.moverThreads = ANY,value
956,dfs.namenode.handler.count,dfs.namenode.lifeline.handler.count,dfs.namenode.lifeline.handler.count = dfs.namenode.handler.count * dfs.namenode.lifeline.handler.ratio,value
362,dfs.encrypt.data.transfer.cipher.suites,dfs.encrypt.data.transfer.cipher.key.bitlength,"dfs.encrypt.data.transfer.cipher.suites != null => dfs.encrypt.data.transfer.cipher.key.bitlength in {128, 192, 256}",value
308,dfs.namenode.resource.checked.volumes.minimum,dfs.namenode.resource.du.reserved,dfs.namenode.resource.checked.volumes.minimum < dfs.namenode.resource.du.reserved => dfs.namenode.resource.du.reserved > dfs.namenode.resource.checked.volumes.minimum,value
1131,dfs.namenode.kerberos.principal.pattern,dfs.namenode.kerberos.principal,dfs.namenode.kerberos.principal = ANY => dfs.namenode.kerberos.principal.pattern = ANY,value
952,dfs.heartbeat.interval,dfs.namenode.heartbeat.recheck-interval,dfs.namenode.heartbeat.recheck-interval > dfs.heartbeat.interval,value
1262,dfs.client.block.write.locateFollowingBlock.initial.delay.ms,dfs.client.block.write.locateFollowingBlock.retries,dfs.client.block.write.locateFollowingBlock.retries > 0 => dfs.client.block.write.locateFollowingBlock.initial.delay.ms = ANY,value
1445,dfs.namenode.delegation.token.always-use,dfs.namenode.delegation.token.renew-interval,"dfs.namenode.delegation.token.renew-interval > 0 => dfs.namenode.delegation.token.always-use in {true, false}",value
1135,dfs.namenode.avoid.read.stale.datanode,dfs.namenode.avoid.write.stale.datanode,dfs.namenode.avoid.write.stale.datanode = true => dfs.namenode.avoid.read.stale.datanode = true,value
1365,dfs.client.retry.interval-ms.get-last-block-length,dfs.client.retry.times.get-last-block-length,dfs.client.retry.times.get-last-block-length > 0 => dfs.client.retry.interval-ms.get-last-block-length = ANY,value
1339,dfs.block.invalidate.limit,dfs.namenode.replication.work.multiplier.per.iteration,dfs.namenode.replication.work.multiplier.per.iteration > 0 => dfs.block.invalidate.limit = dfs.namenode.replication.work.multiplier.per.iteration * ANY,value
1326,dfs.balancer.getBlocks.min-block-size,dfs.blocksize,dfs.blocksize > dfs.balancer.getBlocks.min-block-size => dfs.balancer.getBlocks.min-block-size < dfs.blocksize,value
1214,dfs.namenode.retrycache.heap.percent,dfs.namenode.retrycache.expirytime.millis,dfs.namenode.retrycache.expirytime.millis > 0 => dfs.namenode.retrycache.heap.percent > 0,value
863,dfs.namenode.backup.http-address,dfs.namenode.http-address,dfs.namenode.http-address != null => dfs.namenode.backup.http-address in {ANY},value
1261,dfs.namenode.top.num.users,dfs.namenode.top.windows.minutes,dfs.namenode.top.windows.minutes > 0 => dfs.namenode.top.num.users > 0,value
936,dfs.client.block.write.replace-datanode-on-failure.policy,dfs.client.block.write.replace-datanode-on-failure.min-replication,dfs.client.block.write.replace-datanode-on-failure.min-replication < dfs.replication => dfs.client.block.write.replace-datanode-on-failure.policy = ANY,value
983,dfs.namenode.decommission.interval,dfs.namenode.decommission.max.concurrent.tracked.nodes,dfs.namenode.decommission.interval > 0 => dfs.namenode.decommission.max.concurrent.tracked.nodes > 0,value
789,dfs.namenode.servicerpc-bind-host,dfs.namenode.http-bind-host,dfs.namenode.http-bind-host = ANY => dfs.namenode.servicerpc-bind-host = ANY,value
1223,dfs.webhdfs.socket.read-timeout,dfs.webhdfs.socket.connect-timeout,dfs.webhdfs.socket.connect-timeout = dfs.webhdfs.socket.read-timeout,value
403,dfs.permissions.enabled,fs.permissions.umask-mode,"dfs.permissions.enabled = true => fs.permissions.umask-mode in {{022, 002, 077}}",value
289,dfs.replication,dfs.replication.max,dfs.replication < dfs.replication.max,value
1392,dfs.client.write.byte-array-manager.count-reset-time-period-ms,dfs.client.write.byte-array-manager.count-threshold,dfs.client.write.byte-array-manager.count-threshold > 0 => dfs.client.write.byte-array-manager.count-reset-time-period-ms > 0,value
1471,dfs.qjournal.accept-recovery.timeout.ms,dfs.qjournal.write-txns.timeout.ms,dfs.qjournal.write-txns.timeout.ms = dfs.qjournal.accept-recovery.timeout.ms,value
917,dfs.namenode.replication.min,dfs.namenode.maintenance.replication.min,dfs.namenode.replication.min < dfs.namenode.maintenance.replication.min,value
983,dfs.namenode.edits.asynclogging,dfs.namenode.edits.toleration.length,dfs.namenode.edits.asynclogging = true => dfs.namenode.edits.toleration.length > [1024..65536],value
1300,dfs.http.client.retry.max.attempts,dfs.http.client.failover.max.attempts,dfs.http.client.failover.max.attempts > 0 => dfs.http.client.retry.max.attempts > dfs.http.client.failover.max.attempts,value
1034,dfs.client.failover.max.attempts,dfs.client.failover.sleep.base.millis,dfs.client.failover.sleep.base.millis < dfs.client.failover.max.attempts * 1000,value
928,dfs.client.block.write.retries,dfs.client.block.write.replace-datanode-on-failure.min-replication,dfs.client.block.write.replace-datanode-on-failure.min-replication > 1 => dfs.client.block.write.retries > 0,value
1009,dfs.namenode.num.extra.edits.retained,dfs.namenode.max.extra.edits.segments.retained,dfs.namenode.max.extra.edits.segments.retained = ANY => dfs.namenode.num.extra.edits.retained = ANY,value
1255,dfs.namenode.edekcacheloader.initial.delay.ms,dfs.namenode.edekcacheloader.interval.ms,dfs.namenode.edekcacheloader.interval.ms > 0 => dfs.namenode.edekcacheloader.initial.delay.ms < dfs.namenode.edekcacheloader.interval.ms,value
1451,dfs.namenode.max-num-blocks-to-log,dfs.namenode.replication.max-streams,dfs.namenode.replication.max-streams > dfs.namenode.max-num-blocks-to-log => dfs.namenode.max-num-blocks-to-log < dfs.namenode.replication.max-streams,value
1542,dfs.balancer.keytab.file,dfs.http.policy,dfs.http.policy = HTTPS => dfs.balancer.keytab.file != null,value
1509,dfs.webhdfs.oauth2.access.token.provider,dfs.webhdfs.oauth2.client.id,dfs.webhdfs.oauth2.client.id != null => dfs.webhdfs.oauth2.access.token.provider != null,value
1313,dfs.balancer.dispatcherThreads,dfs.balancer.moverThreads,dfs.balancer.moverThreads = dfs.balancer.dispatcherThreads,value
1021,dfs.image.transfer.timeout,dfs.image.transfer.bandwidthPerSec,dfs.image.transfer.bandwidthPerSec > 0 => dfs.image.transfer.timeout = ANY,value
593,dfs.ha.fencing.ssh.connect-timeout,ha.health-monitor.rpc-timeout.ms,ha.health-monitor.rpc-timeout.ms > dfs.ha.fencing.ssh.connect-timeout => dfs.ha.fencing.ssh.connect-timeout < ha.health-monitor.rpc-timeout.ms,value
972,dfs.namenode.resource.du.reserved,dfs.datanode.du.reserved.pct,dfs.datanode.du.reserved.pct in [0..100] => dfs.namenode.resource.du.reserved = dfs.datanode.du.reserved * (dfs.datanode.du.reserved.pct / 100),value
1200,dfs.journalnode.https-address,dfs.journalnode.https-bind-host,dfs.journalnode.https-bind-host != null => dfs.journalnode.https-address = dfs.journalnode.https-bind-host:<PortExpression>,value
1559,dfs.webhdfs.use.ipc.callq,dfs.datanode.use.datanode.hostname,dfs.datanode.use.datanode.hostname = true => dfs.webhdfs.use.ipc.callq != true,value
967,dfs.namenode.safemode.min.datanodes,dfs.namenode.safemode.extension,dfs.namenode.safemode.extension > 0 => dfs.namenode.safemode.min.datanodes > 0,value
332,dfs.client.failover.sleep.base.millis,dfs.http.client.failover.sleep.max.millis,dfs.client.failover.sleep.base.millis < dfs.http.client.failover.sleep.max.millis,value
1184,dfs.journalnode.rpc-address,dfs.journalnode.http-address,dfs.journalnode.rpc-address != null => dfs.journalnode.http-address != null,value
1325,dfs.balancer.getBlocks.min-block-size,dfs.namenode.fs-limits.min-block-size,dfs.namenode.fs-limits.min-block-size < dfs.balancer.getBlocks.min-block-size => dfs.balancer.getBlocks.min-block-size > dfs.namenode.fs-limits.min-block-size,value
920,dfs.namenode.maintenance.replication.min,dfs.namenode.safemode.replication.min,dfs.namenode.maintenance.replication.min = <Singlevalue> => dfs.namenode.safemode.replication.min = <Singlevalue>,value
1258,dfs.namenode.top.window.num.buckets,dfs.namenode.top.windows.minutes,dfs.namenode.top.windows.minutes > 0 => dfs.namenode.top.window.num.buckets > 0,value
853,dfs.datanode.https.address,datanode.https.port,"datanode.https.port = <Number> => dfs.datanode.https.address = <Expression> + "":"" + datanode.https.port",value
968,dfs.namenode.safemode.min.datanodes,dfs.namenode.safemode.replication.min,dfs.namenode.safemode.replication.min > 0 => dfs.namenode.safemode.min.datanodes > 0,value
1568,dfs.qjm.operations.timeout,dfs.qjournal.select-input-streams.timeout.ms,dfs.qjm.operations.timeout = dfs.qjournal.select-input-streams.timeout.ms,value
1474,dfs.qjournal.get-journal-state.timeout.ms,dfs.qjournal.write-txns.timeout.ms,dfs.qjournal.write-txns.timeout.ms = dfs.qjournal.get-journal-state.timeout.ms,value
950,dfs.namenode.max.full.block.report.leases,dfs.namenode.full.block.report.lease.length.ms,dfs.namenode.full.block.report.lease.length.ms > 0 => dfs.namenode.max.full.block.report.leases = ANY,value
1228,dfs.client.read.shortcircuit,dfs.client.read.short.circuit.replica.stale.threshold.ms,dfs.client.read.shortcircuit = true => dfs.client.read.short.circuit.replica.stale.threshold.ms > 0,value
946,dfs.blockreport.intervalMsec,dfs.blockreport.initialDelay,dfs.blockreport.initialDelay > 0 => dfs.blockreport.intervalMsec > dfs.blockreport.initialDelay,value
1033,dfs.datanode.drop.cache.behind.writes,dfs.client.cache.drop.behind.writes,dfs.client.cache.drop.behind.writes = ANY => dfs.datanode.drop.cache.behind.writes = ANY,value
366,dfs.datanode.https.address,dfs.https.port,"dfs.https.port = <PortNumber> => dfs.datanode.https.address in {{ ""ANY:.."" + <PortNumber> + ""..ANY"" }}",value
1041,dfs.client.failover.sleep.base.millis,dfs.client.failover.sleep.max.millis,dfs.client.failover.sleep.base.millis < dfs.client.failover.sleep.max.millis,value
1229,dfs.client.read.shortcircuit,dfs.client.read.shortcircuit.buffer.size,dfs.client.read.shortcircuit = true => dfs.client.read.shortcircuit.buffer.size > 0,value
1236,dfs.client.read.shortcircuit.skip.checksum,dfs.client.read.shortcircuit.streams.cache.size,dfs.client.read.shortcircuit.streams.cache.size > 0 => dfs.client.read.shortcircuit.skip.checksum = ANY,value
935,dfs.client.block.write.replace-datanode-on-failure.policy,dfs.client.block.write.replace-datanode-on-failure.best-effort,dfs.client.block.write.replace-datanode-on-failure.best-effort = true => dfs.client.block.write.replace-datanode-on-failure.policy = ANY,value
1324,dfs.balancer.moverThreads,dfs.datanode.balance.max.concurrent.moves,dfs.datanode.balance.max.concurrent.moves = ANY => dfs.balancer.moverThreads = ANY,value
1459,dfs.namenode.replication.pending.timeout-sec,dfs.namenode.replication.min,dfs.namenode.replication.min < dfs.replication => dfs.namenode.replication.pending.timeout-sec = ANY,value
1305,dfs.http.client.failover.sleep.base.millis,dfs.client.failover.sleep.max.millis,dfs.client.failover.sleep.max.millis > dfs.client.failover.sleep.base.millis,value
1292,dfs.http.client.retry.policy.spec,dfs.http.client.retry.max.attempts,"dfs.http.client.retry.max.attempts > 0 => dfs.http.client.retry.policy.spec = ""maxRetries="" + dfs.http.client.retry.max.attempts",value
1122,dfs.secondary.namenode.kerberos.internal.spnego.principal,dfs.journalnode.kerberos.internal.spnego.principal,dfs.secondary.namenode.kerberos.internal.spnego.principal = dfs.journalnode.kerberos.internal.spnego.principal,value
885,dfs.namenode.edits.dir,dfs.namenode.checkpoint.edits.dir,dfs.namenode.checkpoint.edits.dir = ANY => dfs.namenode.edits.dir = ANY,value
1377,dfs.client.retry.times.get-last-block-length,dfs.client.retry.max.attempts,dfs.client.retry.max.attempts = ANY => dfs.client.retry.times.get-last-block-length = ANY,value
1571,dfs.qjm.operations.timeout,dfs.qjournal.finalize-segment.timeout.ms,dfs.qjm.operations.timeout = dfs.qjournal.finalize-segment.timeout.ms,value
1332,dfs.balancer.max-no-move-interval,dfs.balancer.max-size-to-move,dfs.balancer.max-size-to-move > 0 => dfs.balancer.max-no-move-interval > 0,value
411,dfs.block.access.key.update.interval,dfs.block.access.token.lifetime,dfs.block.access.token.lifetime = X => dfs.block.access.key.update.interval < X,value
1239,dfs.client.use.legacy.blockreader.local,dfs.client.use.legacy.blockreader,dfs.client.use.legacy.blockreader = true => dfs.client.use.legacy.blockreader.local = false,value
1558,dfs.webhdfs.use.ipc.callq,dfs.client.use.datanode.hostname,dfs.client.use.datanode.hostname = true => dfs.webhdfs.use.ipc.callq != true,value
1355,dfs.client.failover.random.order,dfs.client.failover.sleep.max.millis,dfs.client.failover.sleep.max.millis > 0 => dfs.client.failover.random.order = ANY,value
1297,dfs.http.client.failover.max.attempts,dfs.http.client.failover.sleep.base.millis,dfs.http.client.failover.sleep.base.millis < dfs.http.client.failover.max.attempts,value
1358,dfs.client.read.short.circuit.replica.stale.threshold.ms,dfs.namenode.stale.datanode.interval,dfs.namenode.stale.datanode.interval > dfs.client.read.short.circuit.replica.stale.threshold.ms,value
1008,dfs.namenode.num.extra.edits.retained,dfs.namenode.num.checkpoints.retained,dfs.namenode.num.checkpoints.retained = ANY => dfs.namenode.num.extra.edits.retained = ANY,value
1464,dfs.namenode.stale.datanode.minimum.interval,dfs.namenode.write.stale.datanode.ratio,dfs.namenode.write.stale.datanode.ratio > 0 => dfs.namenode.stale.datanode.minimum.interval > 0,value
947,dfs.blockreport.intervalMsec,dfs.blockreport.split.threshold,dfs.blockreport.split.threshold > 0 => dfs.blockreport.intervalMsec < dfs.blockreport.split.threshold * 1000,value
1032,dfs.quota.by.storage.type.enabled,dfs.datanode.data.dir,dfs.quota.by.storage.type.enabled = true => dfs.datanode.data.dir contains [DISK]/[SSD]/[ARCHIVE],value
1394,dfs.client.write.byte-array-manager.enabled,dfs.client.write.byte-array-manager.count-threshold,dfs.client.write.byte-array-manager.enabled = true => dfs.client.write.byte-array-manager.count-threshold > 0,value
1022,dfs.image.transfer.timeout,dfs.image.transfer.chunksize,dfs.image.transfer.chunksize > 0 => dfs.image.transfer.timeout = ANY,value
1291,dfs.http.client.retry.policy.spec,dfs.http.client.failover.max.attempts,"dfs.http.client.failover.max.attempts > 0 => dfs.http.client.retry.policy.spec = ""maxRetries="" + dfs.http.client.failover.max.attempts",value
1293,dfs.http.client.retry.policy.spec,dfs.http.client.failover.sleep.base.millis,"dfs.http.client.failover.sleep.base.millis > 0 => dfs.http.client.retry.policy.spec = ""sleepTime="" + dfs.http.client.failover.sleep.base.millis",value
1096,dfs.namenode.kerberos.principal,dfs.web.authentication.kerberos.principal,dfs.namenode.kerberos.principal != null => dfs.web.authentication.kerberos.principal in { dfs.namenode.kerberos.principal },value
1246,dfs.client.domain.socket.data.traffic,dfs.client.read.shortcircuit.streams.cache.size,dfs.client.read.shortcircuit.streams.cache.size > 0 => dfs.client.domain.socket.data.traffic = true,value
1194,dfs.journalnode.http-address,dfs.journalnode.http-bind-host,"dfs.journalnode.http-bind-host != null => dfs.journalnode.http-address = ""ANY""",value
998,dfs.namenode.replication.max-streams,dfs.replication,dfs.replication > 1 => dfs.namenode.replication.max-streams > dfs.replication,value
1212,dfs.namenode.retrycache.expirytime.millis,dfs.client.failover.sleep.max.millis,dfs.client.failover.sleep.max.millis < dfs.namenode.retrycache.expirytime.millis,value
982,dfs.namenode.decommission.interval,dfs.namenode.decommission.blocks.per.interval,dfs.namenode.decommission.interval > 0 => dfs.namenode.decommission.blocks.per.interval > 0,value
1452,dfs.namenode.max-num-blocks-to-log,dfs.namenode.replication.max-streams-hard-limit,dfs.namenode.replication.max-streams-hard-limit > dfs.namenode.max-num-blocks-to-log => dfs.namenode.max-num-blocks-to-log < dfs.namenode.replication.max-streams-hard-limit,value
1478,dfs.qjournal.get-journal-state.timeout.ms,dfs.qjournal.new-epoch.timeout.ms,dfs.qjournal.new-epoch.timeout.ms = dfs.qjournal.get-journal-state.timeout.ms,value
352,dfs.namenode.stale.datanode.minimum.interval,dfs.namenode.stale.datanode.interval,dfs.namenode.stale.datanode.minimum.interval > 0 => dfs.namenode.stale.datanode.interval = (dfs.namenode.stale.datanode.minimum.interval * dfs.heartbeat.interval),value
781,dfs.namenode.rpc-bind-host,dfs.namenode.lifeline.rpc-bind-host,dfs.namenode.rpc-bind-host != null => dfs.namenode.lifeline.rpc-bind-host = <Expression>,value
1477,dfs.qjournal.get-journal-state.timeout.ms,dfs.qjournal.finalize-segment.timeout.ms,dfs.qjournal.finalize-segment.timeout.ms = dfs.qjournal.get-journal-state.timeout.ms,value
1193,dfs.journalnode.http-address,dfs.journalnode.https-address,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.journalnode.http-address != dfs.journalnode.https-address",value
786,dfs.namenode.servicerpc-address,dfs.namenode.rpc-address,dfs.namenode.rpc-address != null => dfs.namenode.servicerpc-address != dfs.namenode.rpc-address,value
1481,dfs.qjournal.prepare-recovery.timeout.ms,dfs.qjournal.write-txns.timeout.ms,dfs.qjournal.write-txns.timeout.ms = dfs.qjournal.prepare-recovery.timeout.ms,value
1380,dfs.client.retry.window.base,dfs.client.retry.policy.spec,dfs.client.retry.window.base = <Expression> => dfs.client.retry.policy.spec = <Expression>,value
1487,dfs.qjournal.start-segment.timeout.ms,dfs.qjournal.write-txns.timeout.ms,dfs.qjournal.write-txns.timeout.ms = dfs.qjournal.start-segment.timeout.ms,value
907,dfs.replication,dfs.namenode.safemode.replication.min,dfs.replication > dfs.namenode.safemode.replication.min,value
1185,dfs.journalnode.rpc-address,dfs.journalnode.https-address,dfs.journalnode.rpc-address != null => dfs.journalnode.https-address != null,value
1251,dfs.namenode.fs-limits.max-xattrs-per-inode,dfs.namenode.fs-limits.max-xattr-size,dfs.namenode.fs-limits.max-xattr-size > 0 => dfs.namenode.fs-limits.max-xattrs-per-inode > 0,value
1347,dfs.client.failover.proxy.provider,dfs.client.failover.random.order,dfs.client.failover.random.order = true => dfs.client.failover.proxy.provider = ANY,value
