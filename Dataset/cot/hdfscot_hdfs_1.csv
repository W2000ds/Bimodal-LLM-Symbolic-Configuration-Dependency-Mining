id,Parameter1,Parameter2,bnf,type
1,dfs.namenode.lease-recheck-interval-ms,dfs.namenode.lease-period,dfs.namenode.lease-recheck-interval-ms < dfs.namenode.lease-period,behavior
2,dfs.web.authentication.filter,hadoop.http.authentication.type,"<Variable> = ""dfs.web.authentication.filter"" => <Variable> = ""hadoop.http.authentication.type""",behavior
3,dfs.namenode.delegation.key.update-interval,dfs.namenode.delegation.token.max-lifetime,dfs.namenode.delegation.key.update-interval < dfs.namenode.delegation.token.max-lifetime => dfs.namenode.delegation.token.max-lifetime > dfs.namenode.delegation.key.update-interval,behavior
4,dfs.hosts,dfs.hosts.exclude,dfs.hosts != null => dfs.hosts.exclude != null,behavior
5,dfs.ha.standby.checkpoints,dfs.ha.tail-edits.period,dfs.ha.standby.checkpoints = true => dfs.ha.tail-edits.period > 0,behavior
6,dfs.client.read.shortcircuit,dfs.client.read.shortcircuit.skip.checksum,"dfs.client.read.shortcircuit = true => dfs.client.read.shortcircuit.skip.checksum in {true, false}",behavior
7,dfs.client.block.write.locateFollowingBlock.retries,dfs.client.socket-timeout,dfs.client.block.write.locateFollowingBlock.retries > 3 => dfs.client.socket-timeout > 60000,behavior
8,dfs.namenode.safemode.replication.min,dfs.namenode.safemode.threshold-pct,dfs.namenode.safemode.replication.min = ANY => dfs.namenode.safemode.threshold-pct = ANY,behavior
9,dfs.client.failover.random.order,dfs.client.retry.policy.enabled,dfs.client.failover.random.order = true => dfs.client.retry.policy.enabled = true,behavior
10,dfs.client.socket-timeout,dfs.datanode.socket.write.timeout,dfs.client.socket-timeout > 0 => dfs.datanode.socket.write.timeout = dfs.client.socket-timeout + 1000,behavior
11,dfs.client.https.need-auth,dfs.https.server.keystore.resource,"dfs.https.server.keystore.resource != ""null"" => dfs.client.https.need-auth = ""true""",behavior
12,dfs.datanode.dns.interface,dfs.datanode.dns.nameserver,dfs.datanode.dns.interface != null => dfs.datanode.dns.nameserver != null,behavior
13,dfs.client.failover.connection.retries,dfs.client.failover.sleep.max.millis,dfs.client.failover.connection.retries > 0 => dfs.client.failover.sleep.max.millis > dfs.client.failover.sleep.base.millis,behavior
14,dfs.datanode.scan.period.hours,dfs.datanode.directoryscan.interval,dfs.datanode.scan.period.hours > 0 => dfs.datanode.directoryscan.interval = [1..24],behavior
15,dfs.client.block.write.retries,dfs.client.socket-timeout,dfs.client.block.write.retries > 1 => dfs.client.socket-timeout > 60000,behavior
16,dfs.client.replica.accessor.builder.classes,dfs.client.replica.selector.class,dfs.client.replica.accessor.builder.classes != null => dfs.client.replica.selector.class != null,behavior
17,dfs.namenode.audit.log.async,dfs.namenode.audit.log.maxretainminutes,dfs.namenode.audit.log.async = true => dfs.namenode.audit.log.maxretainminutes > 0,behavior
18,dfs.stream-buffer-size,dfs.datanode.hdfs-blocks-metadata.enabled,dfs.stream-buffer-size > 65536 => dfs.datanode.hdfs-blocks-metadata.enabled = true,behavior
19,dfs.client.write.byte-array-manager.count-reset-time-period-ms,dfs.client.write.byte-array-manager.enabled,dfs.client.write.byte-array-manager.enabled = true => dfs.client.write.byte-array-manager.count-reset-time-period-ms > 0,behavior
20,dfs.namenode.path.based.cache.refresh.interval.ms,dfs.namenode.path.based.cache.retry.interval.ms,dfs.namenode.path.based.cache.refresh.interval.ms < dfs.namenode.path.based.cache.retry.interval.ms => dfs.namenode.path.based.cache.retry.interval.ms = dfs.namenode.path.based.cache.refresh.interval.ms * 0.5,behavior
21,dfs.datanode.kerberos.principal,hadoop.security.authentication,dfs.datanode.kerberos.principal != null => hadoop.security.authentication = 'kerberos',behavior
22,dfs.client.socketcache.capacity,dfs.client.socket-timeout,dfs.client.socketcache.capacity > {{ANY}} => dfs.client.socket-timeout > {{ANY}},behavior
23,dfs.journalnode.kerberos.principal,dfs.namenode.kerberos.principal,dfs.journalnode.kerberos.principal != null => dfs.namenode.kerberos.principal != null,behavior
24,dfs.http.client.failover.max.attempts,dfs.http.client.failover.sleep.max.millis,dfs.http.client.failover.max.attempts > 1 => dfs.http.client.failover.sleep.max.millis > dfs.http.client.failover.sleep.base.millis,behavior
25,dfs.namenode.accesstime.precision,dfs.namenode.checkpoint.period,dfs.namenode.accesstime.precision < 3600 => dfs.namenode.checkpoint.period < 3600,behavior
26,dfs.qjournal.start-segment.timeout.ms,ipc.client.connect.timeout,dfs.qjournal.start-segment.timeout.ms > 0 => ipc.client.connect.timeout > dfs.qjournal.start-segment.timeout.ms,behavior
27,dfs.client.failover.max.attempts,dfs.client.failover.sleep.base.millis,dfs.client.failover.max.attempts > 5 => dfs.client.failover.sleep.base.millis < 1000,behavior
28,dfs.namenode.lifeline.rpc-bind-host,dfs.namenode.rpc-bind-host,dfs.namenode.lifeline.rpc-bind-host != null => dfs.namenode.rpc-bind-host != null,behavior
29,dfs.datanode.plugins,dfs.datanode.shared.file.descriptor.paths,dfs.datanode.plugins != null => dfs.datanode.shared.file.descriptor.paths != null,behavior
30,dfs.namenode.hosts.provider.classname,dfs.ha.automatic-failover.enabled,dfs.namenode.hosts.provider.classname != default => dfs.ha.automatic-failover.enabled = true,behavior
31,dfs.namenode.edits.journal-plugin.qjournal,dfs.ha.tail-edits.period,dfs.namenode.edits.journal-plugin.qjournal != null => dfs.ha.tail-edits.period > 0,behavior
32,dfs.balancer.block-move.timeout,dfs.balancer.movedWinWidth,dfs.balancer.block-move.timeout > 600000 => dfs.balancer.movedWinWidth > 5400000,behavior
33,dfs.namenode.edits.dir.required,dfs.namenode.shared.edits.dir,dfs.namenode.edits.dir.required != null => dfs.namenode.shared.edits.dir != null,behavior
34,dfs.blockreport.intervalMsec,dfs.namenode.replication.interval,dfs.blockreport.intervalMsec > 60000 => dfs.namenode.replication.interval > 300,behavior
35,dfs.namenode.audit.loggers,dfs.namenode.audit.log.maxfilesize,"dfs.namenode.audit.loggers = ""ANY"" => dfs.namenode.audit.log.maxfilesize = ""ANY""",behavior
36,dfs.client.short.circuit.replica.stale.threshold.ms,dfs.client.read.shortcircuit,dfs.client.read.shortcircuit = true => dfs.client.short.circuit.replica.stale.threshold.ms > 0,behavior
37,dfs.qjournal.new-epoch.timeout.ms,dfs.ha.tail-edits.period,dfs.qjournal.new-epoch.timeout.ms < 60000 => dfs.ha.tail-edits.period < 60,behavior
38,dfs.journalnode.edits.dir,dfs.ha.tail-edits.period,dfs.journalnode.edits.dir != null => dfs.ha.tail-edits.period in {{30..60}},behavior
39,dfs.client.failover.connection.retries.on.timeouts,dfs.client.failover.sleep.max.millis,dfs.client.failover.connection.retries.on.timeouts > 0 => dfs.client.failover.sleep.max.millis > dfs.client.failover.sleep.base.millis,behavior
40,dfs.namenode.https-address,dfs.https.need.client.auth,dfs.namenode.https-address != null => dfs.https.need.client.auth = ANY,behavior
41,dfs.namenode.fs-limits.max-blocks-per-file,dfs.blocksize,dfs.namenode.fs-limits.max-blocks-per-file > 1 => dfs.blocksize < (file_size / dfs.namenode.fs-limits.max-blocks-per-file),behavior
42,dfs.secondary.namenode.keytab.file,hadoop.security.auth_to_local,dfs.secondary.namenode.keytab.file != null => hadoop.security.auth_to_local != null,behavior
43,dfs.cluster.administrators,dfs.permissions.enabled,dfs.cluster.administrators != null => dfs.permissions.enabled = true,behavior
44,dfs.client.block.write.locateFollowingBlock.retries,dfs.client.block.write.retries,dfs.client.block.write.locateFollowingBlock.retries > 0 => dfs.client.block.write.retries > 0,behavior
45,dfs.namenode.block-placement-policy.default.prefer-local-node,dfs.blocksize,dfs.namenode.block-placement-policy.default.prefer-local-node = true => dfs.blocksize > 0,behavior
46,dfs.qjournal.accept-recovery.timeout.ms,dfs.ha.tail-edits.period,dfs.qjournal.accept-recovery.timeout.ms < dfs.ha.tail-edits.period,behavior
47,dfs.namenode.edits.dir.required,dfs.namenode.name.dir,dfs.namenode.edits.dir.required = true => dfs.namenode.name.dir != null,behavior
48,dfs.qjournal.queued-edits.limit.mb,ipc.client.connect.timeout,dfs.qjournal.queued-edits.limit.mb > 100 => ipc.client.connect.timeout > 60000,behavior
49,dfs.https.port,dfs.https.need.client.auth,"dfs.https.port != null => dfs.https.need.client.auth = {true, false}",behavior
50,dfs.client.write.byte-array-manager.count-threshold,dfs.client.write.byte-array-manager.limit-per-thread,dfs.client.write.byte-array-manager.count-threshold > 0 => dfs.client.write.byte-array-manager.limit-per-thread > 0,behavior
51,dfs.datanode.balance.bandwidthPerSec,dfs.datanode.balance.max.concurrent.moves,dfs.datanode.balance.bandwidthPerSec > 0 => dfs.datanode.balance.max.concurrent.moves > 0,behavior
52,dfs.namenode.top.window.num.buckets,dfs.namenode.top.num.users,dfs.namenode.top.window.num.buckets > 0 => dfs.namenode.top.num.users > 0,behavior
53,dfs.data.transfer.client.tcpnodelay,dfs.data.transfer.socket.receive.buffer.size,dfs.data.transfer.client.tcpnodelay = true => dfs.data.transfer.socket.receive.buffer.size > 0,behavior
54,dfs.web.authentication.kerberos.principal,dfs.web.authentication.kerberos.keytab,dfs.web.authentication.kerberos.principal != null => dfs.web.authentication.kerberos.keytab != null,behavior
55,dfs.namenode.list.cache.directives.num.responses,dfs.namenode.list.cache.directives.expiry.time.millis,dfs.namenode.list.cache.directives.expiry.time.millis < 60000 => dfs.namenode.list.cache.directives.num.responses in {{100..500}},behavior
56,dfs.datanode.cache.revocation.timeout.ms,dfs.datanode.max.locked.memory,dfs.datanode.cache.revocation.timeout.ms > 0 => dfs.datanode.max.locked.memory > 0,behavior
57,dfs.journalnode.kerberos.principal,dfs.encrypt.data.transfer,dfs.journalnode.kerberos.principal != null => dfs.encrypt.data.transfer = true,behavior
58,dfs.webhdfs.enabled,dfs.https.enable,dfs.webhdfs.enabled = true AND dfs.http.policy = HTTPS_ONLY => dfs.https.enable = true,control
59,dfs.block.access.token.enable,dfs.block.access.token.lifetime,dfs.block.access.token.enable = true => dfs.block.access.token.lifetime != null,control
60,dfs.namenode.fs-limits.max-component-length,dfs.namenode.fs-limits.max-directory-items,dfs.namenode.fs-limits.max-component-length > 255 => dfs.namenode.fs-limits.max-directory-items > 1000,control
61,dfs.http.policy,dfs.webhdfs.enabled,"dfs.http.policy = ""HTTP_ONLY"" => dfs.webhdfs.enabled = ""true""",control
62,dfs.client.mmap.enabled,dfs.datanode.max.locked.memory,dfs.client.mmap.enabled = true => dfs.datanode.max.locked.memory > 0,control
63,dfs.namenode.replication.considerLoad,dfs.namenode.replication.considerLoad.factor,dfs.namenode.replication.considerLoad = true => dfs.namenode.replication.considerLoad.factor = 2.0,control
64,dfs.namenode.backup.http-address,dfs.ha.namenodes.[nameservice ID],"dfs.namenode.backup.http-address != null => dfs.ha.namenodes.[nameservice ID] in {{backup_namenode_id, other_namenode_ids}}",control
65,dfs.ha.namenodes.EXAMPLENAMESERVICE,dfs.namenode.http-address.EXAMPLENAMESERVICE.[namenode_id],"dfs.ha.namenodes.EXAMPLENAMESERVICE = {{ namenode1,namenode2 }} => dfs.namenode.http-address.EXAMPLENAMESERVICE.namenode1 = ANY && dfs.namenode.http-address.EXAMPLENAMESERVICE.namenode2 = ANY",control
66,dfs.client.failover.proxy.provider,dfs.nameservices,dfs.nameservices != null => dfs.client.failover.proxy.provider != null,control
67,dfs.datanode.drop.cache.behind.reads,dfs.datanode.max.locked.memory,dfs.datanode.drop.cache.behind.reads = true => dfs.datanode.max.locked.memory > [default..ANY],control
68,dfs.ha.namenode.id,dfs.ha.automatic-failover.enabled,dfs.ha.automatic-failover.enabled = true => dfs.ha.namenode.id != null,control
69,dfs.namenode.top.enabled,dfs.namenode.top.num.users,top.enabled = true => dfs.namenode.top.num.users != null,control
70,dfs.client.socketcache.expiryMsec,dfs.client.socketcache.capacity,dfs.client.socketcache.expiryMsec > 0 => dfs.client.socketcache.capacity > 0,control
71,dfs.client.read.prefetch.size,dfs.datanode.max.locked.memory,dfs.client.read.prefetch.size > default => dfs.datanode.max.locked.memory > default,control
72,dfs.webhdfs.use.ipc.callq,dfs.webhdfs.ipc.server.handler.count,dfs.webhdfs.use.ipc.callq = true => dfs.webhdfs.ipc.server.handler.count > 1,control
73,dfs.ha.fencing.methods,dfs.nameservices,dfs.ha.fencing.methods != null => dfs.nameservices != null,control
74,dfs.ha.fencing.methods,dfs.ha.zkfc.port,dfs.ha.fencing.methods = ANY => dfs.ha.zkfc.port = 8019,control
75,dfs.journalnode.rpc-bind-host,dfs.journalnode.http-bind-host,dfs.journalnode.rpc-bind-host = ANY => dfs.journalnode.http-bind-host = ANY,control
76,dfs.ha.automatic-failover.enabled,dfs.namenode.rpc-address,dfs.ha.automatic-failover.enabled = true => dfs.namenode.rpc-address != null,control
77,dfs.ha.automatic-failover.enabled,dfs.namenode.shared.edits.dir,dfs.ha.automatic-failover.enabled = true => dfs.namenode.shared.edits.dir != null,control
78,dfs.balancer.getBlocks.min-block-size,dfs.replication,dfs.balancer.getBlocks.min-block-size != default => dfs.replication != default,control
79,dfs.encrypt.data.transfer,dfs.encrypt.data.transfer.cipher.key.bitlength,"dfs.encrypt.data.transfer = true => dfs.encrypt.data.transfer.cipher.key.bitlength in {128, 192, 256}",control
80,dfs.namenode.edits.dir.minimum,dfs.namenode.edits.dir,dfs.namenode.edits.dir != null => dfs.namenode.edits.dir.minimum = ANY,control
81,dfs.client.read.shortcircuit,dfs.datanode.shared.file.descriptor.paths,dfs.client.read.shortcircuit = true => dfs.datanode.shared.file.descriptor.paths != null,control
82,dfs.nameservices,dfs.ha.fencing.methods,dfs.nameservices != null => dfs.ha.fencing.methods = ANY,control
83,dfs.journalnode.rpc-bind-host,dfs.journalnode.https-bind-host,dfs.journalnode.rpc-bind-host = ANY => dfs.journalnode.https-bind-host = ANY,control
84,dfs.permissions.enabled,dfs.permissions.superusergroup,dfs.permissions.enabled = true => dfs.permissions.superusergroup != null,control
85,dfs.client.block.write.replace-datanode-on-failure.policy,dfs.client.block.write.replace-datanode-on-failure.min-replication,dfs.client.block.write.replace-datanode-on-failure.policy != null => dfs.client.block.write.replace-datanode-on-failure.min-replication = 0,control
86,dfs.namenode.checkpoint.edits.dir,dfs.namenode.checkpoint.txns,dfs.namenode.checkpoint.edits.dir != null => dfs.namenode.checkpoint.txns > 0,control
87,dfs.journalnode.kerberos.principal,dfs.journalnode.keytab.file,dfs.journalnode.kerberos.principal != null => dfs.journalnode.keytab.file != null,control
88,dfs.client.write.exclude.nodes.cache.expiry.interval.millis,dfs.client.write.exclude.nodes.cache.enable,dfs.client.write.exclude.nodes.cache.expiry.interval.millis > 0 => dfs.client.write.exclude.nodes.cache.enable = true,control
89,dfs.client.slow.io.warning.threshold.ms,dfs.client.slow.io.log.enabled,dfs.client.slow.io.warning.threshold.ms > 0 => dfs.client.slow.io.log.enabled = true,control
90,dfs.https.port,dfs.http.port,dfs.https.port != null => dfs.http.port != null,control
91,dfs.http.policy,dfs.datanode.https.address,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.datanode.https.address != ""null""",control
92,dfs.namenode.https-address,dfs.client.https.need-auth,dfs.client.https.need-auth = true => dfs.namenode.https-address != null,control
93,dfs.ha.standby.checkpoints,dfs.namenode.num.checkpoints.retained,dfs.ha.standby.checkpoints = true => dfs.namenode.num.checkpoints.retained > 1,control
94,dfs.nameservice.id,dfs.ha.namenode.id,dfs.nameservice.id = ANY => dfs.ha.namenode.id = ANY,control
95,dfs.namenode.resource.checked.volumes,dfs.namenode.resource.check.interval,dfs.namenode.resource.checked.volumes > 0 => dfs.namenode.resource.check.interval > 0,control
96,dfs.namenode.decommission.interval,dfs.namenode.decommission.max.concurrent.tracked.nodes,dfs.namenode.decommission.interval < 60 => dfs.namenode.decommission.max.concurrent.tracked.nodes < 100,control
97,dfs.encrypt.data.transfer,dfs.data.transfer.protection,"dfs.data.transfer.protection != ""null"" => dfs.encrypt.data.transfer = ""true""",control
98,dfs.ha.zkfc.nn.http.timeout.ms,dfs.ha.fencing.ssh.connect-timeout,dfs.ha.zkfc.nn.http.timeout.ms > 5000 => dfs.ha.fencing.ssh.connect-timeout > dfs.ha.zkfc.nn.http.timeout.ms,control
99,dfs.namenode.edits.dir.minimum,dfs.namenode.edits.dir.required,dfs.namenode.edits.dir.required = true => dfs.namenode.edits.dir.minimum = ANY,control
100,dfs.stream-buffer-size,dfs.datanode.max.transfer.threads,dfs.stream-buffer-size > 131072 => dfs.datanode.max.transfer.threads > 4096,control
101,dfs.client.short.circuit.replica.stale.threshold.ms,dfs.namenode.avoid.read.stale.datanode,dfs.namenode.avoid.read.stale.datanode = true => dfs.client.short.circuit.replica.stale.threshold.ms > 0,control
102,dfs.journalnode.http-bind-host,dfs.journalnode.https-bind-host,dfs.http.policy = HTTPS_ONLY => dfs.journalnode.http-bind-host = null,control
103,dfs.namenode.decommission.blocks.per.interval,dfs.namenode.decommission.interval,dfs.namenode.decommission.interval > 0 => dfs.namenode.decommission.blocks.per.interval > 0,control
104,dfs.web.authentication.kerberos.keytab,hadoop.security.authentication,dfs.web.authentication.kerberos.keytab != null => hadoop.security.authentication = 'kerberos',control
105,dfs.namenode.fs-limits.max-xattr-size,dfs.namenode.fs-limits.min-block-size,dfs.namenode.fs-limits.max-xattr-size != default => dfs.namenode.fs-limits.min-block-size != default,control
106,dfs.encrypt.data.transfer.cipher.suites,dfs.data.transfer.protection,"dfs.data.transfer.protection = ""privacy"" => dfs.encrypt.data.transfer.cipher.suites != null",control
107,dfs.webhdfs.acl.provider.permission.pattern,dfs.permissions.enabled,dfs.permissions.enabled = true => dfs.webhdfs.acl.provider.permission.pattern != null,control
108,dfs.namenode.avoid.write.stale.datanode,dfs.namenode.stale.datanode.interval,dfs.namenode.stale.datanode.interval > 0 => dfs.namenode.avoid.write.stale.datanode = true,control
109,dfs.webhdfs.use.ipc.callq,dfs.webhdfs.enabled,dfs.webhdfs.enabled = true => dfs.webhdfs.use.ipc.callq = ANY,control
110,dfs.namenode.checkpoint.edits.dir,dfs.namenode.checkpoint.txns,dfs.namenode.checkpoint.txns = ANY => dfs.namenode.checkpoint.edits.dir = ANY,control
111,dfs.client.short.circuit.replica.stale.threshold.ms,dfs.namenode.stale.datanode.interval,dfs.namenode.stale.datanode.interval > 0 => dfs.client.short.circuit.replica.stale.threshold.ms < dfs.namenode.stale.datanode.interval,control
112,dfs.namenode.decommission.interval,dfs.namenode.heartbeat.recheck-interval,dfs.namenode.decommission.interval > 0 => dfs.namenode.heartbeat.recheck-interval > 0,control
113,dfs.datanode.directoryscan.interval,dfs.blockreport.intervalMsec,dfs.datanode.directoryscan.interval > 0 => dfs.blockreport.intervalMsec > dfs.datanode.directoryscan.interval,control
114,dfs.client.domain.socket.data.traffic,dfs.domain.socket.path,dfs.domain.socket.path != null => dfs.client.domain.socket.data.traffic = true,control
115,dfs.nameservice.id,dfs.ha.namenodes.EXAMPLENAMESERVICE,dfs.nameservice.id = ANY => dfs.ha.namenodes.EXAMPLENAMESERVICE = ANY,control
116,dfs.datanode.kerberos.principal,dfs.http.policy,dfs.http.policy = HTTPS => dfs.datanode.kerberos.principal != null,control
117,dfs.client.mmap.enabled,dfs.namenode.max.full.block.report.threads,dfs.client.mmap.enabled = true => dfs.namenode.max.full.block.report.threads < (system_memory * 0.1 / thread_stack_size),control
118,dfs.namenode.checkpoint.max-retries,dfs.namenode.checkpoint.check.period,dfs.namenode.checkpoint.max-retries > 0 => dfs.namenode.checkpoint.check.period > 0,control
119,dfs.webhdfs.rest-csrf.enabled,dfs.http.policy,dfs.http.policy = HTTPS_ONLY => dfs.webhdfs.rest-csrf.enabled = ANY,control
120,dfs.namenode.edits.journal-plugin.qjournal,dfs.namenode.shared.edits.dir,dfs.namenode.edits.journal-plugin.qjournal != null => dfs.namenode.shared.edits.dir in {{ qjournal://node1:port1;node2:port2;node3:port3/journalId }},control
121,dfs.client.block.write.locateFollowingBlock.initial.delay.ms,dfs.blocksize,dfs.blocksize > 134217728 => dfs.client.block.write.locateFollowingBlock.initial.delay.ms > 1000,control
122,dfs.encrypt.data.transfer,dfs.trustedchannel.resolver.class,dfs.encrypt.data.transfer = true => dfs.trustedchannel.resolver.class != null,control
123,dfs.namenode.write.stale.datanode.ratio,dfs.namenode.avoid.write.stale.datanode,dfs.namenode.write.stale.datanode.ratio > 0.5f => dfs.namenode.avoid.write.stale.datanode is valid and non-null,control
124,dfs.namenode.avoid.read.stale.datanode,dfs.namenode.write.stale.datanode.ratio,dfs.namenode.write.stale.datanode.ratio > 0 => dfs.namenode.avoid.read.stale.datanode = true,control
125,dfs.datanode.ipc.address,dfs.http.policy,dfs.http.policy = HTTPS => dfs.datanode.ipc.address = dfs.datanode.https.address,control
126,dfs.qjournal.get-journal-state.timeout.ms,ipc.server.read.threadpool.size,dfs.qjournal.get-journal-state.timeout.ms < 30000 => ipc.server.read.threadpool.size > 10,control
127,dfs.client.read.shortcircuit,dfs.block.local-path-access.user,dfs.client.read.shortcircuit = true => dfs.block.local-path-access.user != null,control
128,dfs.use.dfs.network.topology,dfs.namenode.reject-unresolved-dn-topology-mapping,dfs.use.dfs.network.topology = true => dfs.namenode.reject-unresolved-dn-topology-mapping = true,control
129,dfs.balancer.keytab.enabled,dfs.balancer.kerberos.principal,dfs.balancer.keytab.enabled = true => dfs.balancer.kerberos.principal != null,control
130,dfs.qjournal.queued-edits.limit.mb,dfs.namenode.num.extra.edits.retained,dfs.qjournal.queued-edits.limit.mb > 100 => dfs.namenode.num.extra.edits.retained > 1000,control
131,dfs.namenode.name.cache.threshold,dfs.namenode.max.objects,dfs.namenode.name.cache.threshold > 0 => dfs.namenode.max.objects > dfs.namenode.name.cache.threshold,control
132,dfs.webhdfs.ugi.expire.after.access,hadoop.security.authentication,hadoop.security.authentication = 'kerberos' => dfs.webhdfs.ugi.expire.after.access != null,control
133,dfs.namenode.block-placement-policy.default.prefer-local-node,dfs.namenode.plugins,dfs.namenode.block-placement-policy.default.prefer-local-node = true => dfs.namenode.plugins != null,control
134,dfs.datanode.sync.behind.writes.in.background,dfs.datanode.max.transfer.threads,dfs.datanode.sync.behind.writes.in.background = true => dfs.datanode.max.transfer.threads > 4096,control
135,dfs.namenode.rpc-address,dfs.namenode.rpc-bind-host,dfs.namenode.rpc-bind-host != null => dfs.namenode.rpc-address = dfs.namenode.rpc-bind-host:<port>,control
136,dfs.journalnode.keytab.file,dfs.https.enable,dfs.journalnode.keytab.file != null => dfs.https.enable = true,control
137,dfs.datanode.keytab.file,dfs.data.transfer.protection,"dfs.data.transfer.protection = ""privacy"" => dfs.datanode.keytab.file != null",control
138,dfs.ha.automatic-failover.enabled,dfs.client.failover.proxy.provider,dfs.ha.automatic-failover.enabled = true => dfs.client.failover.proxy.provider != null,control
139,dfs.balancer.getBlocks.size,dfs.balancer.max-size-to-move,dfs.balancer.getBlocks.size > 0 => dfs.balancer.max-size-to-move > 0,control
140,dfs.journalnode.kerberos.principal,hadoop.security.authentication,dfs.journalnode.kerberos.principal != null => hadoop.security.authentication = 'kerberos',control
141,dfs.namenode.servicerpc-address,dfs.namenode.service.handler.count,dfs.namenode.servicerpc-address != null => dfs.namenode.service.handler.count = 10,control
142,dfs.namenode.checkpoint.edits.dir,dfs.namenode.checkpoint.period,dfs.namenode.checkpoint.edits.dir != null => dfs.namenode.checkpoint.period > 0,control
143,dfs.client.failover.proxy.provider,dfs.ha.namenodes.[nameservice ID],dfs.client.failover.proxy.provider != null => dfs.ha.namenodes.[nameservice ID] != null,control
144,dfs.balancer.block-move.timeout,dfs.balancer.dispatcherThreads,dfs.balancer.dispatcherThreads > 0 => dfs.balancer.block-move.timeout = ANY,control
145,dfs.ha.fencing.methods,dfs.ha.standby.checkpoints,dfs.ha.fencing.methods = ANY => dfs.ha.standby.checkpoints = true,control
146,dfs.web.authentication.filter,dfs.web.authentication.simple.anonymous.allowed,"dfs.web.authentication.filter = ""Simple"" => dfs.web.authentication.simple.anonymous.allowed = ANY",control
147,dfs.balancer.max-size-to-move,dfs.datanode.balance.bandwidthPerSec,dfs.balancer.max-size-to-move > ANY => dfs.datanode.balance.bandwidthPerSec > ANY,control
148,dfs.journalnode.http-bind-host,dfs.http.policy,dfs.http.policy = HTTPS_ONLY => dfs.journalnode.http-bind-host = null,control
149,dfs.replication,dfs.namenode.replication.min,dfs.replication >= dfs.namenode.replication.min,control
150,dfs.nameservices,dfs.namenode.rpc-address.[nameservice ID].[namenode ID],dfs.nameservices != null => dfs.namenode.rpc-address.[nameservice ID].[namenode ID] != null,control
151,dfs.web.authentication.kerberos.principal,dfs.web.authentication.filter,"dfs.web.authentication.filter = ""org.apache.hadoop.security.authentication.server.KerberosAuthenticationFilter"" => dfs.web.authentication.kerberos.principal != null",control
152,dfs.client.block.write.retries,dfs.replication.max,dfs.client.block.write.retries > 1 => dfs.replication.max > dfs.client.block.write.retries,control
153,dfs.client.local.interfaces,dfs.datanode.max.transfer.threads,dfs.client.local.interfaces != null => dfs.datanode.max.transfer.threads > 0,control
154,dfs.block.misreplication.processing.limit,dfs.namenode.replication.work.multiplier.per.iteration,dfs.block.misreplication.processing.limit > 100 => dfs.namenode.replication.work.multiplier.per.iteration > 2,control
155,dfs.client.hedged.read.threadpool.size,dfs.client.hedged.read.pool.size,dfs.client.hedged.read.threadpool.size = X => dfs.client.hedged.read.pool.size = X,control
156,dfs.namenode.maintenance.replication.min,dfs.replication.max,dfs.namenode.maintenance.replication.min > 1 => dfs.replication.max >= dfs.namenode.maintenance.replication.min,control
157,dfs.client.server-defaults.validity.period.ms,dfs.heartbeat.interval,dfs.client.server-defaults.validity.period.ms < dfs.heartbeat.interval * 2 => dfs.heartbeat.interval = dfs.client.server-defaults.validity.period.ms / 2,control
158,dfs.client.retry.interval-ms.get-last-block-length,dfs.client.retry.policy.enabled,dfs.client.retry.policy.enabled = true => dfs.client.retry.interval-ms.get-last-block-length = ANY,control
159,dfs.namenode.checkpoint.check.period,dfs.namenode.checkpoint.txns,dfs.namenode.checkpoint.check.period > 0 => dfs.namenode.checkpoint.txns > 0,control
160,dfs.namenode.secondary.http-address,dfs.namenode.secondary.checkpoint.period,dfs.namenode.secondary.http-address in {{active_hosts}} => dfs.namenode.secondary.checkpoint.period > 0,control
161,dfs.journalnode.edits.dir,dfs.journalnode.kerberos.internal.spnego.principal,dfs.journalnode.edits.dir != null => dfs.journalnode.kerberos.internal.spnego.principal != null,control
162,dfs.namenode.path.based.cache.block.map.allocation.percent,dfs.namenode.path.based.cache.refresh.interval.ms,dfs.namenode.path.based.cache.block.map.allocation.percent > 0 => dfs.namenode.path.based.cache.refresh.interval.ms > 0,control
163,dfs.namenode.replication.pending.timeout-sec,dfs.heartbeat.interval,dfs.heartbeat.interval < dfs.namenode.replication.pending.timeout-sec => dfs.namenode.replication.pending.timeout-sec > dfs.heartbeat.interval,control
164,dfs.balancer.block-move.timeout,dfs.balancer.max-no-move-interval,dfs.balancer.max-no-move-interval > 0 => dfs.balancer.block-move.timeout = ANY,control
165,dfs.datanode.kerberos.principal,dfs.encrypt.data.transfer,dfs.encrypt.data.transfer = true => dfs.datanode.kerberos.principal != null,control
166,dfs.namenode.stale.datanode.minimum.interval,dfs.namenode.replication.interval,dfs.namenode.stale.datanode.minimum.interval > Y => dfs.namenode.replication.interval > Y,control
167,dfs.namenode.checkpoint.dir,dfs.namenode.checkpoint.period,dfs.namenode.checkpoint.dir != null => dfs.namenode.checkpoint.period > 0,control
168,dfs.http.policy,dfs.client.https.need-auth,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.client.https.need-auth = ""true""",control
169,dfs.hosts,dfs.namenode.handler.count,"<Dependency> ::= <Variable> in {{host1, host2, ...}} => <ConstraintItem> > 30",control
170,dfs.journalnode.http-address,dfs.http.policy,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.journalnode.http-address = null",control
171,dfs.namenode.handler.count,dfs.namenode.service.handler.count,dfs.namenode.handler.count > {{X}} => dfs.namenode.service.handler.count > {{X}},control
172,dfs.namenode.checkpoint.check.period,dfs.namenode.checkpoint.period,dfs.namenode.checkpoint.period > 0 => dfs.namenode.checkpoint.check.period = (dfs.namenode.checkpoint.period / 2),control
173,dfs.blockreport.split.threshold,dfs.blockreport.initialDelay,dfs.blockreport.split.threshold > 1000 => dfs.blockreport.initialDelay < 30,control
174,dfs.namenode.top.window.num.buckets,dfs.namenode.top.enabled,dfs.namenode.top.enabled = true => dfs.namenode.top.window.num.buckets != null,control
175,dfs.web.authentication.kerberos.keytab,dfs.client.https.need-auth,dfs.client.https.need-auth = true => dfs.web.authentication.kerberos.keytab != null,control
176,dfs.balancer.dispatcherThreads,dfs.balancer.movedThreads,dfs.balancer.dispatcherThreads > 1 => dfs.balancer.movedThreads > 1,control
177,dfs.ha.automatic-failover.enabled,dfs.journalnode.edits.dir,dfs.ha.automatic-failover.enabled = true => dfs.journalnode.edits.dir != null,control
178,dfs.namenode.checkpoint.edits.dir,dfs.namenode.checkpoint.check.period,dfs.namenode.checkpoint.check.period = ANY => dfs.namenode.checkpoint.edits.dir = ANY,control
179,dfs.namenode.name.dir,dfs.namenode.edits.dir,dfs.namenode.edits.dir = ANY => dfs.namenode.name.dir = ANY,control
180,dfs.client.retry.policy.enabled,dfs.http.client.retry.policy.spec,dfs.client.retry.policy.enabled = true => dfs.http.client.retry.policy.spec != null,control
181,dfs.mover.retry.max.attempts,dfs.datanode.max.transfer.threads,dfs.mover.retry.max.attempts > 5 => dfs.datanode.max.transfer.threads > 4096,control
182,dfs.datanode.sync.behind.writes,dfs.datanode.sync.behind.writes.in.background,dfs.datanode.sync.behind.writes = true => dfs.datanode.sync.behind.writes.in.background is valid and non-null,control
183,dfs.namenode.lock.detailed-metrics.enabled,dfs.namenode.lock.metrics.log.interval,dfs.namenode.lock.detailed-metrics.enabled = true => dfs.namenode.lock.metrics.log.interval > 0,control
184,dfs.secondary.namenode.kerberos.internal.spnego.principal,dfs.http.policy,dfs.http.policy = HTTPS => dfs.secondary.namenode.kerberos.internal.spnego.principal != null,control
185,dfs.mover.moverThreads,dfs.datanode.max.transfer.threads,dfs.mover.moverThreads > 10 => dfs.datanode.max.transfer.threads > dfs.mover.moverThreads * 2,control
186,dfs.webhdfs.enabled,dfs.web.authentication.kerberos.principal,dfs.web.authentication.kerberos.principal = null => dfs.webhdfs.enabled = false,control
187,dfs.webhdfs.rest-csrf.methods-to-ignore,dfs.webhdfs.rest-csrf.enabled,dfs.webhdfs.rest-csrf.enabled = true => dfs.webhdfs.rest-csrf.methods-to-ignore != null,control
188,dfs.namenode.stale.datanode.interval,dfs.heartbeat.interval,dfs.namenode.stale.datanode.interval > 0 => dfs.heartbeat.interval < dfs.namenode.stale.datanode.interval,control
189,dfs.journalnode.https-bind-host,dfs.http.policy,"dfs.journalnode.https-bind-host != null => dfs.http.policy in {{HTTPS_ONLY, HTTP_AND_HTTPS}}",control
190,dfs.https.port,dfs.http.policy,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.https.port != null",control
191,dfs.namenode.safemode.replication.min,dfs.namenode.safemode.threshold-pct,dfs.namenode.safemode.threshold-pct = ANY => dfs.namenode.safemode.replication.min = ANY,control
192,dfs.client.mmap.cache.size,dfs.datanode.max.locked.memory,dfs.client.mmap.cache.size > default => dfs.datanode.max.locked.memory > default,control
193,dfs.namenode.checkpoint.check.period,dfs.namenode.checkpoint.txns,dfs.namenode.checkpoint.txns > 0 => dfs.namenode.checkpoint.check.period = (dfs.namenode.checkpoint.txns / 1000),control
194,dfs.namenode.datanode.registration.ip-hostname-check,dfs.datanode.use.datanode.hostname,dfs.datanode.use.datanode.hostname = true => dfs.namenode.datanode.registration.ip-hostname-check = true,control
195,dfs.namenode.checkpoint.edits.dir,dfs.namenode.checkpoint.period,dfs.namenode.checkpoint.period = ANY => dfs.namenode.checkpoint.edits.dir = ANY,control
196,dfs.storage.policy.enabled,dfs.replication,dfs.storage.policy.enabled = true => dfs.replication > 0,control
197,dfs.client.domain.socket.data.traffic,dfs.client.use.legacy.blockreader.local,dfs.client.use.legacy.blockreader.local = false => dfs.client.domain.socket.data.traffic = true,control
198,dfs.datanode.directoryscan.interval,dfs.datanode.directoryscan.throttle.limit.ms.per.sec,dfs.datanode.directoryscan.interval > 0 => dfs.datanode.directoryscan.throttle.limit.ms.per.sec > 0,control
199,dfs.namenode.lease-recheck-interval-ms,dfs.namenode.lease-check-interval-ms,dfs.namenode.lease-recheck-interval-ms = dfs.namenode.lease-check-interval-ms,control
200,dfs.namenode.secondary.https-address,dfs.http.policy,dfs.http.policy = HTTPS_ONLY => dfs.namenode.secondary.https-address != null,control
201,dfs.secondary.namenode.keytab.file,hadoop.security.authentication,"dfs.secondary.namenode.keytab.file != null => hadoop.security.authentication = ""kerberos""",control
202,dfs.namenode.decommission.blocks.per.interval,dfs.namenode.decommission.max.concurrent.tracked.nodes,dfs.namenode.decommission.max.concurrent.tracked.nodes > 0 => dfs.namenode.decommission.blocks.per.interval > 0,control
203,dfs.permissions.enabled,dfs.cluster.administrators,dfs.permissions.enabled = true => dfs.cluster.administrators != null,control
204,dfs.webhdfs.rest-csrf.enabled,dfs.webhdfs.rest-csrf.custom-header,dfs.webhdfs.rest-csrf.enabled = true => dfs.webhdfs.rest-csrf.custom-header != null,control
205,dfs.secondary.namenode.keytab.file,dfs.http.policy,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.secondary.namenode.keytab.file != null",control
206,dfs.http.policy,dfs.https.server.keystore.resource,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.https.server.keystore.resource != ""null""",control
207,dfs.image.transfer.bandwidthPerSec,dfs.namenode.checkpoint.period,dfs.image.transfer.bandwidthPerSec > 0 => dfs.namenode.checkpoint.period > 0,control
208,dfs.webhdfs.enabled,dfs.client.https.need-auth,dfs.client.https.need-auth = true => dfs.webhdfs.enabled = false,control
209,dfs.datanode.directoryscan.throttle.limit.ms.per.sec,dfs.datanode.max.transfer.threads,dfs.datanode.directoryscan.throttle.limit.ms.per.sec < 500 => dfs.datanode.max.transfer.threads in {{4096..8192}},control
210,dfs.namenode.avoid.write.stale.datanode,dfs.namenode.write.stale.datanode.ratio,dfs.namenode.write.stale.datanode.ratio > 0 => dfs.namenode.avoid.write.stale.datanode = true,control
211,dfs.balancer.movedWinWidth,dfs.balancer.max-size-to-move,dfs.balancer.movedWinWidth > 0 => dfs.balancer.max-size-to-move > 0,control
212,dfs.encrypt.data.transfer.cipher.key.bitlength,dfs.encrypt.data.transfer,"dfs.encrypt.data.transfer = true => dfs.encrypt.data.transfer.cipher.key.bitlength in {{128, 192, 256}}",control
213,dfs.block.replicator.classname,dfs.replication,dfs.block.replicator.classname != null => dfs.replication > 1,control
214,dfs.namenode.lifeline.rpc-bind-host,dfs.ha.automatic-failover.enabled,dfs.namenode.lifeline.rpc-bind-host != null AND dfs.ha.automatic-failover.enabled = true => dfs.namenode.lifeline.rpc-bind-host != null,control
215,dfs.https.server.keystore.resource,dfs.https.server.ssl.enabled.protocols,"dfs.https.server.keystore.resource != null => dfs.https.server.ssl.enabled.protocols in {{""TLSv1.2"", ""TLSv1.3""}}",control
216,dfs.client.read.short.circuit.replica.stale.threshold.ms,dfs.domain.socket.path,dfs.domain.socket.path != null => dfs.client.read.short.circuit.replica.stale.threshold.ms in [0..ANY],control
217,dfs.client.write.byte-array-manager.count-reset-time-period-ms,dfs.client.write.byte-array-manager.enabled,dfs.client.write.byte-array-manager.enabled = true => dfs.client.write.byte-array-manager.count-reset-time-period-ms > 0,control
218,dfs.encrypt.data.transfer.cipher.suites,dfs.encrypt.data.transfer,dfs.encrypt.data.transfer = true => dfs.encrypt.data.transfer.cipher.suites != null,control
219,dfs.http.policy,dfs.web.authentication.kerberos.keytab,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.web.authentication.kerberos.keytab != ""null""",control
220,dfs.client.write.byte-array-manager.enabled,dfs.client.write.max-packet-size,dfs.client.write.byte-array-manager.enabled = true => dfs.client.write.max-packet-size > dfs.client.write.packet.size,control
221,dfs.webhdfs.oauth2.client.id,dfs.webhdfs.oauth2.enabled,dfs.webhdfs.oauth2.enabled = true => dfs.webhdfs.oauth2.client.id != null,control
222,dfs.http.port,dfs.datanode.http.port,dfs.http.port != dfs.datanode.http.port,control
223,dfs.http.policy,dfs.data.transfer.protection,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.data.transfer.protection = ""privacy""",control
224,dfs.client.block.write.replace-datanode-on-failure.enable,dfs.replication,dfs.client.block.write.replace-datanode-on-failure.enable = true => dfs.replication > 1,control
225,dfs.namenode.http-address,dfs.namenode.https-address,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.namenode.http-address = null",control
226,dfs.nameservices,dfs.ha.standby.checkpoints,dfs.nameservices != null => dfs.ha.standby.checkpoints = ANY,control
227,dfs.datanode.disk.check.timeout,dfs.datanode.max.transfer.threads,dfs.datanode.disk.check.timeout > default => dfs.datanode.max.transfer.threads > default,control
228,dfs.secondary.namenode.kerberos.principal,hadoop.security.authentication,"dfs.secondary.namenode.kerberos.principal != null => hadoop.security.authentication = ""kerberos""",control
229,dfs.namenode.https-address,dfs.http.policy,"dfs.namenode.https-address != null => dfs.http.policy = ""HTTPS_ONLY""",control
230,dfs.client.read.shortcircuit.buffer.size,dfs.domain.socket.path,dfs.domain.socket.path != null => dfs.client.read.shortcircuit.buffer.size > 0,control
231,dfs.http.policy,dfs.client.https.need-auth,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.client.https.need-auth != null",control
232,dfs.balancer.keytab.enabled,dfs.balancer.keytab.file,dfs.balancer.keytab.enabled = true => dfs.balancer.keytab.file != null,control
233,dfs.datanode.handler.count,dfs.datanode.max.transfer.threads,dfs.datanode.handler.count > default => dfs.datanode.max.transfer.threads > default,control
234,dfs.client.write.byte-array-manager.count-reset-time-period-ms,dfs.client.write.packet.size,dfs.client.write.packet.size > default => dfs.client.write.byte-array-manager.count-reset-time-period-ms < [default..default/2],control
235,dfs.namenode.lifeline.handler.count,dfs.namenode.handler.count,dfs.namenode.lifeline.handler.count > 0 => dfs.namenode.handler.count > dfs.namenode.lifeline.handler.count,control
236,dfs.webhdfs.enabled,dfs.client.https.keystore.resource,dfs.client.https.keystore.resource = null => dfs.webhdfs.enabled = false,control
237,dfs.datanode.socket.reuse.keepalive,dfs.datanode.max.transfer.threads,dfs.datanode.socket.reuse.keepalive = true => dfs.datanode.max.transfer.threads > {{default}},control
238,dfs.replication,dfs.namenode.replication.considerLoad.factor,dfs.namenode.replication.considerLoad = true => dfs.replication = dfs.replication * dfs.namenode.replication.considerLoad.factor,control
239,dfs.namenode.checkpoint.edits.dir,dfs.namenode.checkpoint.max-retries,dfs.namenode.checkpoint.max-retries = ANY => dfs.namenode.checkpoint.edits.dir = ANY,control
240,dfs.namenode.fs-limits.max-xattrs-per-inode,dfs.namenode.fs-limits.max-xattrs,dfs.namenode.fs-limits.max-xattrs-per-inode > 0 => dfs.namenode.fs-limits.max-xattrs > dfs.namenode.fs-limits.max-xattrs-per-inode,control
241,dfs.namenode.list.cache.pools.num.responses,dfs.namenode.cache.pools.max,dfs.namenode.list.cache.pools.num.responses > 0 => dfs.namenode.cache.pools.max >= dfs.namenode.list.cache.pools.num.responses,control
242,dfs.permissions.superusergroup,dfs.cluster.administrators,dfs.permissions.superusergroup = ANY => dfs.cluster.administrators = ANY,control
243,dfs.image.compression.codec,dfs.image.compression.level,dfs.image.compression.codec = ANY => dfs.image.compression.level in [ 1..9 ],control
244,dfs.datanode.du.reserved,dfs.datanode.du.reserved.percentage,dfs.datanode.du.reserved > 0 => dfs.datanode.du.reserved.percentage < 100,control
245,dfs.namenode.edits.dir.minimum,dfs.namenode.edits.journal-plugin.qjournal,dfs.namenode.edits.journal-plugin.qjournal != null => dfs.namenode.edits.dir.minimum = ANY,control
246,dfs.qjournal.finalize-segment.timeout.ms,dfs.qjournal.max-txns-per-segment,dfs.qjournal.finalize-segment.timeout.ms > 60000 => dfs.qjournal.max-txns-per-segment < 1000,control
247,dfs.namenode.kerberos.principal,hadoop.security.authentication,dfs.namenode.kerberos.principal != null => hadoop.security.authentication = 'kerberos',control
248,dfs.permissions.enabled,dfs.permissions.superusergroup,dfs.permissions.enabled = true => dfs.permissions.superusergroup != null,control
249,dfs.namenode.avoid.read.stale.datanode,dfs.namenode.stale.datanode.interval,dfs.namenode.stale.datanode.interval > 0 => dfs.namenode.avoid.read.stale.datanode = true,control
250,dfs.nameservices,dfs.ha.namenodes.[nameservice ID],dfs.nameservices != null => dfs.ha.namenodes.[nameservice ID] != null,control
251,dfs.namenode.fs-limits.min-block-size,dfs.blocksize,dfs.namenode.fs-limits.min-block-size < dfs.blocksize,control
252,dfs.nameservices,dfs.nameservice.id,dfs.nameservices = null => dfs.nameservice.id = ANY,default
253,dfs.http.client.retry.policy.enabled,dfs.http.client.failover.max.attempts,dfs.http.client.retry.policy.enabled = true => dfs.http.client.failover.max.attempts > 0,default
254,dfs.http.client.retry.policy.enabled,dfs.http.client.retry.max.attempts,dfs.http.client.retry.policy.enabled = true => dfs.http.client.retry.max.attempts > 0,default
255,dfs.client.socketcache.capacity,dfs.client.socketcache.expiryMsec,dfs.client.socketcache.expiryMsec = ANY => dfs.client.socketcache.capacity = ANY,default
256,dfs.webhdfs.oauth2.enabled,dfs.webhdfs.oauth2.refresh.url,dfs.webhdfs.oauth2.enabled = true => dfs.webhdfs.oauth2.refresh.url != null,default
257,dfs.client.block.write.replace-datanode-on-failure.enable,dfs.client.block.write.replace-datanode-on-failure.policy,dfs.client.block.write.replace-datanode-on-failure.policy = ANY => dfs.client.block.write.replace-datanode-on-failure.enable = true,default
258,dfs.nameservices,dfs.internal.nameservices,dfs.nameservices = ANY => dfs.internal.nameservices = dfs.nameservices,default
259,dfs.web.authentication.kerberos.principal,dfs.web.authentication.kerberos.keytab,dfs.web.authentication.kerberos.keytab = null => dfs.web.authentication.kerberos.principal != null,default
260,dfs.client.failover.max.attempts,dfs.http.client.failover.sleep.max.millis,dfs.http.client.failover.sleep.max.millis = dfs.client.failover.sleep.max.millis,default
261,dfs.http.client.retry.max.attempts,dfs.client.retry.max.attempts,dfs.client.retry.max.attempts = null => dfs.http.client.retry.max.attempts = default,default
262,dfs.namenode.checkpoint.dir,dfs.namenode.checkpoint.edits.dir,dfs.namenode.checkpoint.dir = ANY => dfs.namenode.checkpoint.edits.dir = dfs.namenode.checkpoint.dir,default
263,dfs.namenode.name.dir,dfs.namenode.name.dir.restore,dfs.namenode.name.dir.restore = null => dfs.namenode.name.dir = ANY,default
264,dfs.encrypt.data.transfer,dfs.encrypt.data.transfer.cipher.suites,"dfs.encrypt.data.transfer = ""true"" => dfs.encrypt.data.transfer.cipher.suites != ""null""",default
265,dfs.datanode.du.reserved.pct,dfs.datanode.du.reserved.pct.ram_disk,dfs.datanode.du.reserved.pct.ram_disk = null => dfs.datanode.du.reserved.pct = dfs.datanode.du.reserved.pct.ram_disk,default
266,dfs.blocksize,dfs.client.read.prefetch.size,dfs.blocksize = ANY => dfs.client.read.prefetch.size = 10 * ${dfs.blocksize},default
267,dfs.datanode.du.reserved.calculator,dfs.datanode.du.reserved.pct,dfs.datanode.du.reserved.calculator = org.apache.hadoop.hdfs.server.datanode.fsdataset.impl.ReservedSpaceCalculator$ReservedSpaceCalculatorPercentage => dfs.datanode.du.reserved.pct = ANY,default
268,dfs.namenode.servicerpc-address,dfs.namenode.servicerpc-bind-host,dfs.namenode.servicerpc-bind-host = null => dfs.namenode.servicerpc-address = ANY,default
269,dfs.http.client.retry.policy.enabled,dfs.http.client.failover.sleep.base.millis,dfs.http.client.retry.policy.enabled = true => dfs.http.client.failover.sleep.base.millis > 0,default
270,dfs.journalnode.kerberos.internal.spnego.principal,dfs.journalnode.keytab.file,dfs.journalnode.keytab.file = ANY => dfs.journalnode.kerberos.internal.spnego.principal = ANY,default
271,dfs.image.compress,dfs.image.compression.codec,dfs.image.compress = true => dfs.image.compression.codec != null,default
272,dfs.namenode.rpc-address,dfs.namenode.servicerpc-address,dfs.namenode.servicerpc-address = null => dfs.namenode.servicerpc-address = dfs.namenode.rpc-address,default
273,dfs.namenode.checkpoint.dir,dfs.namenode.checkpoint.edits.dir,dfs.namenode.checkpoint.edits.dir = null => dfs.namenode.checkpoint.dir = ANY,default
274,dfs.client.short.circuit.replica.stale.threshold.ms,dfs.client.read.short.circuit.replica.stale.threshold.ms,dfs.client.read.short.circuit.replica.stale.threshold.ms = null => dfs.client.short.circuit.replica.stale.threshold.ms = dfs.client.read.short.circuit.replica.stale.threshold.ms,default
275,dfs.namenode.backup.dnrpc-address,dfs.namenode.rpc-address,dfs.namenode.backup.dnrpc-address = null => dfs.namenode.backup.dnrpc-address = dfs.namenode.rpc-address,default
276,dfs.http.client.retry.policy.spec,dfs.client.retry.policy.spec,"dfs.client.retry.policy.spec = null => dfs.http.client.retry.policy.spec = ""default""",default
277,dfs.namenode.rpc-bind-host,dfs.namenode.rpc-address,dfs.namenode.rpc-bind-host = null => dfs.namenode.rpc-address = dfs.namenode.rpc-address,default
278,dfs.journalnode.kerberos.principal,dfs.journalnode.kerberos.internal.spnego.principal,dfs.journalnode.kerberos.principal = ANY => dfs.journalnode.kerberos.internal.spnego.principal = dfs.journalnode.kerberos.principal,default
279,dfs.encrypt.data.transfer,dfs.encrypt.data.transfer.cipher.key.bitlength,"dfs.encrypt.data.transfer = ""true"" => dfs.encrypt.data.transfer.cipher.key.bitlength != ""null""",default
280,dfs.http.client.retry.policy.enabled,dfs.http.client.retry.policy.spec,dfs.http.client.retry.policy.enabled = true => dfs.http.client.retry.policy.spec != null,default
281,dfs.namenode.edits.journal-plugin.qjournal,dfs.namenode.edits.journal-plugin,"dfs.namenode.edits.journal-plugin = ""qjournal"" => dfs.namenode.edits.journal-plugin.qjournal = ""ANY""",default
282,dfs.http.client.retry.policy.enabled,dfs.http.client.failover.sleep.max.millis,dfs.http.client.retry.policy.enabled = true => dfs.http.client.failover.sleep.max.millis > dfs.http.client.failover.sleep.base.millis,default
283,dfs.namenode.rpc-address,dfs.namenode.servicerpc-bind-host,dfs.namenode.rpc-address = null => dfs.namenode.servicerpc-bind-host = dfs.namenode.rpc-address,default
284,dfs.block.access.key.update.interval,dfs.block.access.token.lifetime,dfs.block.access.key.update.interval = ANY => dfs.block.access.token.lifetime = dfs.block.access.key.update.interval,default
285,dfs.encrypt.data.transfer,dfs.data.transfer.protection,dfs.encrypt.data.transfer = true => dfs.data.transfer.protection = ANY,overwrite
286,dfs.client.retry.window.base,dfs.client.retry.interval-ms.get-last-block-length,dfs.client.retry.window.base = <Expression> => dfs.client.retry.interval-ms.get-last-block-length = <Expression>,value
287,dfs.namenode.resource.checked.volumes,dfs.namenode.resource.checked.volumes.minimum,dfs.namenode.resource.checked.volumes >= dfs.namenode.resource.checked.volumes.minimum,value
288,dfs.client.block.write.retries,dfs.client.block.write.locateFollowingBlock.retries,dfs.client.block.write.locateFollowingBlock.retries > 0 => dfs.client.block.write.retries > 0,value
289,dfs.datanode.du.reserved,dfs.datanode.du.reserved.pct,dfs.datanode.du.reserved.pct > 0 => dfs.datanode.du.reserved = dfs.datanode.du.reserved.pct * total_disk_space,value
290,dfs.journalnode.kerberos.principal,hadoop.security.auth_to_local,dfs.journalnode.kerberos.principal = <principal>@<REALM> => hadoop.security.auth_to_local contains 'RULE:[1:$1@$0](.*@<REALM>)s/@<REALM>//',value
291,dfs.namenode.rpc-bind-host,dfs.namenode.http-bind-host,dfs.namenode.rpc-bind-host != null => dfs.namenode.http-bind-host = <Expression>,value
292,dfs.client.write.byte-array-manager.count-limit,dfs.client.write.byte-array-manager.count-threshold,dfs.client.write.byte-array-manager.count-threshold > 0 => dfs.client.write.byte-array-manager.count-limit > dfs.client.write.byte-array-manager.count-threshold,value
293,dfs.datanode.max.transfer.threads,dfs.datanode.handler.count,dfs.datanode.handler.count = ANY => dfs.datanode.max.transfer.threads > dfs.datanode.handler.count,value
294,dfs.qjournal.accept-recovery.timeout.ms,dfs.qjournal.start-segment.timeout.ms,dfs.qjournal.start-segment.timeout.ms = dfs.qjournal.accept-recovery.timeout.ms,value
295,dfs.client.use.datanode.hostname,dfs.datanode.use.datanode.hostname,dfs.datanode.use.datanode.hostname = true => dfs.client.use.datanode.hostname = true,value
296,dfs.webhdfs.rest-csrf.enabled,dfs.webhdfs.rest-csrf.browser-useragents-regex,dfs.webhdfs.rest-csrf.enabled = true => dfs.webhdfs.rest-csrf.browser-useragents-regex != null,value
297,dfs.namenode.delegation.token.max-lifetime,dfs.namenode.delegation.token.renew-interval,dfs.namenode.delegation.token.renew-interval < dfs.namenode.delegation.token.max-lifetime,value
298,dfs.cachereport.intervalMsec,dfs.blockreport.incremental.intervalMsec,dfs.blockreport.incremental.intervalMsec = dfs.cachereport.intervalMsec,value
299,dfs.qjournal.get-journal-state.timeout.ms,dfs.qjournal.start-segment.timeout.ms,dfs.qjournal.start-segment.timeout.ms = dfs.qjournal.get-journal-state.timeout.ms,value
300,dfs.client.retry.window.base,dfs.client.retry.max.attempts,dfs.client.retry.window.base = <Expression> => dfs.client.retry.max.attempts = <Expression>,value
301,dfs.namenode.kerberos.internal.spnego.principal,dfs.web.authentication.kerberos.principal,dfs.web.authentication.kerberos.principal = dfs.namenode.kerberos.internal.spnego.principal,value
302,dfs.webhdfs.rest-csrf.enabled,dfs.webhdfs.rest-csrf.methods-to-ignore,"dfs.webhdfs.rest-csrf.enabled = true => dfs.webhdfs.rest-csrf.methods-to-ignore in {GET, HEAD, OPTIONS}",value
303,dfs.encrypt.data.transfer.algorithm,dfs.encrypt.data.transfer.cipher.suites,"dfs.encrypt.data.transfer.algorithm = ""AES/CTR/NoPadding"" => dfs.encrypt.data.transfer.cipher.suites in {""AES/CTR/NoPadding""}",value
304,dfs.replication,dfs.namenode.maintenance.replication.min,dfs.replication > dfs.namenode.maintenance.replication.min,value
305,dfs.namenode.decommission.blocks.per.interval,dfs.namenode.decommission.max.concurrent.tracked.nodes,dfs.namenode.decommission.max.concurrent.tracked.nodes > 0 => dfs.namenode.decommission.blocks.per.interval > 0,value
306,dfs.client.failover.max.attempts,dfs.client.failover.connection.retries.on.timeouts,dfs.client.failover.connection.retries.on.timeouts < dfs.client.failover.max.attempts,value
307,dfs.http.client.retry.policy.spec,dfs.http.client.failover.sleep.max.millis,"dfs.http.client.failover.sleep.max.millis > 0 => dfs.http.client.retry.policy.spec = ""maxSleepTime="" + dfs.http.client.failover.sleep.max.millis",value
308,dfs.checksum.type,dfs.bytes-per-checksum,dfs.bytes-per-checksum = dfs.checksum.type => dfs.bytes-per-checksum = ANY,value
309,dfs.balancer.movedWinWidth,dfs.balancer.moverThreads,dfs.balancer.moverThreads > 0 => dfs.balancer.movedWinWidth = ANY,value
310,dfs.qjm.operations.timeout,dfs.qjournal.write-txns.timeout.ms,dfs.qjm.operations.timeout = dfs.qjournal.write-txns.timeout.ms,value
311,dfs.qjournal.prepare-recovery.timeout.ms,dfs.qjournal.start-segment.timeout.ms,dfs.qjournal.start-segment.timeout.ms = dfs.qjournal.prepare-recovery.timeout.ms,value
312,dfs.namenode.replication.pending.timeout-sec,dfs.replication,dfs.replication > dfs.namenode.replication.min => dfs.namenode.replication.pending.timeout-sec = ANY,value
313,dfs.qjm.operations.timeout,dfs.qjournal.new-epoch.timeout.ms,dfs.qjm.operations.timeout = dfs.qjournal.new-epoch.timeout.ms,value
314,dfs.client.failover.max.attempts,dfs.client.failover.sleep.max.millis,dfs.client.failover.sleep.max.millis > dfs.client.failover.sleep.base.millis,value
315,dfs.namenode.rpc-bind-host,dfs.namenode.https-bind-host,dfs.namenode.rpc-bind-host != null => dfs.namenode.https-bind-host = <Expression>,value
316,dfs.namenode.service.handler.count,dfs.namenode.lifeline.handler.ratio,dfs.namenode.service.handler.count = dfs.namenode.handler.count * dfs.namenode.lifeline.handler.ratio,value
317,dfs.balancer.moverThreads,dfs.balancer.block-move.timeout,dfs.balancer.block-move.timeout = ANY => dfs.balancer.moverThreads = ANY,value
318,dfs.datanode.transfer.socket.send.buffer.size,dfs.datanode.transfer.socket.recv.buffer.size,dfs.datanode.transfer.socket.recv.buffer.size = dfs.datanode.transfer.socket.send.buffer.size,value
319,dfs.datanode.address,dfs.datanode.http.address,dfs.datanode.address = ANY => dfs.datanode.http.address = ANY,value
320,dfs.client.cache.drop.behind.writes,dfs.datanode.drop.cache.behind.reads,dfs.client.cache.drop.behind.writes = true => dfs.datanode.drop.cache.behind.reads = true,value
321,dfs.cachereport.intervalMsec,dfs.blockreport.intervalMsec,dfs.blockreport.intervalMsec = dfs.cachereport.intervalMsec,value
322,dfs.client.failover.random.order,dfs.client.failover.sleep.base.millis,dfs.client.failover.sleep.base.millis > 0 => dfs.client.failover.random.order = ANY,value
323,dfs.client.write.max-packets-in-flight,dfs.client.block.write.replace-datanode-on-failure.min-replication,dfs.client.block.write.replace-datanode-on-failure.min-replication > 1 => dfs.client.write.max-packets-in-flight < 100,value
324,dfs.balancer.max-no-move-interval,dfs.mover.max-no-move-interval,dfs.mover.max-no-move-interval > 0 => dfs.balancer.max-no-move-interval > 0,value
325,dfs.replication,dfs.namenode.maintenance.replication.min,dfs.replication > dfs.namenode.maintenance.replication.min,value
326,dfs.client.block.write.replace-datanode-on-failure.min-replication,dfs.replication,dfs.client.block.write.replace-datanode-on-failure.min-replication < dfs.replication,value
327,dfs.namenode.secondary.http-address,dfs.namenode.secondary.https-address,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.namenode.secondary.https-address != null",value
328,dfs.block.invalidate.limit,dfs.block.misreplication.processing.limit,dfs.block.misreplication.processing.limit > 0 => dfs.block.invalidate.limit < dfs.block.misreplication.processing.limit,value
329,dfs.namenode.handler.count,dfs.datanode.handler.count,dfs.datanode.handler.count = dfs.namenode.handler.count,value
330,dfs.namenode.delegation.key.update-interval,dfs.namenode.delegation.token.max-lifetime,dfs.namenode.delegation.token.max-lifetime > dfs.namenode.delegation.key.update-interval,value
331,dfs.qjournal.prepare-recovery.timeout.ms,dfs.qjournal.select-input-streams.timeout.ms,dfs.qjournal.select-input-streams.timeout.ms = dfs.qjournal.prepare-recovery.timeout.ms,value
332,dfs.namenode.secondary.https-address,dfs.namenode.https-address,dfs.namenode.https-address != null => dfs.namenode.secondary.https-address != null,value
333,dfs.namenode.http-address,dfs.client.use.datanode.hostname,dfs.client.use.datanode.hostname = true => dfs.namenode.http-address != ANY,value
334,dfs.client.read.shortcircuit,dfs.client.read.shortcircuit.skip.checksum,"dfs.client.read.shortcircuit = true => dfs.client.read.shortcircuit.skip.checksum in {true, false}",value
335,dfs.client.block.write.retries,dfs.client.retry.max.attempts,dfs.client.retry.max.attempts > 0 => dfs.client.block.write.retries > 0,value
336,dfs.namenode.rpc-bind-host,dfs.journalnode.rpc-bind-host,dfs.namenode.rpc-bind-host != null => dfs.journalnode.rpc-bind-host = <Expression>,value
337,dfs.heartbeat.interval,dfs.datanode.lifeline.interval.seconds,dfs.datanode.lifeline.interval.seconds = dfs.heartbeat.interval * 3,value
338,dfs.http.client.failover.max.attempts,dfs.http.client.failover.sleep.max.millis,dfs.http.client.failover.sleep.max.millis > dfs.http.client.failover.sleep.base.millis,value
339,dfs.heartbeat.interval,dfs.namenode.stale.datanode.minimum.interval,dfs.heartbeat.interval > 0 => dfs.namenode.stale.datanode.minimum.interval = 3,value
340,dfs.client.failover.random.order,dfs.client.failover.max.attempts,dfs.client.failover.max.attempts > 0 => dfs.client.failover.random.order = ANY,value
341,dfs.datanode.max.transfer.threads,dfs.datanode.balance.bandwidthPerSec,dfs.datanode.balance.bandwidthPerSec = ANY => dfs.datanode.max.transfer.threads > (dfs.datanode.balance.bandwidthPerSec / 1048576),value
342,dfs.namenode.replication.max-streams,dfs.namenode.replication.max-streams-hard-limit,dfs.namenode.replication.max-streams < dfs.namenode.replication.max-streams-hard-limit,value
343,dfs.balancer.address,dfs.balancer.dispatcherThreads,dfs.balancer.dispatcherThreads > 0 => dfs.balancer.address != null,value
344,dfs.datanode.ipc.address,dfs.datanode.http.address,dfs.datanode.ipc.address = dfs.datanode.http.address,value
345,dfs.datanode.fsdataset.volume.choosing.policy,dfs.datanode.available-space-volume-choosing-policy.balanced-space-preference-fraction,"dfs.datanode.fsdataset.volume.choosing.policy = ""AvailableSpaceVolumeChoosingPolicy"" => dfs.datanode.available-space-volume-choosing-policy.balanced-space-preference-fraction in [0.0..1.0]",value
346,dfs.namenode.safemode.threshold-pct,dfs.namenode.safemode.min.datanodes,dfs.namenode.safemode.threshold-pct > 0 => dfs.namenode.safemode.min.datanodes > 0,value
347,dfs.datanode.available-space-volume-choosing-policy.balanced-space-preference-fraction,dfs.datanode.available-space-volume-choosing-policy.balanced-space-threshold,dfs.datanode.available-space-volume-choosing-policy.balanced-space-threshold > 0 => dfs.datanode.available-space-volume-choosing-policy.balanced-space-preference-fraction = (0..1),value
348,dfs.mover.movedWinWidth,dfs.balancer.movedWinWidth,dfs.balancer.movedWinWidth = dfs.mover.movedWinWidth,value
349,dfs.namenode.delegation.token.always-use,dfs.namenode.delegation.key.update-interval,"dfs.namenode.delegation.key.update-interval > 0 => dfs.namenode.delegation.token.always-use in {true, false}",value
350,dfs.journalnode.kerberos.principal,dfs.journalnode.kerberos.realm,dfs.journalnode.kerberos.principal = <principal>@<realm> => dfs.journalnode.kerberos.realm = <realm>,value
351,dfs.datanode.du.reserved,dfs.namenode.resource.du.reserved,dfs.namenode.resource.du.reserved = dfs.datanode.du.reserved,value
352,dfs.webhdfs.rest-csrf.custom-header,dfs.webhdfs.rest-csrf.methods-to-ignore,"dfs.webhdfs.rest-csrf.custom-header != null => dfs.webhdfs.rest-csrf.methods-to-ignore in {GET, POST, PUT, DELETE}",value
353,dfs.qjournal.prepare-recovery.timeout.ms,dfs.qjournal.new-epoch.timeout.ms,dfs.qjournal.new-epoch.timeout.ms = dfs.qjournal.prepare-recovery.timeout.ms,value
354,dfs.https.port,dfs.namenode.https-address,"dfs.namenode.https-address = ""ANY"" => dfs.https.port = <Singlevalue>",value
355,dfs.client.retry.max.attempts,dfs.client.failover.max.attempts,dfs.client.failover.max.attempts > 0 => dfs.client.retry.max.attempts = (dfs.client.failover.max.attempts + 1),value
356,dfs.qjm.operations.timeout,dfs.qjournal.get-journal-state.timeout.ms,dfs.qjm.operations.timeout = dfs.qjournal.get-journal-state.timeout.ms,value
357,dfs.webhdfs.acl.provider.permission.pattern,dfs.webhdfs.user.provider.user.pattern,dfs.webhdfs.user.provider.user.pattern = ANY => dfs.webhdfs.acl.provider.permission.pattern = ANY,value
358,dfs.bytes-per-checksum,dfs.client-write-packet-size,dfs.bytes-per-checksum < dfs.client-write-packet-size,value
359,dfs.namenode.checkpoint.dir,dfs.namenode.num.checkpoints.retained,dfs.namenode.num.checkpoints.retained > 0 => dfs.namenode.checkpoint.dir != null,value
360,dfs.client.read.shortcircuit.skip.checksum,dfs.client.read.shortcircuit.streams.cache.expiry.ms,dfs.client.read.shortcircuit.streams.cache.expiry.ms > 0 => dfs.client.read.shortcircuit.skip.checksum = ANY,value
361,dfs.encrypt.data.transfer.cipher.key.bitlength,dfs.encrypt.data.transfer.cipher.suites,dfs.encrypt.data.transfer.cipher.suites != null => dfs.encrypt.data.transfer.cipher.key.bitlength != null,value
362,dfs.balancer.movedWinWidth,dfs.balancer.dispatcherThreads,dfs.balancer.dispatcherThreads > 0 => dfs.balancer.movedWinWidth = ANY,value
363,dfs.namenode.lifeline.handler.ratio,dfs.namenode.handler.count,dfs.namenode.lifeline.handler.ratio > 0 => dfs.namenode.handler.count = dfs.namenode.lifeline.handler.count / dfs.namenode.lifeline.handler.ratio,value
364,dfs.qjournal.accept-recovery.timeout.ms,dfs.qjournal.finalize-segment.timeout.ms,dfs.qjournal.finalize-segment.timeout.ms = dfs.qjournal.accept-recovery.timeout.ms,value
365,dfs.replication,dfs.namenode.replication.min,dfs.replication > dfs.namenode.replication.min,value
366,dfs.client.retry.interval-ms.get-last-block-length,dfs.client.retry.max.attempts,dfs.client.retry.max.attempts > 0 => dfs.client.retry.interval-ms.get-last-block-length = ANY,value
367,dfs.replication.max,dfs.namenode.replication.min,dfs.replication.max > dfs.namenode.replication.min => dfs.namenode.replication.min = [1 .. dfs.replication.max],value
368,dfs.client.read.short.circuit.replica.stale.threshold.ms,dfs.client.read.short.circuit.replica.stale.threshold.ms,dfs.client.read.short.circuit.replica.stale.threshold.ms = dfs.client.read.short.circuit.replica.stale.threshold.ms,value
369,dfs.client.read.shortcircuit,dfs.client.use.legacy.blockreader.local,"dfs.client.read.shortcircuit = true => dfs.client.use.legacy.blockreader.local in {true, false}",value
370,dfs.bytes-per-checksum,dfs.blocksize,dfs.bytes-per-checksum < dfs.blocksize,value
371,dfs.namenode.rpc-address,dfs.http.policy,dfs.http.policy = HTTPS => dfs.namenode.rpc-address != null,value
372,dfs.namenode.checkpoint.dir,dfs.namenode.checkpoint.txns,dfs.namenode.checkpoint.txns > 0 => dfs.namenode.checkpoint.dir != null,value
373,dfs.balancer.getBlocks.size,dfs.balancer.getBlocks.min-block-size,dfs.balancer.getBlocks.min-block-size < dfs.balancer.getBlocks.size,value
374,dfs.namenode.delegation.token.always-use,dfs.namenode.delegation.token.max-lifetime,"dfs.namenode.delegation.token.max-lifetime > 0 => dfs.namenode.delegation.token.always-use in {true, false}",value
375,dfs.data.transfer.protection,dfs.data.transfer.sasl.properties,"dfs.data.transfer.protection in {{integrity, privacy}} => dfs.data.transfer.sasl.properties in {{""QOP=auth-int"", ""QOP=auth-conf""}}",value
376,dfs.client.write.max-packets-in-flight,dfs.client.write.byte-array-manager.count-threshold,dfs.client.write.byte-array-manager.count-threshold > 0 => dfs.client.write.max-packets-in-flight < 1000,value
377,dfs.namenode.lifeline.handler.ratio,dfs.namenode.lifeline.handler.count,dfs.namenode.lifeline.handler.ratio > 0 => dfs.namenode.lifeline.handler.count = dfs.namenode.handler.count * dfs.namenode.lifeline.handler.ratio,value
378,dfs.qjournal.get-journal-state.timeout.ms,dfs.qjournal.select-input-streams.timeout.ms,dfs.qjournal.select-input-streams.timeout.ms = dfs.qjournal.get-journal-state.timeout.ms,value
379,dfs.webhdfs.oauth2.access.token.provider,dfs.webhdfs.oauth2.refresh.url,dfs.webhdfs.oauth2.refresh.url != null => dfs.webhdfs.oauth2.access.token.provider != null,value
380,dfs.namenode.max-num-blocks-to-log,dfs.namenode.max.op.size,dfs.namenode.max.op.size > dfs.namenode.max-num-blocks-to-log => dfs.namenode.max-num-blocks-to-log < dfs.namenode.max.op.size,value
381,dfs.namenode.replication.min,dfs.namenode.safemode.replication.min,dfs.namenode.replication.min < dfs.namenode.safemode.replication.min,value
382,dfs.client.read.shortcircuit.buffer.size,dfs.client.read.shortcircuit.streams.cache.size,dfs.client.read.shortcircuit.streams.cache.size > 256 => dfs.client.read.shortcircuit.buffer.size < 1048576,value
383,dfs.namenode.rpc-address,dfs.client.use.datanode.hostname,dfs.client.use.datanode.hostname = true => dfs.namenode.rpc-address != null,value
384,dfs.client.failover.proxy.provider,dfs.client.failover.sleep.base.millis,dfs.client.failover.sleep.base.millis > 0 => dfs.client.failover.proxy.provider = ANY,value
385,dfs.balancer.dispatcherThreads,dfs.datanode.balance.max.concurrent.moves,dfs.datanode.balance.max.concurrent.moves = dfs.balancer.dispatcherThreads,value
386,dfs.namenode.edits.journal-plugin.qjournal,dfs.qjournal.write-txns.timeout.ms,"dfs.qjournal.write-txns.timeout.ms > 0 => dfs.namenode.edits.journal-plugin.qjournal = ""ANY""",value
387,dfs.namenode.rpc-bind-host,dfs.namenode.servicerpc-bind-host,dfs.namenode.rpc-bind-host != null => dfs.namenode.servicerpc-bind-host = <Expression>,value
388,dfs.namenode.edits.dir,dfs.namenode.shared.edits.dir,dfs.namenode.shared.edits.dir = ANY => dfs.namenode.edits.dir = ANY,value
389,dfs.blockreport.intervalMsec,dfs.blockreport.incremental.intervalMsec,dfs.blockreport.incremental.intervalMsec > 0 => dfs.blockreport.intervalMsec > dfs.blockreport.incremental.intervalMsec,value
390,dfs.datanode.hostname,dfs.datanode.http.address,"dfs.datanode.hostname != null => dfs.datanode.http.address = {dfs.datanode.hostname + "":50075""}",value
391,dfs.qjournal.accept-recovery.timeout.ms,dfs.qjournal.get-journal-state.timeout.ms,dfs.qjournal.get-journal-state.timeout.ms = dfs.qjournal.accept-recovery.timeout.ms,value
392,dfs.namenode.http-address,dfs.datanode.use.datanode.hostname,dfs.datanode.use.datanode.hostname = true => dfs.namenode.http-address != ANY,value
393,dfs.http.port,datanode.https.port,dfs.http.port != datanode.https.port,value
394,dfs.https.server.keystore.resource,dfs.https.server.keystore.type,"dfs.https.server.keystore.resource != null => dfs.https.server.keystore.type in {{""JKS"", ""PKCS12""}}",value
395,dfs.data.transfer.protection,dfs.data.transfer.saslproperties.resolver.class,dfs.data.transfer.protection != null => dfs.data.transfer.saslproperties.resolver.class = ANY,value
396,dfs.secondary.namenode.kerberos.internal.spnego.principal,dfs.namenode.kerberos.internal.spnego.principal,dfs.secondary.namenode.kerberos.internal.spnego.principal = dfs.namenode.kerberos.internal.spnego.principal,value
397,dfs.qjournal.start-segment.timeout.ms,dfs.qjournal.select-input-streams.timeout.ms,dfs.qjournal.select-input-streams.timeout.ms = dfs.qjournal.start-segment.timeout.ms,value
398,dfs.datanode.ipc.address,dfs.datanode.https.address,dfs.datanode.ipc.address = dfs.datanode.https.address,value
399,dfs.datanode.hostname,dfs.datanode.https.address,"dfs.datanode.hostname != null => dfs.datanode.https.address = {dfs.datanode.hostname + "":50475""}",value
400,dfs.namenode.edits.dir.minimum,dfs.namenode.edits.dir,dfs.namenode.edits.dir.minimum = 1 => dfs.namenode.edits.dir in {valid_directories},value
401,dfs.datanode.du.reserved.calculator,dfs.datanode.du.reserved.pct,dfs.datanode.du.reserved.calculator = ANY => dfs.datanode.du.reserved.pct = ANY,value
402,dfs.client.block.write.replace-datanode-on-failure.min-replication,dfs.replication,dfs.replication > dfs.client.block.write.replace-datanode-on-failure.min-replication => dfs.client.block.write.replace-datanode-on-failure.min-replication < dfs.replication,value
403,dfs.namenode.retrycache.expirytime.millis,dfs.client.failover.sleep.base.millis,dfs.client.failover.sleep.base.millis < dfs.namenode.retrycache.expirytime.millis,value
404,dfs.client.domain.socket.data.traffic,dfs.client.read.shortcircuit.skip.checksum,dfs.client.read.shortcircuit.skip.checksum = true => dfs.client.domain.socket.data.traffic = true,value
405,dfs.domain.socket.path,hbase.dfs.client.read.shortcircuit.buffer.size,dfs.client.read.shortcircuit = true => dfs.domain.socket.path != null,value
406,dfs.namenode.kerberos.internal.spnego.principal,dfs.namenode.kerberos.principal,dfs.namenode.kerberos.principal = dfs.namenode.kerberos.internal.spnego.principal,value
407,dfs.namenode.checkpoint.dir,dfs.namenode.checkpoint.period,dfs.namenode.checkpoint.period > 0 => dfs.namenode.checkpoint.dir != null,value
408,dfs.namenode.handler.count,dfs.namenode.service.handler.count,dfs.namenode.service.handler.count = dfs.namenode.handler.count,value
409,dfs.client.slow.io.warning.threshold.ms,dfs.datanode.slow.io.warning.threshold.ms,dfs.datanode.slow.io.warning.threshold.ms = dfs.client.slow.io.warning.threshold.ms,value
410,dfs.client.write.byte-array-manager.count-limit,dfs.client.write.byte-array-manager.count-reset-time-period-ms,dfs.client.write.byte-array-manager.count-reset-time-period-ms > 0 => dfs.client.write.byte-array-manager.count-limit = ANY,value
411,dfs.xframe.enabled,dfs.xframe.value,"dfs.xframe.enabled = ""true"" => dfs.xframe.value != ""null""",value
412,dfs.balancer.moverThreads,dfs.balancer.getBlocks.min-block-size,dfs.balancer.getBlocks.min-block-size = ANY => dfs.balancer.moverThreads = ANY,value
413,dfs.nameservice.id,dfs.internal.nameservices,dfs.nameservice.id in {dfs.internal.nameservices} => dfs.nameservice.id = ANY,value
414,dfs.balancer.moverThreads,dfs.balancer.max-size-to-move,dfs.balancer.max-size-to-move = ANY => dfs.balancer.moverThreads = ANY,value
415,dfs.namenode.https-address,dfs.namenode.https-bind-host,"dfs.namenode.https-bind-host != null => dfs.namenode.https-address = dfs.namenode.https-bind-host + "":50470""",value
416,dfs.client.retry.window.base,dfs.client.failover.sleep.base.millis,dfs.client.retry.window.base = <Expression> => dfs.client.failover.sleep.base.millis = <Expression>,value
417,dfs.replication,dfs.replication.max,dfs.replication < dfs.replication.max,value
418,dfs.client.read.shortcircuit,dfs.client.read.shortcircuit.streams.cache.expiry.ms,dfs.client.read.shortcircuit = true => dfs.client.read.shortcircuit.streams.cache.expiry.ms > 0,value
419,dfs.http.port,dfs.https.port,dfs.http.port != dfs.https.port,value
420,dfs.bytes-per-checksum,dfs.stream-buffer-size,dfs.bytes-per-checksum < dfs.stream-buffer-size,value
421,dfs.encrypt.data.transfer.algorithm,dfs.encrypt.data.transfer.cipher.key.bitlength,"dfs.encrypt.data.transfer.algorithm = ""AES/CTR/NoPadding"" => dfs.encrypt.data.transfer.cipher.key.bitlength in {128, 192, 256}",value
422,dfs.namenode.top.window.num.buckets,dfs.namenode.top.num.users,dfs.namenode.top.num.users > 0 => dfs.namenode.top.window.num.buckets > 0,value
423,dfs.namenode.lease-recheck-interval-ms,dfs.namenode.heartbeat.recheck-interval,dfs.namenode.heartbeat.recheck-interval > 0 => dfs.namenode.lease-recheck-interval-ms = dfs.namenode.heartbeat.recheck-interval * 1000,value
424,dfs.image.transfer-bootstrap-standby.bandwidthPerSec,dfs.datanode.balance.bandwidthPerSec,dfs.datanode.balance.bandwidthPerSec = dfs.image.transfer-bootstrap-standby.bandwidthPerSec,value
425,dfs.replication.max,dfs.namenode.safemode.replication.min,dfs.replication.max > dfs.namenode.safemode.replication.min => dfs.namenode.safemode.replication.min = [1 .. dfs.replication.max],value
426,dfs.namenode.service.handler.count,dfs.namenode.lifeline.handler.count,dfs.namenode.service.handler.count = dfs.namenode.lifeline.handler.count + dfs.namenode.handler.count,value
427,dfs.blockreport.intervalMsec,dfs.heartbeat.interval,dfs.heartbeat.interval > 0 => dfs.blockreport.intervalMsec = dfs.heartbeat.interval * 3,value
428,dfs.qjournal.start-segment.timeout.ms,dfs.qjournal.finalize-segment.timeout.ms,dfs.qjournal.finalize-segment.timeout.ms = dfs.qjournal.start-segment.timeout.ms,value
429,dfs.balancer.address,dfs.balancer.moverThreads,dfs.balancer.moverThreads > 0 => dfs.balancer.address != null,value
430,dfs.client.failover.sleep.base.millis,dfs.client.failover.sleep.max.millis,dfs.client.failover.sleep.base.millis < dfs.client.failover.sleep.max.millis,value
431,dfs.internal.nameservices,dfs.ha.namenodes.EXAMPLENAMESERVICE,dfs.internal.nameservices in {dfs.ha.namenodes.EXAMPLENAMESERVICE},value
432,dfs.ha.fencing.methods,dfs.namenode.handler.count,"dfs.namenode.handler.count > 10 => dfs.ha.fencing.methods in {""shell(/path/to/script)"", ""sshfence""}",value
433,dfs.balancer.block-move.timeout,dfs.balancer.max-size-to-move,dfs.balancer.max-size-to-move > 0 => dfs.balancer.block-move.timeout = ANY,value
434,dfs.namenode.servicerpc-bind-host,dfs.namenode.https-bind-host,dfs.namenode.https-bind-host = ANY => dfs.namenode.servicerpc-bind-host = ANY,value
435,dfs.qjournal.accept-recovery.timeout.ms,dfs.qjournal.new-epoch.timeout.ms,dfs.qjournal.new-epoch.timeout.ms = dfs.qjournal.accept-recovery.timeout.ms,value
436,dfs.client.retry.window.base,dfs.client.retry.times.get-last-block-length,dfs.client.retry.window.base = <Expression> => dfs.client.retry.times.get-last-block-length = <Expression>,value
437,dfs.namenode.stale.datanode.interval,dfs.namenode.heartbeat.recheck-interval,dfs.namenode.heartbeat.recheck-interval > 0 => dfs.namenode.stale.datanode.interval > dfs.namenode.heartbeat.recheck-interval,value
438,dfs.web.authentication.filter,dfs.http.policy,"dfs.web.authentication.filter != null => dfs.http.policy in {""HTTP_ONLY"", ""HTTPS_ONLY""}",value
439,dfs.balancer.moverThreads,dfs.balancer.getBlocks.size,dfs.balancer.getBlocks.size = ANY => dfs.balancer.moverThreads = ANY,value
440,dfs.datanode.fsdataset.volume.choosing.policy,dfs.datanode.available-space-volume-choosing-policy.balanced-space-threshold,"dfs.datanode.fsdataset.volume.choosing.policy = ""AvailableSpaceVolumeChoosingPolicy"" => dfs.datanode.available-space-volume-choosing-policy.balanced-space-threshold > 0",value
441,dfs.http.client.failover.sleep.base.millis,dfs.http.client.failover.sleep.max.millis,dfs.http.client.failover.sleep.base.millis < dfs.http.client.failover.sleep.max.millis,value
442,dfs.namenode.available-space-block-placement-policy.balanced-space-preference-fraction,dfs.datanode.available-space-volume-choosing-policy.balanced-space-preference-fraction,dfs.datanode.available-space-volume-choosing-policy.balanced-space-preference-fraction = dfs.namenode.available-space-block-placement-policy.balanced-space-preference-fraction,value
443,dfs.client.read.shortcircuit.buffer.size,dfs.client.read.short.circuit.replica.stale.threshold.ms,dfs.client.read.short.circuit.replica.stale.threshold.ms < 60000 => dfs.client.read.shortcircuit.buffer.size < 1048576,value
444,dfs.qjournal.get-journal-state.timeout.ms,dfs.qjournal.prepare-recovery.timeout.ms,dfs.qjournal.prepare-recovery.timeout.ms = dfs.qjournal.get-journal-state.timeout.ms,value
445,dfs.client.block.write.replace-datanode-on-failure.min-replication,dfs.namenode.replication.min,dfs.namenode.replication.min > dfs.client.block.write.replace-datanode-on-failure.min-replication => dfs.client.block.write.replace-datanode-on-failure.min-replication < dfs.namenode.replication.min,value
446,dfs.qjournal.prepare-recovery.timeout.ms,dfs.qjournal.finalize-segment.timeout.ms,dfs.qjournal.finalize-segment.timeout.ms = dfs.qjournal.prepare-recovery.timeout.ms,value
447,dfs.qjm.operations.timeout,dfs.qjournal.accept-recovery.timeout.ms,dfs.qjm.operations.timeout = dfs.qjournal.accept-recovery.timeout.ms,value
448,dfs.namenode.secondary.https-address,dfs.namenode.https-bind-host,dfs.namenode.https-bind-host != null => dfs.namenode.secondary.https-address != null,value
449,dfs.mover.max-no-move-interval,dfs.mover.max-no-move-interval,dfs.mover.max-no-move-interval = dfs.balancer.max-no-move-interval,value
450,dfs.webhdfs.netty.low.watermark,dfs.webhdfs.netty.high.watermark,dfs.webhdfs.netty.high.watermark > dfs.webhdfs.netty.low.watermark,value
451,dfs.data.transfer.protection,dfs.encrypt.data.transfer.cipher.key.bitlength,dfs.encrypt.data.transfer = true => dfs.encrypt.data.transfer.cipher.key.bitlength = ANY,value
452,dfs.replication,dfs.namenode.replication.min,dfs.replication > dfs.namenode.replication.min,value
453,dfs.balancer.max-no-move-interval,dfs.balancer.movedWinWidth,dfs.balancer.movedWinWidth > 0 => dfs.balancer.max-no-move-interval > 0,value
454,dfs.datanode.address,dfs.datanode.ipc.address,dfs.datanode.address = ANY => dfs.datanode.ipc.address = ANY,value
455,dfs.namenode.delegation.key.update-interval,dfs.block.access.key.update.interval,dfs.block.access.key.update.interval = dfs.namenode.delegation.key.update-interval,value
456,dfs.datanode.drop.cache.behind.reads,dfs.client.cache.drop.behind.reads,dfs.client.cache.drop.behind.reads = dfs.datanode.drop.cache.behind.reads,value
457,dfs.balancer.movedWinWidth,dfs.balancer.max-size-to-move,dfs.balancer.max-size-to-move > 0 => dfs.balancer.movedWinWidth = ANY,value
458,dfs.namenode.edits.journal-plugin.qjournal,dfs.qjournal.start-segment.timeout.ms,"dfs.qjournal.start-segment.timeout.ms > 0 => dfs.namenode.edits.journal-plugin.qjournal = ""ANY""",value
459,dfs.datanode.address,dfs.datanode.https.address,dfs.datanode.address = ANY => dfs.datanode.https.address = ANY,value
460,dfs.https.port,dfs.https.server.keystore.resource,dfs.https.port != null => dfs.https.server.keystore.resource != null,value
461,dfs.client.cache.drop.behind.reads,dfs.client.cache.drop.behind.writes,dfs.client.cache.drop.behind.writes = dfs.client.cache.drop.behind.reads,value
462,dfs.namenode.replication.considerLoad,dfs.namenode.replication.considerLoad.factor,dfs.namenode.replication.considerLoad = true => dfs.namenode.replication.considerLoad.factor > 0,value
463,dfs.replication.max,dfs.replication.min,dfs.replication.max > dfs.replication.min,value
464,dfs.datanode.du.reserved.calculator,dfs.datanode.du.reserved,dfs.datanode.du.reserved.calculator = ANY => dfs.datanode.du.reserved = ANY,value
465,dfs.namenode.stale.datanode.interval,dfs.namenode.write.stale.datanode.ratio,dfs.namenode.write.stale.datanode.ratio > 0 => dfs.namenode.stale.datanode.interval > 0,value
466,dfs.block.access.key.update.interval,dfs.block.access.token.lifetime,dfs.block.access.token.lifetime > dfs.block.access.key.update.interval => dfs.block.access.key.update.interval < dfs.block.access.token.lifetime,value
467,dfs.qjm.operations.timeout,dfs.qjournal.start-segment.timeout.ms,dfs.qjm.operations.timeout = dfs.qjournal.start-segment.timeout.ms,value
468,dfs.client.retry.policy.spec,dfs.client.socket-timeout,dfs.client.socket-timeout = <Number> => dfs.client.retry.policy.spec = <Expression>,value
469,dfs.http.client.failover.sleep.max.millis,dfs.client.failover.sleep.base.millis,dfs.client.failover.sleep.base.millis < dfs.http.client.failover.sleep.max.millis,value
470,dfs.replication.max,dfs.namenode.maintenance.replication.min,dfs.replication.max > dfs.namenode.maintenance.replication.min => dfs.namenode.maintenance.replication.min = [1 .. dfs.replication.max],value
471,dfs.namenode.resource.checked.volumes,dfs.namenode.resource.du.reserved,dfs.namenode.resource.checked.volumes > 0 => dfs.namenode.resource.du.reserved > 0,value
472,dfs.image.transfer-bootstrap-standby.bandwidthPerSec,dfs.image.transfer.bandwidthPerSec,dfs.image.transfer.bandwidthPerSec = dfs.image.transfer-bootstrap-standby.bandwidthPerSec,value
473,dfs.stream-buffer-size,dfs.client-write-packet-size,dfs.stream-buffer-size < dfs.client-write-packet-size => dfs.client-write-packet-size > dfs.stream-buffer-size,value
474,dfs.webhdfs.rest-csrf.enabled,dfs.webhdfs.rest-csrf.custom-header,dfs.webhdfs.rest-csrf.enabled = true => dfs.webhdfs.rest-csrf.custom-header != null,value
475,dfs.namenode.backup.http-address,dfs.namenode.https-address,dfs.namenode.https-address != null => dfs.namenode.backup.http-address in {ANY},value
476,dfs.qjournal.accept-recovery.timeout.ms,dfs.qjournal.select-input-streams.timeout.ms,dfs.qjournal.select-input-streams.timeout.ms = dfs.qjournal.accept-recovery.timeout.ms,value
477,dfs.client.read.shortcircuit,dfs.client.domain.socket.data.traffic,"dfs.client.read.shortcircuit = true => dfs.client.domain.socket.data.traffic in {true, false}",value
478,dfs.namenode.edits.journal-plugin.qjournal,dfs.qjournal.select-input-streams.timeout.ms,"dfs.qjournal.select-input-streams.timeout.ms > 0 => dfs.namenode.edits.journal-plugin.qjournal = ""ANY""",value
479,dfs.client.failover.proxy.provider,dfs.client.failover.max.attempts,dfs.client.failover.max.attempts > 0 => dfs.client.failover.proxy.provider = ANY,value
480,dfs.blocksize,dfs.namenode.fs-limits.min-block-size,dfs.namenode.fs-limits.min-block-size < dfs.blocksize,value
481,dfs.datanode.https.address,dfs.https.port,"dfs.https.port = <Number> => dfs.datanode.https.address = <Expression> + "":"" + dfs.https.port",value
482,dfs.webhdfs.oauth2.enabled,dfs.http.policy,dfs.http.policy = HTTPS_ONLY => dfs.webhdfs.oauth2.enabled = true,value
483,dfs.balancer.kerberos.principal,dfs.http.policy,dfs.balancer.kerberos.principal != null => dfs.http.policy in {HTTPS_ONLY},value
484,dfs.datanode.transfer.socket.send.buffer.size,dfs.client.socket.send.buffer.size,dfs.client.socket.send.buffer.size = dfs.datanode.transfer.socket.send.buffer.size,value
485,dfs.http.client.failover.sleep.base.millis,dfs.http.client.failover.sleep.max.millis,dfs.http.client.failover.sleep.max.millis > dfs.http.client.failover.sleep.base.millis,value
486,dfs.blocksize,dfs.client.read.shortcircuit.buffer.size,dfs.blocksize > 0 => dfs.client.read.shortcircuit.buffer.size = 1048576,value
487,dfs.balancer.moverThreads,dfs.balancer.max-no-move-interval,dfs.balancer.max-no-move-interval = ANY => dfs.balancer.moverThreads = ANY,value
488,dfs.namenode.handler.count,dfs.namenode.lifeline.handler.count,dfs.namenode.lifeline.handler.count = dfs.namenode.handler.count * dfs.namenode.lifeline.handler.ratio,value
489,dfs.encrypt.data.transfer.cipher.suites,dfs.encrypt.data.transfer.cipher.key.bitlength,"dfs.encrypt.data.transfer.cipher.suites != null => dfs.encrypt.data.transfer.cipher.key.bitlength in {128, 192, 256}",value
490,dfs.namenode.resource.checked.volumes.minimum,dfs.namenode.resource.du.reserved,dfs.namenode.resource.checked.volumes.minimum < dfs.namenode.resource.du.reserved => dfs.namenode.resource.du.reserved > dfs.namenode.resource.checked.volumes.minimum,value
491,dfs.namenode.kerberos.principal.pattern,dfs.namenode.kerberos.principal,dfs.namenode.kerberos.principal = ANY => dfs.namenode.kerberos.principal.pattern = ANY,value
492,dfs.heartbeat.interval,dfs.namenode.heartbeat.recheck-interval,dfs.namenode.heartbeat.recheck-interval > dfs.heartbeat.interval,value
493,dfs.client.block.write.locateFollowingBlock.initial.delay.ms,dfs.client.block.write.locateFollowingBlock.retries,dfs.client.block.write.locateFollowingBlock.retries > 0 => dfs.client.block.write.locateFollowingBlock.initial.delay.ms = ANY,value
494,dfs.namenode.delegation.token.always-use,dfs.namenode.delegation.token.renew-interval,"dfs.namenode.delegation.token.renew-interval > 0 => dfs.namenode.delegation.token.always-use in {true, false}",value
495,dfs.namenode.avoid.read.stale.datanode,dfs.namenode.avoid.write.stale.datanode,dfs.namenode.avoid.write.stale.datanode = true => dfs.namenode.avoid.read.stale.datanode = true,value
496,dfs.client.retry.interval-ms.get-last-block-length,dfs.client.retry.times.get-last-block-length,dfs.client.retry.times.get-last-block-length > 0 => dfs.client.retry.interval-ms.get-last-block-length = ANY,value
497,dfs.block.invalidate.limit,dfs.namenode.replication.work.multiplier.per.iteration,dfs.namenode.replication.work.multiplier.per.iteration > 0 => dfs.block.invalidate.limit = dfs.namenode.replication.work.multiplier.per.iteration * ANY,value
498,dfs.balancer.getBlocks.min-block-size,dfs.blocksize,dfs.blocksize > dfs.balancer.getBlocks.min-block-size => dfs.balancer.getBlocks.min-block-size < dfs.blocksize,value
499,dfs.namenode.retrycache.heap.percent,dfs.namenode.retrycache.expirytime.millis,dfs.namenode.retrycache.expirytime.millis > 0 => dfs.namenode.retrycache.heap.percent > 0,value
500,dfs.namenode.backup.http-address,dfs.namenode.http-address,dfs.namenode.http-address != null => dfs.namenode.backup.http-address in {ANY},value
501,dfs.namenode.top.num.users,dfs.namenode.top.windows.minutes,dfs.namenode.top.windows.minutes > 0 => dfs.namenode.top.num.users > 0,value
502,dfs.client.block.write.replace-datanode-on-failure.policy,dfs.client.block.write.replace-datanode-on-failure.min-replication,dfs.client.block.write.replace-datanode-on-failure.min-replication < dfs.replication => dfs.client.block.write.replace-datanode-on-failure.policy = ANY,value
503,dfs.namenode.decommission.interval,dfs.namenode.decommission.max.concurrent.tracked.nodes,dfs.namenode.decommission.interval > 0 => dfs.namenode.decommission.max.concurrent.tracked.nodes > 0,value
504,dfs.namenode.servicerpc-bind-host,dfs.namenode.http-bind-host,dfs.namenode.http-bind-host = ANY => dfs.namenode.servicerpc-bind-host = ANY,value
505,dfs.webhdfs.socket.read-timeout,dfs.webhdfs.socket.connect-timeout,dfs.webhdfs.socket.connect-timeout = dfs.webhdfs.socket.read-timeout,value
506,dfs.permissions.enabled,fs.permissions.umask-mode,"dfs.permissions.enabled = true => fs.permissions.umask-mode in {{022, 002, 077}}",value
507,dfs.replication,dfs.replication.max,dfs.replication < dfs.replication.max,value
508,dfs.client.write.byte-array-manager.count-reset-time-period-ms,dfs.client.write.byte-array-manager.count-threshold,dfs.client.write.byte-array-manager.count-threshold > 0 => dfs.client.write.byte-array-manager.count-reset-time-period-ms > 0,value
509,dfs.qjournal.accept-recovery.timeout.ms,dfs.qjournal.write-txns.timeout.ms,dfs.qjournal.write-txns.timeout.ms = dfs.qjournal.accept-recovery.timeout.ms,value
510,dfs.namenode.replication.min,dfs.namenode.maintenance.replication.min,dfs.namenode.replication.min < dfs.namenode.maintenance.replication.min,value
511,dfs.namenode.edits.asynclogging,dfs.namenode.edits.toleration.length,dfs.namenode.edits.asynclogging = true => dfs.namenode.edits.toleration.length > [1024..65536],value
512,dfs.http.client.retry.max.attempts,dfs.http.client.failover.max.attempts,dfs.http.client.failover.max.attempts > 0 => dfs.http.client.retry.max.attempts > dfs.http.client.failover.max.attempts,value
513,dfs.client.failover.max.attempts,dfs.client.failover.sleep.base.millis,dfs.client.failover.sleep.base.millis < dfs.client.failover.max.attempts * 1000,value
514,dfs.client.block.write.retries,dfs.client.block.write.replace-datanode-on-failure.min-replication,dfs.client.block.write.replace-datanode-on-failure.min-replication > 1 => dfs.client.block.write.retries > 0,value
515,dfs.namenode.num.extra.edits.retained,dfs.namenode.max.extra.edits.segments.retained,dfs.namenode.max.extra.edits.segments.retained = ANY => dfs.namenode.num.extra.edits.retained = ANY,value
516,dfs.namenode.edekcacheloader.initial.delay.ms,dfs.namenode.edekcacheloader.interval.ms,dfs.namenode.edekcacheloader.interval.ms > 0 => dfs.namenode.edekcacheloader.initial.delay.ms < dfs.namenode.edekcacheloader.interval.ms,value
517,dfs.namenode.max-num-blocks-to-log,dfs.namenode.replication.max-streams,dfs.namenode.replication.max-streams > dfs.namenode.max-num-blocks-to-log => dfs.namenode.max-num-blocks-to-log < dfs.namenode.replication.max-streams,value
518,dfs.balancer.keytab.file,dfs.http.policy,dfs.http.policy = HTTPS => dfs.balancer.keytab.file != null,value
519,dfs.webhdfs.oauth2.access.token.provider,dfs.webhdfs.oauth2.client.id,dfs.webhdfs.oauth2.client.id != null => dfs.webhdfs.oauth2.access.token.provider != null,value
520,dfs.balancer.dispatcherThreads,dfs.balancer.moverThreads,dfs.balancer.moverThreads = dfs.balancer.dispatcherThreads,value
521,dfs.image.transfer.timeout,dfs.image.transfer.bandwidthPerSec,dfs.image.transfer.bandwidthPerSec > 0 => dfs.image.transfer.timeout = ANY,value
522,dfs.ha.fencing.ssh.connect-timeout,ha.health-monitor.rpc-timeout.ms,ha.health-monitor.rpc-timeout.ms > dfs.ha.fencing.ssh.connect-timeout => dfs.ha.fencing.ssh.connect-timeout < ha.health-monitor.rpc-timeout.ms,value
523,dfs.namenode.resource.du.reserved,dfs.datanode.du.reserved.pct,dfs.datanode.du.reserved.pct in [0..100] => dfs.namenode.resource.du.reserved = dfs.datanode.du.reserved * (dfs.datanode.du.reserved.pct / 100),value
524,dfs.journalnode.https-address,dfs.journalnode.https-bind-host,dfs.journalnode.https-bind-host != null => dfs.journalnode.https-address = dfs.journalnode.https-bind-host:<PortExpression>,value
525,dfs.webhdfs.use.ipc.callq,dfs.datanode.use.datanode.hostname,dfs.datanode.use.datanode.hostname = true => dfs.webhdfs.use.ipc.callq != true,value
526,dfs.namenode.safemode.min.datanodes,dfs.namenode.safemode.extension,dfs.namenode.safemode.extension > 0 => dfs.namenode.safemode.min.datanodes > 0,value
527,dfs.client.failover.sleep.base.millis,dfs.http.client.failover.sleep.max.millis,dfs.client.failover.sleep.base.millis < dfs.http.client.failover.sleep.max.millis,value
528,dfs.journalnode.rpc-address,dfs.journalnode.http-address,dfs.journalnode.rpc-address != null => dfs.journalnode.http-address != null,value
529,dfs.balancer.getBlocks.min-block-size,dfs.namenode.fs-limits.min-block-size,dfs.namenode.fs-limits.min-block-size < dfs.balancer.getBlocks.min-block-size => dfs.balancer.getBlocks.min-block-size > dfs.namenode.fs-limits.min-block-size,value
530,dfs.namenode.maintenance.replication.min,dfs.namenode.safemode.replication.min,dfs.namenode.maintenance.replication.min = <Singlevalue> => dfs.namenode.safemode.replication.min = <Singlevalue>,value
531,dfs.namenode.top.window.num.buckets,dfs.namenode.top.windows.minutes,dfs.namenode.top.windows.minutes > 0 => dfs.namenode.top.window.num.buckets > 0,value
532,dfs.datanode.https.address,datanode.https.port,"datanode.https.port = <Number> => dfs.datanode.https.address = <Expression> + "":"" + datanode.https.port",value
533,dfs.namenode.safemode.min.datanodes,dfs.namenode.safemode.replication.min,dfs.namenode.safemode.replication.min > 0 => dfs.namenode.safemode.min.datanodes > 0,value
534,dfs.qjm.operations.timeout,dfs.qjournal.select-input-streams.timeout.ms,dfs.qjm.operations.timeout = dfs.qjournal.select-input-streams.timeout.ms,value
535,dfs.qjournal.get-journal-state.timeout.ms,dfs.qjournal.write-txns.timeout.ms,dfs.qjournal.write-txns.timeout.ms = dfs.qjournal.get-journal-state.timeout.ms,value
536,dfs.namenode.max.full.block.report.leases,dfs.namenode.full.block.report.lease.length.ms,dfs.namenode.full.block.report.lease.length.ms > 0 => dfs.namenode.max.full.block.report.leases = ANY,value
537,dfs.client.read.shortcircuit,dfs.client.read.short.circuit.replica.stale.threshold.ms,dfs.client.read.shortcircuit = true => dfs.client.read.short.circuit.replica.stale.threshold.ms > 0,value
538,dfs.blockreport.intervalMsec,dfs.blockreport.initialDelay,dfs.blockreport.initialDelay > 0 => dfs.blockreport.intervalMsec > dfs.blockreport.initialDelay,value
539,dfs.datanode.drop.cache.behind.writes,dfs.client.cache.drop.behind.writes,dfs.client.cache.drop.behind.writes = ANY => dfs.datanode.drop.cache.behind.writes = ANY,value
540,dfs.datanode.https.address,dfs.https.port,"dfs.https.port = <PortNumber> => dfs.datanode.https.address in {{ ""ANY:.."" + <PortNumber> + ""..ANY"" }}",value
541,dfs.client.failover.sleep.base.millis,dfs.client.failover.sleep.max.millis,dfs.client.failover.sleep.base.millis < dfs.client.failover.sleep.max.millis,value
542,dfs.client.read.shortcircuit,dfs.client.read.shortcircuit.buffer.size,dfs.client.read.shortcircuit = true => dfs.client.read.shortcircuit.buffer.size > 0,value
543,dfs.client.read.shortcircuit.skip.checksum,dfs.client.read.shortcircuit.streams.cache.size,dfs.client.read.shortcircuit.streams.cache.size > 0 => dfs.client.read.shortcircuit.skip.checksum = ANY,value
544,dfs.client.block.write.replace-datanode-on-failure.policy,dfs.client.block.write.replace-datanode-on-failure.best-effort,dfs.client.block.write.replace-datanode-on-failure.best-effort = true => dfs.client.block.write.replace-datanode-on-failure.policy = ANY,value
545,dfs.balancer.moverThreads,dfs.datanode.balance.max.concurrent.moves,dfs.datanode.balance.max.concurrent.moves = ANY => dfs.balancer.moverThreads = ANY,value
546,dfs.namenode.replication.pending.timeout-sec,dfs.namenode.replication.min,dfs.namenode.replication.min < dfs.replication => dfs.namenode.replication.pending.timeout-sec = ANY,value
547,dfs.http.client.failover.sleep.base.millis,dfs.client.failover.sleep.max.millis,dfs.client.failover.sleep.max.millis > dfs.client.failover.sleep.base.millis,value
548,dfs.http.client.retry.policy.spec,dfs.http.client.retry.max.attempts,"dfs.http.client.retry.max.attempts > 0 => dfs.http.client.retry.policy.spec = ""maxRetries="" + dfs.http.client.retry.max.attempts",value
549,dfs.secondary.namenode.kerberos.internal.spnego.principal,dfs.journalnode.kerberos.internal.spnego.principal,dfs.secondary.namenode.kerberos.internal.spnego.principal = dfs.journalnode.kerberos.internal.spnego.principal,value
550,dfs.namenode.edits.dir,dfs.namenode.checkpoint.edits.dir,dfs.namenode.checkpoint.edits.dir = ANY => dfs.namenode.edits.dir = ANY,value
551,dfs.client.retry.times.get-last-block-length,dfs.client.retry.max.attempts,dfs.client.retry.max.attempts = ANY => dfs.client.retry.times.get-last-block-length = ANY,value
552,dfs.qjm.operations.timeout,dfs.qjournal.finalize-segment.timeout.ms,dfs.qjm.operations.timeout = dfs.qjournal.finalize-segment.timeout.ms,value
553,dfs.balancer.max-no-move-interval,dfs.balancer.max-size-to-move,dfs.balancer.max-size-to-move > 0 => dfs.balancer.max-no-move-interval > 0,value
554,dfs.block.access.key.update.interval,dfs.block.access.token.lifetime,dfs.block.access.token.lifetime = X => dfs.block.access.key.update.interval < X,value
555,dfs.client.use.legacy.blockreader.local,dfs.client.use.legacy.blockreader,dfs.client.use.legacy.blockreader = true => dfs.client.use.legacy.blockreader.local = false,value
556,dfs.webhdfs.use.ipc.callq,dfs.client.use.datanode.hostname,dfs.client.use.datanode.hostname = true => dfs.webhdfs.use.ipc.callq != true,value
557,dfs.client.failover.random.order,dfs.client.failover.sleep.max.millis,dfs.client.failover.sleep.max.millis > 0 => dfs.client.failover.random.order = ANY,value
558,dfs.http.client.failover.max.attempts,dfs.http.client.failover.sleep.base.millis,dfs.http.client.failover.sleep.base.millis < dfs.http.client.failover.max.attempts,value
559,dfs.client.read.short.circuit.replica.stale.threshold.ms,dfs.namenode.stale.datanode.interval,dfs.namenode.stale.datanode.interval > dfs.client.read.short.circuit.replica.stale.threshold.ms,value
560,dfs.namenode.num.extra.edits.retained,dfs.namenode.num.checkpoints.retained,dfs.namenode.num.checkpoints.retained = ANY => dfs.namenode.num.extra.edits.retained = ANY,value
561,dfs.namenode.stale.datanode.minimum.interval,dfs.namenode.write.stale.datanode.ratio,dfs.namenode.write.stale.datanode.ratio > 0 => dfs.namenode.stale.datanode.minimum.interval > 0,value
562,dfs.blockreport.intervalMsec,dfs.blockreport.split.threshold,dfs.blockreport.split.threshold > 0 => dfs.blockreport.intervalMsec < dfs.blockreport.split.threshold * 1000,value
563,dfs.quota.by.storage.type.enabled,dfs.datanode.data.dir,dfs.quota.by.storage.type.enabled = true => dfs.datanode.data.dir contains [DISK]/[SSD]/[ARCHIVE],value
564,dfs.client.write.byte-array-manager.enabled,dfs.client.write.byte-array-manager.count-threshold,dfs.client.write.byte-array-manager.enabled = true => dfs.client.write.byte-array-manager.count-threshold > 0,value
565,dfs.image.transfer.timeout,dfs.image.transfer.chunksize,dfs.image.transfer.chunksize > 0 => dfs.image.transfer.timeout = ANY,value
566,dfs.http.client.retry.policy.spec,dfs.http.client.failover.max.attempts,"dfs.http.client.failover.max.attempts > 0 => dfs.http.client.retry.policy.spec = ""maxRetries="" + dfs.http.client.failover.max.attempts",value
567,dfs.http.client.retry.policy.spec,dfs.http.client.failover.sleep.base.millis,"dfs.http.client.failover.sleep.base.millis > 0 => dfs.http.client.retry.policy.spec = ""sleepTime="" + dfs.http.client.failover.sleep.base.millis",value
568,dfs.namenode.kerberos.principal,dfs.web.authentication.kerberos.principal,dfs.namenode.kerberos.principal != null => dfs.web.authentication.kerberos.principal in { dfs.namenode.kerberos.principal },value
569,dfs.client.domain.socket.data.traffic,dfs.client.read.shortcircuit.streams.cache.size,dfs.client.read.shortcircuit.streams.cache.size > 0 => dfs.client.domain.socket.data.traffic = true,value
570,dfs.journalnode.http-address,dfs.journalnode.http-bind-host,"dfs.journalnode.http-bind-host != null => dfs.journalnode.http-address = ""ANY""",value
571,dfs.namenode.replication.max-streams,dfs.replication,dfs.replication > 1 => dfs.namenode.replication.max-streams > dfs.replication,value
572,dfs.namenode.retrycache.expirytime.millis,dfs.client.failover.sleep.max.millis,dfs.client.failover.sleep.max.millis < dfs.namenode.retrycache.expirytime.millis,value
573,dfs.namenode.decommission.interval,dfs.namenode.decommission.blocks.per.interval,dfs.namenode.decommission.interval > 0 => dfs.namenode.decommission.blocks.per.interval > 0,value
574,dfs.namenode.max-num-blocks-to-log,dfs.namenode.replication.max-streams-hard-limit,dfs.namenode.replication.max-streams-hard-limit > dfs.namenode.max-num-blocks-to-log => dfs.namenode.max-num-blocks-to-log < dfs.namenode.replication.max-streams-hard-limit,value
575,dfs.qjournal.get-journal-state.timeout.ms,dfs.qjournal.new-epoch.timeout.ms,dfs.qjournal.new-epoch.timeout.ms = dfs.qjournal.get-journal-state.timeout.ms,value
576,dfs.namenode.stale.datanode.minimum.interval,dfs.namenode.stale.datanode.interval,dfs.namenode.stale.datanode.minimum.interval > 0 => dfs.namenode.stale.datanode.interval = (dfs.namenode.stale.datanode.minimum.interval * dfs.heartbeat.interval),value
577,dfs.namenode.rpc-bind-host,dfs.namenode.lifeline.rpc-bind-host,dfs.namenode.rpc-bind-host != null => dfs.namenode.lifeline.rpc-bind-host = <Expression>,value
578,dfs.qjournal.get-journal-state.timeout.ms,dfs.qjournal.finalize-segment.timeout.ms,dfs.qjournal.finalize-segment.timeout.ms = dfs.qjournal.get-journal-state.timeout.ms,value
579,dfs.journalnode.http-address,dfs.journalnode.https-address,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.journalnode.http-address != dfs.journalnode.https-address",value
580,dfs.namenode.servicerpc-address,dfs.namenode.rpc-address,dfs.namenode.rpc-address != null => dfs.namenode.servicerpc-address != dfs.namenode.rpc-address,value
581,dfs.qjournal.prepare-recovery.timeout.ms,dfs.qjournal.write-txns.timeout.ms,dfs.qjournal.write-txns.timeout.ms = dfs.qjournal.prepare-recovery.timeout.ms,value
582,dfs.client.retry.window.base,dfs.client.retry.policy.spec,dfs.client.retry.window.base = <Expression> => dfs.client.retry.policy.spec = <Expression>,value
583,dfs.qjournal.start-segment.timeout.ms,dfs.qjournal.write-txns.timeout.ms,dfs.qjournal.write-txns.timeout.ms = dfs.qjournal.start-segment.timeout.ms,value
584,dfs.replication,dfs.namenode.safemode.replication.min,dfs.replication > dfs.namenode.safemode.replication.min,value
585,dfs.journalnode.rpc-address,dfs.journalnode.https-address,dfs.journalnode.rpc-address != null => dfs.journalnode.https-address != null,value
586,dfs.namenode.fs-limits.max-xattrs-per-inode,dfs.namenode.fs-limits.max-xattr-size,dfs.namenode.fs-limits.max-xattr-size > 0 => dfs.namenode.fs-limits.max-xattrs-per-inode > 0,value
587,dfs.client.failover.proxy.provider,dfs.client.failover.random.order,dfs.client.failover.random.order = true => dfs.client.failover.proxy.provider = ANY,value
