id,Parameter1,Parameter2,bnf,type
687,dfs.namenode.audit.loggers,dfs.namenode.audit.log.maxretainduration,"dfs.namenode.audit.loggers = ""ANY"" => dfs.namenode.audit.log.maxretainduration = ""ANY""",behavior
777,dfs.user.home.dir.prefix,hadoop.http.staticuser.user,dfs.user.home.dir.prefix != null => hadoop.http.staticuser.user != null,behavior
649,dfs.encrypt.data.transfer.algorithm,hadoop.rpc.protection,"dfs.encrypt.data.transfer.algorithm != null => hadoop.rpc.protection in {""privacy"", ""integrity""}",behavior
383,dfs.datanode.du.reserved.pct,dfs.datanode.data.dir,dfs.datanode.du.reserved.pct > 0 => dfs.datanode.data.dir != null,behavior
395,dfs.namenode.top.windows.minutes,dfs.namenode.top.num.users,dfs.namenode.top.windows.minutes != null => dfs.namenode.top.num.users != null,behavior
997,dfs.namenode.replication.max-streams,dfs.namenode.replication.work.multiplier.per.iteration,dfs.namenode.replication.max-streams > {{ANY}} => dfs.namenode.replication.work.multiplier.per.iteration > 1,behavior
321,dfs.namenode.rpc-address,dfs.namenode.servicerpc-address,dfs.namenode.rpc-address != null => dfs.namenode.servicerpc-address != null,behavior
742,dfs.client.read.shortcircuit.skip.checksum,dfs.domain.socket.path,dfs.domain.socket.path != null => dfs.client.read.shortcircuit.skip.checksum = ANY,behavior
814,dfs.webhdfs.rest-csrf.methods-to-ignore,dfs.webhdfs.rest-csrf.browser-useragents-regex,"dfs.webhdfs.rest-csrf.methods-to-ignore in {{GET, HEAD}} => dfs.webhdfs.rest-csrf.browser-useragents-regex != null",behavior
469,dfs.hosts,dfs.hosts.exclude,<Dependency> ::= <Variable> != null => <ConstraintItem> != null,behavior
690,dfs.namenode.edits.noeditlogchannelflush,dfs.namenode.num.extra.edits.retained,dfs.namenode.edits.noeditlogchannelflush = true => dfs.namenode.num.extra.edits.retained > 0,behavior
989,dfs.namenode.file.close.num-committed-allowed,dfs.namenode.num.extra.edits.retained,dfs.namenode.file.close.num-committed-allowed > default => dfs.namenode.num.extra.edits.retained > default,behavior
1337,dfs.block.invalidate.limit,dfs.namenode.invalidate.work.pct.per.iteration,dfs.namenode.invalidate.work.pct.per.iteration > 0 => dfs.block.invalidate.limit = ANY,control
501,dfs.client-write-packet-size,dfs.datanode.max.xcievers,dfs.client-write-packet-size > 65536 => dfs.datanode.max.xcievers > 4096,control
1030,dfs.quota.by.storage.type.enabled,dfs.storage.policy.enabled,dfs.quota.by.storage.type.enabled = true => dfs.storage.policy.enabled = true,control
1002,dfs.namenode.checkpoint.edits.dir,dfs.namenode.max.extra.edits.segments.retained,dfs.namenode.max.extra.edits.segments.retained = ANY => dfs.namenode.checkpoint.edits.dir = ANY,control
1062,dfs.nameservices,dfs.ha.zkfc.port,dfs.nameservices != null => dfs.ha.zkfc.port = ANY,control
1076,dfs.webhdfs.use.ipc.callq,dfs.webhdfs.ipc.server.handler.count,dfs.webhdfs.use.ipc.callq = true => dfs.webhdfs.ipc.server.handler.count > 1,control
1366,dfs.client.retry.interval-ms.get-last-block-length,dfs.client.retry.policy.enabled,dfs.client.retry.policy.enabled = true => dfs.client.retry.interval-ms.get-last-block-length = ANY,control
378,dfs.namenode.enable.retrycache,dfs.namenode.retrycache.expirytime.millis,dfs.namenode.enable.retrycache = true => dfs.namenode.retrycache.expirytime.millis != null,control
564,dfs.client.failover.max.attempts,dfs.ha.automatic-failover.enabled,dfs.ha.automatic-failover.enabled = true => dfs.client.failover.max.attempts > 1,control
882,dfs.namenode.edits.dir,dfs.namenode.edits.dir.required,dfs.namenode.edits.dir.required = true => dfs.namenode.edits.dir != null,control
298,dfs.client.block.write.replace-datanode-on-failure.policy,dfs.client.block.write.replace-datanode-on-failure.min-replication,dfs.client.block.write.replace-datanode-on-failure.policy != null => dfs.client.block.write.replace-datanode-on-failure.min-replication = 0,control
1244,dfs.client.domain.socket.data.traffic,dfs.client.use.legacy.blockreader.local,dfs.client.use.legacy.blockreader.local = false => dfs.client.domain.socket.data.traffic = true,control
714,dfs.namenode.path.based.cache.block.map.allocation.percent,dfs.namenode.path.based.cache.retry.interval.ms,dfs.namenode.path.based.cache.block.map.allocation.percent > 0 => dfs.namenode.path.based.cache.retry.interval.ms > 0,control
1249,dfs.namenode.xattrs.enabled,dfs.namenode.fs-limits.max-xattr-size,dfs.namenode.xattrs.enabled = true => dfs.namenode.fs-limits.max-xattr-size > 0,control
828,dfs.http.policy,dfs.datanode.https.address,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.datanode.https.address != ""null""",control
939,dfs.datanode.ram.disk.replica.tracker,dfs.datanode.ram.disk.replica.buffer.size,dfs.datanode.ram.disk.replica.tracker = true => dfs.datanode.ram.disk.replica.buffer.size > 0,control
515,dfs.namenode.checkpoint.txns,dfs.namenode.num.checkpoints.retained,dfs.namenode.checkpoint.txns in {{500000..1000000}} => dfs.namenode.num.checkpoints.retained in {{2..3}},control
827,dfs.http.policy,dfs.client.https.keystore.resource,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.client.https.keystore.resource != ""null""",control
1505,dfs.web.authentication.simple.anonymous.allowed,dfs.web.authentication.kerberos.keytab,dfs.web.authentication.kerberos.keytab != null => dfs.web.authentication.simple.anonymous.allowed = false,control
459,dfs.namenode.lifeline.handler.count,dfs.namenode.handler.count,dfs.namenode.lifeline.handler.count > 0 => dfs.namenode.handler.count > dfs.namenode.lifeline.handler.count,control
401,dfs.webhdfs.rest-csrf.enabled,dfs.webhdfs.rest-csrf.custom-header,dfs.webhdfs.rest-csrf.enabled = true => dfs.webhdfs.rest-csrf.custom-header != null,control
505,dfs.namenode.checkpoint.dir,dfs.namenode.checkpoint.period,dfs.namenode.checkpoint.dir != null => dfs.namenode.checkpoint.period > 0,control
934,dfs.datanode.network.counts.cache.max.size,dfs.datanode.handler.count,dfs.datanode.network.counts.cache.max.size > default => dfs.datanode.handler.count > default,control
870,dfs.client.max.block.acquire.failures,dfs.client.block.acquire.retries,dfs.client.max.block.acquire.failures > 0 => dfs.client.block.acquire.retries > 3,control
1082,dfs.ha.automatic-failover.enabled,dfs.ha.zkfc.port,dfs.ha.automatic-failover.enabled = true => dfs.ha.zkfc.port != null,control
1192,dfs.journalnode.http-address,dfs.http.policy,"dfs.http.policy = ""HTTPS_ONLY"" => dfs.journalnode.http-address = null",control
724,dfs.client.read.shortcircuit,dfs.domain.socket.path,dfs.client.read.shortcircuit = true => dfs.domain.socket.path != null,control
909,dfs.replication,dfs.namenode.replication.considerLoad.factor,dfs.namenode.replication.considerLoad = true => dfs.replication = dfs.replication * dfs.namenode.replication.considerLoad.factor,control
769,dfs.namenode.lock.detailed-metrics.enabled,dfs.namenode.lock.metrics.log.interval,dfs.namenode.lock.detailed-metrics.enabled = true => dfs.namenode.lock.metrics.log.interval > 0,control
1093,dfs.datanode.use.datanode.hostname,dfs.datanode.hostname,dfs.datanode.hostname != null => dfs.datanode.use.datanode.hostname = true,control
1056,dfs.nameservices,dfs.internal.nameservices,dfs.nameservices != null => dfs.internal.nameservices = ANY,control
1409,dfs.datanode.sync.behind.writes.in.background,dfs.datanode.sync.behind.writes,dfs.datanode.sync.behind.writes = true => dfs.datanode.sync.behind.writes.in.background = true,control
836,dfs.balancer.movedWinWidth,dfs.balancer.getBlocks.size,dfs.balancer.movedWinWidth > 0 => dfs.balancer.getBlocks.size > 0,control
651,dfs.encrypt.data.transfer.cipher.suites,dfs.encrypt.data.transfer,dfs.encrypt.data.transfer = true => dfs.encrypt.data.transfer.cipher.suites != null,control
1532,dfs.balancer.keytab.enabled,dfs.balancer.keytab.file,dfs.balancer.keytab.enabled = true => dfs.balancer.keytab.file != null,control
1175,dfs.encrypt.data.transfer.cipher.suites,dfs.data.transfer.protection,"dfs.data.transfer.protection = ""privacy"" => dfs.encrypt.data.transfer.cipher.suites != null",control
694,dfs.client.cache.drop.behind.reads,dfs.client.cache.total.size,dfs.client.cache.drop.behind.reads = ANY => dfs.client.cache.total.size > 0,control
1224,dfs.client.read.shortcircuit,dfs.domain.socket.path,dfs.client.read.shortcircuit = true => dfs.domain.socket.path != null,control
1356,dfs.client.failover.random.order,dfs.ha.automatic-failover.enabled,dfs.ha.automatic-failover.enabled = true => dfs.client.failover.random.order = ANY,control
320,dfs.namenode.checkpoint.dir,dfs.namenode.checkpoint.edits.dir,dfs.namenode.checkpoint.dir = ANY => dfs.namenode.checkpoint.edits.dir = dfs.namenode.checkpoint.dir,default
1166,dfs.encrypt.data.transfer,dfs.encrypt.data.transfer.algorithm,"dfs.encrypt.data.transfer = ""true"" => dfs.encrypt.data.transfer.algorithm != ""null""",default
293,dfs.namenode.replication.min,dfs.namenode.maintenance.replication.min,dfs.namenode.replication.min = ANY => dfs.namenode.maintenance.replication.min = dfs.namenode.replication.min,default
932,dfs.client.block.write.replace-datanode-on-failure.enable,dfs.client.block.write.replace-datanode-on-failure.best-effort,dfs.client.block.write.replace-datanode-on-failure.best-effort = ANY => dfs.client.block.write.replace-datanode-on-failure.enable = true,default
991,dfs.namenode.checkpoint.dir,dfs.namenode.checkpoint.edits.dir,dfs.namenode.checkpoint.edits.dir = null => dfs.namenode.checkpoint.dir = ANY,default
277,dfs.datanode.du.reserved.pct,dfs.datanode.du.reserved.pct.ram_disk,dfs.datanode.du.reserved.pct.ram_disk = null => dfs.datanode.du.reserved.pct = dfs.datanode.du.reserved.pct.ram_disk,default
259,dfs.namenode.rpc-bind-host,dfs.namenode.rpc-address,dfs.namenode.rpc-bind-host = null => dfs.namenode.rpc-address = dfs.namenode.rpc-address,default
1285,dfs.http.client.retry.policy.enabled,dfs.http.client.retry.policy.spec,dfs.http.client.retry.policy.enabled = true => dfs.http.client.retry.policy.spec != null,default
1441,dfs.namenode.backup.dnrpc-address,dfs.namenode.rpc-address,dfs.namenode.backup.dnrpc-address = null => dfs.namenode.backup.dnrpc-address = dfs.namenode.rpc-address,default
887,dfs.namenode.edits.journal-plugin.qjournal,dfs.namenode.edits.journal-plugin,"dfs.namenode.edits.journal-plugin = ""qjournal"" => dfs.namenode.edits.journal-plugin.qjournal = ""ANY""",default
1119,dfs.journalnode.kerberos.internal.spnego.principal,dfs.journalnode.keytab.file,dfs.journalnode.keytab.file = ANY => dfs.journalnode.kerberos.internal.spnego.principal = ANY,default
377,dfs.client.cache.readahead,dfs.datanode.readahead.bytes,dfs.client.cache.readahead != null => dfs.datanode.readahead.bytes = ANY,overwrite
358,dfs.encrypt.data.transfer,dfs.data.transfer.protection,dfs.encrypt.data.transfer = true => dfs.data.transfer.protection = ANY,overwrite
313,dfs.datanode.plugins,dfs.client.cache.drop.behind.reads,dfs.datanode.plugins != null => dfs.client.cache.drop.behind.reads = ANY,overwrite
371,dfs.journalnode.https-address,dfs.journalnode.http-bind-host,dfs.journalnode.https-address != null => dfs.journalnode.http-bind-host = ANY,overwrite
306,dfs.namenode.lifeline.handler.ratio,dfs.namenode.lifeline.handler.count,dfs.namenode.lifeline.handler.ratio != null => dfs.namenode.lifeline.handler.count = ANY,overwrite
364,dfs.trustedchannel.resolver.class,dfs.encrypt.data.transfer.cipher.key.bitlength,dfs.trustedchannel.resolver.class != null => dfs.encrypt.data.transfer.cipher.key.bitlength = ANY,overwrite
267,dfs.namenode.http-address,dfs.namenode.http-bind-host,dfs.namenode.http-bind-host != null => dfs.namenode.http-address = ANY,overwrite
264,dfs.namenode.lifeline.rpc-address,dfs.namenode.lifeline.rpc-bind-host,dfs.namenode.lifeline.rpc-address != null => dfs.namenode.lifeline.rpc-bind-host = ANY,overwrite
330,dfs.client.cache.drop.behind.writes,dfs.datanode.drop.cache.behind.writes,dfs.client.cache.drop.behind.writes != null => dfs.datanode.drop.cache.behind.writes = ANY,overwrite
329,dfs.client.cache.drop.behind.reads,dfs.datanode.drop.cache.behind.reads,dfs.client.cache.drop.behind.reads != null => dfs.datanode.drop.cache.behind.reads = ANY,overwrite
369,dfs.journalnode.rpc-bind-host,dfs.journalnode.rpc-address,dfs.journalnode.rpc-bind-host != null => dfs.journalnode.rpc-address = ANY,overwrite
263,dfs.namenode.servicerpc-address,dfs.namenode.servicerpc-bind-host,dfs.namenode.servicerpc-address != null => dfs.namenode.servicerpc-bind-host = ANY,overwrite
260,dfs.namenode.rpc-bind-host,dfs.namenode.servicerpc-bind-host,dfs.namenode.rpc-bind-host != null => dfs.namenode.servicerpc-bind-host = ANY,overwrite
1229,dfs.client.read.shortcircuit,dfs.client.read.shortcircuit.buffer.size,dfs.client.read.shortcircuit = true => dfs.client.read.shortcircuit.buffer.size > 0,value
362,dfs.encrypt.data.transfer.cipher.suites,dfs.encrypt.data.transfer.cipher.key.bitlength,"dfs.encrypt.data.transfer.cipher.suites != null => dfs.encrypt.data.transfer.cipher.key.bitlength in {128, 192, 256}",value
1486,dfs.qjournal.start-segment.timeout.ms,dfs.qjournal.select-input-streams.timeout.ms,dfs.qjournal.select-input-streams.timeout.ms = dfs.qjournal.start-segment.timeout.ms,value
1247,dfs.client.slow.io.warning.threshold.ms,dfs.datanode.slow.io.warning.threshold.ms,dfs.datanode.slow.io.warning.threshold.ms = dfs.client.slow.io.warning.threshold.ms,value
904,dfs.replication,dfs.replication.max,dfs.replication < dfs.replication.max,value
865,dfs.namenode.replication.considerLoad,dfs.namenode.replication.considerLoad.factor,dfs.namenode.replication.considerLoad = true => dfs.namenode.replication.considerLoad.factor > 0,value
1185,dfs.journalnode.rpc-address,dfs.journalnode.https-address,dfs.journalnode.rpc-address != null => dfs.journalnode.https-address != null,value
1350,dfs.client.failover.proxy.provider,dfs.client.failover.sleep.max.millis,dfs.client.failover.sleep.max.millis > 0 => dfs.client.failover.proxy.provider = ANY,value
1117,dfs.namenode.kerberos.internal.spnego.principal,dfs.web.authentication.kerberos.principal,dfs.web.authentication.kerberos.principal = dfs.namenode.kerberos.internal.spnego.principal,value
1031,dfs.datanode.drop.cache.behind.reads,dfs.datanode.drop.cache.behind.writes,dfs.datanode.drop.cache.behind.writes = dfs.datanode.drop.cache.behind.reads,value
1178,dfs.encrypt.data.transfer.cipher.key.bitlength,dfs.encrypt.data.transfer.cipher.suites,dfs.encrypt.data.transfer.cipher.suites != null => dfs.encrypt.data.transfer.cipher.key.bitlength != null,value
437,dfs.client.block.write.replace-datanode-on-failure.min-replication,dfs.replication,dfs.client.block.write.replace-datanode-on-failure.min-replication < dfs.replication,value
1225,dfs.client.read.shortcircuit,dfs.client.read.shortcircuit.skip.checksum,"dfs.client.read.shortcircuit = true => dfs.client.read.shortcircuit.skip.checksum in {true, false}",value
1386,dfs.client.hedged.read.threshold.millis,dfs.client.hedged.read.threadpool.size,dfs.client.hedged.read.threadpool.size > 0 => dfs.client.hedged.read.threshold.millis > 0,value
1453,dfs.namenode.replication.max-streams,dfs.namenode.replication.max-streams-hard-limit,dfs.namenode.replication.max-streams < dfs.namenode.replication.max-streams-hard-limit,value
1257,dfs.namenode.top.window.num.buckets,dfs.namenode.top.num.users,dfs.namenode.top.num.users > 0 => dfs.namenode.top.window.num.buckets > 0,value
1283,dfs.xframe.enabled,dfs.xframe.value,"dfs.xframe.enabled = ""true"" => dfs.xframe.value != ""null""",value
420,dfs.replication.max,dfs.namenode.replication.min,dfs.replication.max > dfs.namenode.replication.min,value
1335,dfs.balancer.max-no-move-interval,dfs.balancer.dispatcherThreads,dfs.balancer.dispatcherThreads > 0 => dfs.balancer.max-no-move-interval > 0,value
1422,dfs.https.port,dfs.namenode.https-address,"dfs.namenode.https-address = ""ANY"" => dfs.https.port = <Singlevalue>",value
936,dfs.client.block.write.replace-datanode-on-failure.policy,dfs.client.block.write.replace-datanode-on-failure.min-replication,dfs.client.block.write.replace-datanode-on-failure.min-replication < dfs.replication => dfs.client.block.write.replace-datanode-on-failure.policy = ANY,value
1036,dfs.client.failover.max.attempts,dfs.client.failover.connection.retries,dfs.client.failover.connection.retries < dfs.client.failover.max.attempts,value
968,dfs.namenode.safemode.min.datanodes,dfs.namenode.safemode.replication.min,dfs.namenode.safemode.replication.min > 0 => dfs.namenode.safemode.min.datanodes > 0,value
1239,dfs.client.use.legacy.blockreader.local,dfs.client.use.legacy.blockreader,dfs.client.use.legacy.blockreader = true => dfs.client.use.legacy.blockreader.local = false,value
916,dfs.namenode.replication.min,dfs.namenode.safemode.replication.min,dfs.namenode.replication.min < dfs.namenode.safemode.replication.min,value
1226,dfs.client.read.shortcircuit,dfs.client.read.shortcircuit.streams.cache.size,dfs.client.read.shortcircuit = true => dfs.client.read.shortcircuit.streams.cache.size > 0,value
905,dfs.replication,dfs.namenode.replication.min,dfs.replication > dfs.namenode.replication.min,value
291,dfs.replication,dfs.namenode.maintenance.replication.min,dfs.replication > dfs.namenode.maintenance.replication.min,value
871,dfs.datanode.du.reserved,dfs.namenode.resource.du.reserved,dfs.namenode.resource.du.reserved = dfs.datanode.du.reserved,value
786,dfs.namenode.servicerpc-address,dfs.namenode.rpc-address,dfs.namenode.rpc-address != null => dfs.namenode.servicerpc-address != dfs.namenode.rpc-address,value
1378,dfs.client.retry.window.base,dfs.client.failover.sleep.base.millis,dfs.client.retry.window.base = <Expression> => dfs.client.failover.sleep.base.millis = <Expression>,value
1067,dfs.nameservice.id,dfs.internal.nameservices,dfs.nameservice.id in {dfs.internal.nameservices} => dfs.nameservice.id = ANY,value
290,dfs.replication,dfs.namenode.replication.min,dfs.replication > dfs.namenode.replication.min,value
1023,dfs.image.transfer-bootstrap-standby.bandwidthPerSec,dfs.datanode.balance.bandwidthPerSec,dfs.datanode.balance.bandwidthPerSec = dfs.image.transfer-bootstrap-standby.bandwidthPerSec,value
1096,dfs.namenode.kerberos.principal,dfs.web.authentication.kerberos.principal,dfs.namenode.kerberos.principal != null => dfs.web.authentication.kerberos.principal in { dfs.namenode.kerberos.principal },value
806,dfs.datanode.address,dfs.datanode.ipc.address,dfs.datanode.address = ANY => dfs.datanode.ipc.address = ANY,value
823,dfs.namenode.http-bind-host,dfs.namenode.https-bind-host,dfs.namenode.http-bind-host != null => dfs.namenode.https-bind-host = <Expression>,value
935,dfs.client.block.write.replace-datanode-on-failure.policy,dfs.client.block.write.replace-datanode-on-failure.best-effort,dfs.client.block.write.replace-datanode-on-failure.best-effort = true => dfs.client.block.write.replace-datanode-on-failure.policy = ANY,value
946,dfs.blockreport.intervalMsec,dfs.blockreport.initialDelay,dfs.blockreport.initialDelay > 0 => dfs.blockreport.intervalMsec > dfs.blockreport.initialDelay,value
790,dfs.namenode.servicerpc-bind-host,dfs.namenode.https-bind-host,dfs.namenode.https-bind-host = ANY => dfs.namenode.servicerpc-bind-host = ANY,value
410,dfs.http.client.failover.sleep.base.millis,dfs.http.client.failover.sleep.max.millis,dfs.http.client.failover.sleep.base.millis < dfs.http.client.failover.sleep.max.millis,value
951,dfs.heartbeat.interval,dfs.datanode.lifeline.interval.seconds,dfs.datanode.lifeline.interval.seconds = dfs.heartbeat.interval * 3,value
352,dfs.namenode.stale.datanode.minimum.interval,dfs.namenode.stale.datanode.interval,dfs.namenode.stale.datanode.minimum.interval > 0 => dfs.namenode.stale.datanode.interval = (dfs.namenode.stale.datanode.minimum.interval * dfs.heartbeat.interval),value
1362,dfs.client.read.shortcircuit.buffer.size,dfs.client.read.short.circuit.replica.stale.threshold.ms,dfs.client.read.short.circuit.replica.stale.threshold.ms < 60000 => dfs.client.read.shortcircuit.buffer.size < 1048576,value
950,dfs.namenode.max.full.block.report.leases,dfs.namenode.full.block.report.lease.length.ms,dfs.namenode.full.block.report.lease.length.ms > 0 => dfs.namenode.max.full.block.report.leases = ANY,value
885,dfs.namenode.edits.dir,dfs.namenode.checkpoint.edits.dir,dfs.namenode.checkpoint.edits.dir = ANY => dfs.namenode.edits.dir = ANY,value
1012,dfs.namenode.delegation.key.update-interval,dfs.namenode.delegation.token.max-lifetime,dfs.namenode.delegation.token.max-lifetime > dfs.namenode.delegation.key.update-interval,value
928,dfs.client.block.write.retries,dfs.client.block.write.replace-datanode-on-failure.min-replication,dfs.client.block.write.replace-datanode-on-failure.min-replication > 1 => dfs.client.block.write.retries > 0,value
912,dfs.replication.max,dfs.namenode.maintenance.replication.min,dfs.replication.max > dfs.namenode.maintenance.replication.min => dfs.namenode.maintenance.replication.min = [1 .. dfs.replication.max],value
1008,dfs.namenode.num.extra.edits.retained,dfs.namenode.num.checkpoints.retained,dfs.namenode.num.checkpoints.retained = ANY => dfs.namenode.num.extra.edits.retained = ANY,value
982,dfs.namenode.decommission.interval,dfs.namenode.decommission.blocks.per.interval,dfs.namenode.decommission.interval > 0 => dfs.namenode.decommission.blocks.per.interval > 0,value
863,dfs.namenode.backup.http-address,dfs.namenode.http-address,dfs.namenode.http-address != null => dfs.namenode.backup.http-address in {ANY},value
1518,dfs.webhdfs.oauth2.enabled,dfs.http.policy,dfs.http.policy = HTTPS_ONLY => dfs.webhdfs.oauth2.enabled = true,value
411,dfs.balancer.getBlocks.min-block-size,dfs.balancer.getBlocks.size,dfs.balancer.getBlocks.min-block-size < dfs.balancer.getBlocks.size => dfs.balancer.getBlocks.size > dfs.balancer.getBlocks.min-block-size,value
289,dfs.replication,dfs.replication.max,dfs.replication < dfs.replication.max,value
1029,dfs.datanode.max.transfer.threads,dfs.datanode.balance.bandwidthPerSec,dfs.datanode.balance.bandwidthPerSec = ANY => dfs.datanode.max.transfer.threads > (dfs.datanode.balance.bandwidthPerSec / 1048576),value
906,dfs.replication,dfs.namenode.maintenance.replication.min,dfs.replication > dfs.namenode.maintenance.replication.min,value
1406,dfs.datanode.hostname,dfs.datanode.ipc.address,"dfs.datanode.hostname != null => dfs.datanode.ipc.address = {dfs.datanode.hostname + "":50020""}",value
361,dfs.https.server.keystore.resource,dfs.https.server.keystore.type,"dfs.https.server.keystore.resource != null => dfs.https.server.keystore.type in {{""JKS"", ""PKCS12""}}",value
1481,dfs.qjournal.prepare-recovery.timeout.ms,dfs.qjournal.write-txns.timeout.ms,dfs.qjournal.write-txns.timeout.ms = dfs.qjournal.prepare-recovery.timeout.ms,value
1304,dfs.http.client.failover.sleep.base.millis,dfs.http.client.failover.sleep.max.millis,dfs.http.client.failover.sleep.max.millis > dfs.http.client.failover.sleep.base.millis,value
366,dfs.datanode.https.address,dfs.https.port,"dfs.https.port = <PortNumber> => dfs.datanode.https.address in {{ ""ANY:.."" + <PortNumber> + ""..ANY"" }}",value
1030,dfs.datanode.drop.cache.behind.reads,dfs.client.cache.drop.behind.reads,dfs.client.cache.drop.behind.reads = dfs.datanode.drop.cache.behind.reads,value
1222,dfs.webhdfs.acl.provider.permission.pattern,dfs.webhdfs.user.provider.user.pattern,dfs.webhdfs.user.provider.user.pattern = ANY => dfs.webhdfs.acl.provider.permission.pattern = ANY,value
1143,dfs.namenode.stale.datanode.interval,dfs.namenode.stale.datanode.minimum.interval,dfs.namenode.stale.datanode.minimum.interval > 0 => dfs.namenode.stale.datanode.interval >= dfs.namenode.stale.datanode.minimum.interval,value
1041,dfs.client.failover.sleep.base.millis,dfs.client.failover.sleep.max.millis,dfs.client.failover.sleep.base.millis < dfs.client.failover.sleep.max.millis,value
1035,dfs.client.failover.max.attempts,dfs.client.failover.sleep.max.millis,dfs.client.failover.sleep.max.millis > dfs.client.failover.sleep.base.millis,value
1327,dfs.balancer.getBlocks.size,dfs.balancer.getBlocks.min-block-size,dfs.balancer.getBlocks.min-block-size < dfs.balancer.getBlocks.size,value
1024,dfs.image.transfer-bootstrap-standby.bandwidthPerSec,dfs.image.transfer.bandwidthPerSec,dfs.image.transfer.bandwidthPerSec = dfs.image.transfer-bootstrap-standby.bandwidthPerSec,value
